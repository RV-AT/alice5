// Automatically generated by generate_ops.py. DO NOT EDIT.

case SpvOpFunctionParameter: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    ip->code.push_back(InsnFunctionParameter{type, resultId});
    if(ip->verbose) {
        std::cout << "FunctionParameter";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << "\n";
    }
    break;
}

case SpvOpFunctionCall: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t functionId = nextu();
    std::vector<uint32_t> operandId = restv();
    ip->code.push_back(InsnFunctionCall{type, resultId, functionId, operandId});
    if(ip->verbose) {
        std::cout << "FunctionCall";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " functionId ";
        std::cout << functionId;
        std::cout << " operandId ";
        for(int i = 0; i < operandId.size(); i++)
            std::cout << operandId[i] << " ";
        std::cout << "\n";
    }
    break;
}

case SpvOpLoad: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t pointerId = nextu();
    uint32_t memoryAccess = nextu(NO_MEMORY_ACCESS_SEMANTIC);
    ip->code.push_back(InsnLoad{type, resultId, pointerId, memoryAccess});
    if(ip->verbose) {
        std::cout << "Load";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " pointerId ";
        std::cout << pointerId;
        std::cout << " memoryAccess ";
        std::cout << memoryAccess;
        std::cout << "\n";
    }
    break;
}

case SpvOpStore: {
    uint32_t pointerId = nextu();
    uint32_t objectId = nextu();
    uint32_t memoryAccess = nextu(NO_MEMORY_ACCESS_SEMANTIC);
    ip->code.push_back(InsnStore{pointerId, objectId, memoryAccess});
    if(ip->verbose) {
        std::cout << "Store";
        std::cout << " pointerId ";
        std::cout << pointerId;
        std::cout << " objectId ";
        std::cout << objectId;
        std::cout << " memoryAccess ";
        std::cout << memoryAccess;
        std::cout << "\n";
    }
    break;
}

case SpvOpAccessChain: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t baseId = nextu();
    std::vector<uint32_t> indexesId = restv();
    ip->code.push_back(InsnAccessChain{type, resultId, baseId, indexesId});
    if(ip->verbose) {
        std::cout << "AccessChain";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " baseId ";
        std::cout << baseId;
        std::cout << " indexesId ";
        for(int i = 0; i < indexesId.size(); i++)
            std::cout << indexesId[i] << " ";
        std::cout << "\n";
    }
    break;
}

case SpvOpCompositeConstruct: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    std::vector<uint32_t> constituentsId = restv();
    ip->code.push_back(InsnCompositeConstruct{type, resultId, constituentsId});
    if(ip->verbose) {
        std::cout << "CompositeConstruct";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " constituentsId ";
        for(int i = 0; i < constituentsId.size(); i++)
            std::cout << constituentsId[i] << " ";
        std::cout << "\n";
    }
    break;
}

case SpvOpCompositeExtract: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t compositeId = nextu();
    std::vector<uint32_t> indexesId = restv();
    ip->code.push_back(InsnCompositeExtract{type, resultId, compositeId, indexesId});
    if(ip->verbose) {
        std::cout << "CompositeExtract";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " compositeId ";
        std::cout << compositeId;
        std::cout << " indexesId ";
        for(int i = 0; i < indexesId.size(); i++)
            std::cout << indexesId[i] << " ";
        std::cout << "\n";
    }
    break;
}

case SpvOpConvertSToF: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t signedValueId = nextu();
    ip->code.push_back(InsnConvertSToF{type, resultId, signedValueId});
    if(ip->verbose) {
        std::cout << "ConvertSToF";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " signedValueId ";
        std::cout << signedValueId;
        std::cout << "\n";
    }
    break;
}

case SpvOpFAdd: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t operand1Id = nextu();
    uint32_t operand2Id = nextu();
    ip->code.push_back(InsnFAdd{type, resultId, operand1Id, operand2Id});
    if(ip->verbose) {
        std::cout << "FAdd";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " operand1Id ";
        std::cout << operand1Id;
        std::cout << " operand2Id ";
        std::cout << operand2Id;
        std::cout << "\n";
    }
    break;
}

case SpvOpFSub: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t operand1Id = nextu();
    uint32_t operand2Id = nextu();
    ip->code.push_back(InsnFSub{type, resultId, operand1Id, operand2Id});
    if(ip->verbose) {
        std::cout << "FSub";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " operand1Id ";
        std::cout << operand1Id;
        std::cout << " operand2Id ";
        std::cout << operand2Id;
        std::cout << "\n";
    }
    break;
}

case SpvOpFMul: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t operand1Id = nextu();
    uint32_t operand2Id = nextu();
    ip->code.push_back(InsnFMul{type, resultId, operand1Id, operand2Id});
    if(ip->verbose) {
        std::cout << "FMul";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " operand1Id ";
        std::cout << operand1Id;
        std::cout << " operand2Id ";
        std::cout << operand2Id;
        std::cout << "\n";
    }
    break;
}

case SpvOpFDiv: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t operand1Id = nextu();
    uint32_t operand2Id = nextu();
    ip->code.push_back(InsnFDiv{type, resultId, operand1Id, operand2Id});
    if(ip->verbose) {
        std::cout << "FDiv";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " operand1Id ";
        std::cout << operand1Id;
        std::cout << " operand2Id ";
        std::cout << operand2Id;
        std::cout << "\n";
    }
    break;
}

case SpvOpVectorTimesScalar: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t vectorId = nextu();
    uint32_t scalarId = nextu();
    ip->code.push_back(InsnVectorTimesScalar{type, resultId, vectorId, scalarId});
    if(ip->verbose) {
        std::cout << "VectorTimesScalar";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " vectorId ";
        std::cout << vectorId;
        std::cout << " scalarId ";
        std::cout << scalarId;
        std::cout << "\n";
    }
    break;
}

case SpvOpFOrdLessThan: {
    uint32_t type = nextu();
    uint32_t resultId = nextu();
    uint32_t operand1Id = nextu();
    uint32_t operand2Id = nextu();
    ip->code.push_back(InsnFOrdLessThan{type, resultId, operand1Id, operand2Id});
    if(ip->verbose) {
        std::cout << "FOrdLessThan";
        std::cout << " type ";
        std::cout << type;
        std::cout << " resultId ";
        std::cout << resultId;
        std::cout << " operand1Id ";
        std::cout << operand1Id;
        std::cout << " operand2Id ";
        std::cout << operand2Id;
        std::cout << "\n";
    }
    break;
}

case SpvOpReturn: {
    ip->code.push_back(InsnReturn{});
    if(ip->verbose) {
        std::cout << "Return";
        std::cout << "\n";
    }
    break;
}

