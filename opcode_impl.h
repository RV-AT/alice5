// Automatically generated by generate_ops.py. DO NOT EDIT.

    void stepNop(const InsnNop& insn)
    {
        std::cerr << "stepNop() not implemented\n";
    }

    void stepUndef(const InsnUndef& insn)
    {
        std::cerr << "stepUndef() not implemented\n";
    }

    void stepSourceContinued(const InsnSourceContinued& insn)
    {
        std::cerr << "stepSourceContinued() not implemented\n";
    }

    void stepSource(const InsnSource& insn)
    {
        std::cerr << "stepSource() not implemented\n";
    }

    void stepSourceExtension(const InsnSourceExtension& insn)
    {
        std::cerr << "stepSourceExtension() not implemented\n";
    }

    void stepName(const InsnName& insn)
    {
        std::cerr << "stepName() not implemented\n";
    }

    void stepMemberName(const InsnMemberName& insn)
    {
        std::cerr << "stepMemberName() not implemented\n";
    }

    void stepString(const InsnString& insn)
    {
        std::cerr << "stepString() not implemented\n";
    }

    void stepLine(const InsnLine& insn)
    {
        std::cerr << "stepLine() not implemented\n";
    }

    void stepExtension(const InsnExtension& insn)
    {
        std::cerr << "stepExtension() not implemented\n";
    }

    void stepExtInstImport(const InsnExtInstImport& insn)
    {
        std::cerr << "stepExtInstImport() not implemented\n";
    }

    void stepExtInst(const InsnExtInst& insn)
    {
        std::cerr << "stepExtInst() not implemented\n";
    }

    void stepMemoryModel(const InsnMemoryModel& insn)
    {
        std::cerr << "stepMemoryModel() not implemented\n";
    }

    void stepEntryPoint(const InsnEntryPoint& insn)
    {
        std::cerr << "stepEntryPoint() not implemented\n";
    }

    void stepExecutionMode(const InsnExecutionMode& insn)
    {
        std::cerr << "stepExecutionMode() not implemented\n";
    }

    void stepCapability(const InsnCapability& insn)
    {
        std::cerr << "stepCapability() not implemented\n";
    }

    void stepTypeVoid(const InsnTypeVoid& insn)
    {
        std::cerr << "stepTypeVoid() not implemented\n";
    }

    void stepTypeBool(const InsnTypeBool& insn)
    {
        std::cerr << "stepTypeBool() not implemented\n";
    }

    void stepTypeInt(const InsnTypeInt& insn)
    {
        std::cerr << "stepTypeInt() not implemented\n";
    }

    void stepTypeFloat(const InsnTypeFloat& insn)
    {
        std::cerr << "stepTypeFloat() not implemented\n";
    }

    void stepTypeVector(const InsnTypeVector& insn)
    {
        std::cerr << "stepTypeVector() not implemented\n";
    }

    void stepTypeMatrix(const InsnTypeMatrix& insn)
    {
        std::cerr << "stepTypeMatrix() not implemented\n";
    }

    void stepTypeImage(const InsnTypeImage& insn)
    {
        std::cerr << "stepTypeImage() not implemented\n";
    }

    void stepTypeSampler(const InsnTypeSampler& insn)
    {
        std::cerr << "stepTypeSampler() not implemented\n";
    }

    void stepTypeSampledImage(const InsnTypeSampledImage& insn)
    {
        std::cerr << "stepTypeSampledImage() not implemented\n";
    }

    void stepTypeArray(const InsnTypeArray& insn)
    {
        std::cerr << "stepTypeArray() not implemented\n";
    }

    void stepTypeRuntimeArray(const InsnTypeRuntimeArray& insn)
    {
        std::cerr << "stepTypeRuntimeArray() not implemented\n";
    }

    void stepTypeStruct(const InsnTypeStruct& insn)
    {
        std::cerr << "stepTypeStruct() not implemented\n";
    }

    void stepTypeOpaque(const InsnTypeOpaque& insn)
    {
        std::cerr << "stepTypeOpaque() not implemented\n";
    }

    void stepTypePointer(const InsnTypePointer& insn)
    {
        std::cerr << "stepTypePointer() not implemented\n";
    }

    void stepTypeFunction(const InsnTypeFunction& insn)
    {
        std::cerr << "stepTypeFunction() not implemented\n";
    }

    void stepTypeEvent(const InsnTypeEvent& insn)
    {
        std::cerr << "stepTypeEvent() not implemented\n";
    }

    void stepTypeDeviceEvent(const InsnTypeDeviceEvent& insn)
    {
        std::cerr << "stepTypeDeviceEvent() not implemented\n";
    }

    void stepTypeReserveId(const InsnTypeReserveId& insn)
    {
        std::cerr << "stepTypeReserveId() not implemented\n";
    }

    void stepTypeQueue(const InsnTypeQueue& insn)
    {
        std::cerr << "stepTypeQueue() not implemented\n";
    }

    void stepTypePipe(const InsnTypePipe& insn)
    {
        std::cerr << "stepTypePipe() not implemented\n";
    }

    void stepTypeForwardPointer(const InsnTypeForwardPointer& insn)
    {
        std::cerr << "stepTypeForwardPointer() not implemented\n";
    }

    void stepConstantTrue(const InsnConstantTrue& insn)
    {
        std::cerr << "stepConstantTrue() not implemented\n";
    }

    void stepConstantFalse(const InsnConstantFalse& insn)
    {
        std::cerr << "stepConstantFalse() not implemented\n";
    }

    void stepConstant(const InsnConstant& insn)
    {
        std::cerr << "stepConstant() not implemented\n";
    }

    void stepConstantComposite(const InsnConstantComposite& insn)
    {
        std::cerr << "stepConstantComposite() not implemented\n";
    }

    void stepConstantSampler(const InsnConstantSampler& insn)
    {
        std::cerr << "stepConstantSampler() not implemented\n";
    }

    void stepConstantNull(const InsnConstantNull& insn)
    {
        std::cerr << "stepConstantNull() not implemented\n";
    }

    void stepSpecConstantTrue(const InsnSpecConstantTrue& insn)
    {
        std::cerr << "stepSpecConstantTrue() not implemented\n";
    }

    void stepSpecConstantFalse(const InsnSpecConstantFalse& insn)
    {
        std::cerr << "stepSpecConstantFalse() not implemented\n";
    }

    void stepSpecConstant(const InsnSpecConstant& insn)
    {
        std::cerr << "stepSpecConstant() not implemented\n";
    }

    void stepSpecConstantComposite(const InsnSpecConstantComposite& insn)
    {
        std::cerr << "stepSpecConstantComposite() not implemented\n";
    }

    void stepSpecConstantOp(const InsnSpecConstantOp& insn)
    {
        std::cerr << "stepSpecConstantOp() not implemented\n";
    }

    void stepFunction(const InsnFunction& insn)
    {
        std::cerr << "stepFunction() not implemented\n";
    }

    void stepFunctionEnd(const InsnFunctionEnd& insn)
    {
        std::cerr << "stepFunctionEnd() not implemented\n";
    }

    void stepVariable(const InsnVariable& insn)
    {
        std::cerr << "stepVariable() not implemented\n";
    }

    void stepImageTexelPointer(const InsnImageTexelPointer& insn)
    {
        std::cerr << "stepImageTexelPointer() not implemented\n";
    }

    void stepCopyMemory(const InsnCopyMemory& insn)
    {
        std::cerr << "stepCopyMemory() not implemented\n";
    }

    void stepCopyMemorySized(const InsnCopyMemorySized& insn)
    {
        std::cerr << "stepCopyMemorySized() not implemented\n";
    }

    void stepInBoundsAccessChain(const InsnInBoundsAccessChain& insn)
    {
        std::cerr << "stepInBoundsAccessChain() not implemented\n";
    }

    void stepPtrAccessChain(const InsnPtrAccessChain& insn)
    {
        std::cerr << "stepPtrAccessChain() not implemented\n";
    }

    void stepArrayLength(const InsnArrayLength& insn)
    {
        std::cerr << "stepArrayLength() not implemented\n";
    }

    void stepGenericPtrMemSemantics(const InsnGenericPtrMemSemantics& insn)
    {
        std::cerr << "stepGenericPtrMemSemantics() not implemented\n";
    }

    void stepInBoundsPtrAccessChain(const InsnInBoundsPtrAccessChain& insn)
    {
        std::cerr << "stepInBoundsPtrAccessChain() not implemented\n";
    }

    void stepDecorate(const InsnDecorate& insn)
    {
        std::cerr << "stepDecorate() not implemented\n";
    }

    void stepMemberDecorate(const InsnMemberDecorate& insn)
    {
        std::cerr << "stepMemberDecorate() not implemented\n";
    }

    void stepDecorationGroup(const InsnDecorationGroup& insn)
    {
        std::cerr << "stepDecorationGroup() not implemented\n";
    }

    void stepGroupDecorate(const InsnGroupDecorate& insn)
    {
        std::cerr << "stepGroupDecorate() not implemented\n";
    }

    void stepGroupMemberDecorate(const InsnGroupMemberDecorate& insn)
    {
        std::cerr << "stepGroupMemberDecorate() not implemented\n";
    }

    void stepVectorExtractDynamic(const InsnVectorExtractDynamic& insn)
    {
        std::cerr << "stepVectorExtractDynamic() not implemented\n";
    }

    void stepVectorInsertDynamic(const InsnVectorInsertDynamic& insn)
    {
        std::cerr << "stepVectorInsertDynamic() not implemented\n";
    }

    void stepVectorShuffle(const InsnVectorShuffle& insn)
    {
        std::cerr << "stepVectorShuffle() not implemented\n";
    }

    void stepCompositeInsert(const InsnCompositeInsert& insn)
    {
        std::cerr << "stepCompositeInsert() not implemented\n";
    }

    void stepCopyObject(const InsnCopyObject& insn)
    {
        std::cerr << "stepCopyObject() not implemented\n";
    }

    void stepTranspose(const InsnTranspose& insn)
    {
        std::cerr << "stepTranspose() not implemented\n";
    }

    void stepSampledImage(const InsnSampledImage& insn)
    {
        std::cerr << "stepSampledImage() not implemented\n";
    }

    void stepImageSampleImplicitLod(const InsnImageSampleImplicitLod& insn)
    {
        std::cerr << "stepImageSampleImplicitLod() not implemented\n";
    }

    void stepImageSampleExplicitLod(const InsnImageSampleExplicitLod& insn)
    {
        std::cerr << "stepImageSampleExplicitLod() not implemented\n";
    }

    void stepImageSampleDrefImplicitLod(const InsnImageSampleDrefImplicitLod& insn)
    {
        std::cerr << "stepImageSampleDrefImplicitLod() not implemented\n";
    }

    void stepImageSampleDrefExplicitLod(const InsnImageSampleDrefExplicitLod& insn)
    {
        std::cerr << "stepImageSampleDrefExplicitLod() not implemented\n";
    }

    void stepImageSampleProjImplicitLod(const InsnImageSampleProjImplicitLod& insn)
    {
        std::cerr << "stepImageSampleProjImplicitLod() not implemented\n";
    }

    void stepImageSampleProjExplicitLod(const InsnImageSampleProjExplicitLod& insn)
    {
        std::cerr << "stepImageSampleProjExplicitLod() not implemented\n";
    }

    void stepImageSampleProjDrefImplicitLod(const InsnImageSampleProjDrefImplicitLod& insn)
    {
        std::cerr << "stepImageSampleProjDrefImplicitLod() not implemented\n";
    }

    void stepImageSampleProjDrefExplicitLod(const InsnImageSampleProjDrefExplicitLod& insn)
    {
        std::cerr << "stepImageSampleProjDrefExplicitLod() not implemented\n";
    }

    void stepImageFetch(const InsnImageFetch& insn)
    {
        std::cerr << "stepImageFetch() not implemented\n";
    }

    void stepImageGather(const InsnImageGather& insn)
    {
        std::cerr << "stepImageGather() not implemented\n";
    }

    void stepImageDrefGather(const InsnImageDrefGather& insn)
    {
        std::cerr << "stepImageDrefGather() not implemented\n";
    }

    void stepImageRead(const InsnImageRead& insn)
    {
        std::cerr << "stepImageRead() not implemented\n";
    }

    void stepImageWrite(const InsnImageWrite& insn)
    {
        std::cerr << "stepImageWrite() not implemented\n";
    }

    void stepImage(const InsnImage& insn)
    {
        std::cerr << "stepImage() not implemented\n";
    }

    void stepImageQueryFormat(const InsnImageQueryFormat& insn)
    {
        std::cerr << "stepImageQueryFormat() not implemented\n";
    }

    void stepImageQueryOrder(const InsnImageQueryOrder& insn)
    {
        std::cerr << "stepImageQueryOrder() not implemented\n";
    }

    void stepImageQuerySizeLod(const InsnImageQuerySizeLod& insn)
    {
        std::cerr << "stepImageQuerySizeLod() not implemented\n";
    }

    void stepImageQuerySize(const InsnImageQuerySize& insn)
    {
        std::cerr << "stepImageQuerySize() not implemented\n";
    }

    void stepImageQueryLod(const InsnImageQueryLod& insn)
    {
        std::cerr << "stepImageQueryLod() not implemented\n";
    }

    void stepImageQueryLevels(const InsnImageQueryLevels& insn)
    {
        std::cerr << "stepImageQueryLevels() not implemented\n";
    }

    void stepImageQuerySamples(const InsnImageQuerySamples& insn)
    {
        std::cerr << "stepImageQuerySamples() not implemented\n";
    }

    void stepConvertFToU(const InsnConvertFToU& insn)
    {
        std::cerr << "stepConvertFToU() not implemented\n";
    }

    void stepConvertFToS(const InsnConvertFToS& insn)
    {
        std::cerr << "stepConvertFToS() not implemented\n";
    }

    void stepConvertUToF(const InsnConvertUToF& insn)
    {
        std::cerr << "stepConvertUToF() not implemented\n";
    }

    void stepUConvert(const InsnUConvert& insn)
    {
        std::cerr << "stepUConvert() not implemented\n";
    }

    void stepSConvert(const InsnSConvert& insn)
    {
        std::cerr << "stepSConvert() not implemented\n";
    }

    void stepFConvert(const InsnFConvert& insn)
    {
        std::cerr << "stepFConvert() not implemented\n";
    }

    void stepQuantizeToF16(const InsnQuantizeToF16& insn)
    {
        std::cerr << "stepQuantizeToF16() not implemented\n";
    }

    void stepConvertPtrToU(const InsnConvertPtrToU& insn)
    {
        std::cerr << "stepConvertPtrToU() not implemented\n";
    }

    void stepSatConvertSToU(const InsnSatConvertSToU& insn)
    {
        std::cerr << "stepSatConvertSToU() not implemented\n";
    }

    void stepSatConvertUToS(const InsnSatConvertUToS& insn)
    {
        std::cerr << "stepSatConvertUToS() not implemented\n";
    }

    void stepConvertUToPtr(const InsnConvertUToPtr& insn)
    {
        std::cerr << "stepConvertUToPtr() not implemented\n";
    }

    void stepPtrCastToGeneric(const InsnPtrCastToGeneric& insn)
    {
        std::cerr << "stepPtrCastToGeneric() not implemented\n";
    }

    void stepGenericCastToPtr(const InsnGenericCastToPtr& insn)
    {
        std::cerr << "stepGenericCastToPtr() not implemented\n";
    }

    void stepGenericCastToPtrExplicit(const InsnGenericCastToPtrExplicit& insn)
    {
        std::cerr << "stepGenericCastToPtrExplicit() not implemented\n";
    }

    void stepBitcast(const InsnBitcast& insn)
    {
        std::cerr << "stepBitcast() not implemented\n";
    }

    void stepSNegate(const InsnSNegate& insn)
    {
        std::cerr << "stepSNegate() not implemented\n";
    }

    void stepFNegate(const InsnFNegate& insn)
    {
        std::cerr << "stepFNegate() not implemented\n";
    }

    void stepIAdd(const InsnIAdd& insn)
    {
        std::cerr << "stepIAdd() not implemented\n";
    }

    void stepFAdd(const InsnFAdd& insn)
    {
        std::cerr << "stepFAdd() not implemented\n";
    }

    void stepISub(const InsnISub& insn)
    {
        std::cerr << "stepISub() not implemented\n";
    }

    void stepIMul(const InsnIMul& insn)
    {
        std::cerr << "stepIMul() not implemented\n";
    }

    void stepUDiv(const InsnUDiv& insn)
    {
        std::cerr << "stepUDiv() not implemented\n";
    }

    void stepSDiv(const InsnSDiv& insn)
    {
        std::cerr << "stepSDiv() not implemented\n";
    }

    void stepUMod(const InsnUMod& insn)
    {
        std::cerr << "stepUMod() not implemented\n";
    }

    void stepSRem(const InsnSRem& insn)
    {
        std::cerr << "stepSRem() not implemented\n";
    }

    void stepSMod(const InsnSMod& insn)
    {
        std::cerr << "stepSMod() not implemented\n";
    }

    void stepFRem(const InsnFRem& insn)
    {
        std::cerr << "stepFRem() not implemented\n";
    }

    void stepFMod(const InsnFMod& insn)
    {
        std::cerr << "stepFMod() not implemented\n";
    }

    void stepVectorTimesScalar(const InsnVectorTimesScalar& insn)
    {
        std::cerr << "stepVectorTimesScalar() not implemented\n";
    }

    void stepMatrixTimesScalar(const InsnMatrixTimesScalar& insn)
    {
        std::cerr << "stepMatrixTimesScalar() not implemented\n";
    }

    void stepVectorTimesMatrix(const InsnVectorTimesMatrix& insn)
    {
        std::cerr << "stepVectorTimesMatrix() not implemented\n";
    }

    void stepMatrixTimesVector(const InsnMatrixTimesVector& insn)
    {
        std::cerr << "stepMatrixTimesVector() not implemented\n";
    }

    void stepMatrixTimesMatrix(const InsnMatrixTimesMatrix& insn)
    {
        std::cerr << "stepMatrixTimesMatrix() not implemented\n";
    }

    void stepOuterProduct(const InsnOuterProduct& insn)
    {
        std::cerr << "stepOuterProduct() not implemented\n";
    }

    void stepDot(const InsnDot& insn)
    {
        std::cerr << "stepDot() not implemented\n";
    }

    void stepIAddCarry(const InsnIAddCarry& insn)
    {
        std::cerr << "stepIAddCarry() not implemented\n";
    }

    void stepISubBorrow(const InsnISubBorrow& insn)
    {
        std::cerr << "stepISubBorrow() not implemented\n";
    }

    void stepUMulExtended(const InsnUMulExtended& insn)
    {
        std::cerr << "stepUMulExtended() not implemented\n";
    }

    void stepSMulExtended(const InsnSMulExtended& insn)
    {
        std::cerr << "stepSMulExtended() not implemented\n";
    }

    void stepAny(const InsnAny& insn)
    {
        std::cerr << "stepAny() not implemented\n";
    }

    void stepAll(const InsnAll& insn)
    {
        std::cerr << "stepAll() not implemented\n";
    }

    void stepIsNan(const InsnIsNan& insn)
    {
        std::cerr << "stepIsNan() not implemented\n";
    }

    void stepIsInf(const InsnIsInf& insn)
    {
        std::cerr << "stepIsInf() not implemented\n";
    }

    void stepIsFinite(const InsnIsFinite& insn)
    {
        std::cerr << "stepIsFinite() not implemented\n";
    }

    void stepIsNormal(const InsnIsNormal& insn)
    {
        std::cerr << "stepIsNormal() not implemented\n";
    }

    void stepSignBitSet(const InsnSignBitSet& insn)
    {
        std::cerr << "stepSignBitSet() not implemented\n";
    }

    void stepLessOrGreater(const InsnLessOrGreater& insn)
    {
        std::cerr << "stepLessOrGreater() not implemented\n";
    }

    void stepOrdered(const InsnOrdered& insn)
    {
        std::cerr << "stepOrdered() not implemented\n";
    }

    void stepUnordered(const InsnUnordered& insn)
    {
        std::cerr << "stepUnordered() not implemented\n";
    }

    void stepLogicalEqual(const InsnLogicalEqual& insn)
    {
        std::cerr << "stepLogicalEqual() not implemented\n";
    }

    void stepLogicalNotEqual(const InsnLogicalNotEqual& insn)
    {
        std::cerr << "stepLogicalNotEqual() not implemented\n";
    }

    void stepLogicalOr(const InsnLogicalOr& insn)
    {
        std::cerr << "stepLogicalOr() not implemented\n";
    }

    void stepLogicalAnd(const InsnLogicalAnd& insn)
    {
        std::cerr << "stepLogicalAnd() not implemented\n";
    }

    void stepLogicalNot(const InsnLogicalNot& insn)
    {
        std::cerr << "stepLogicalNot() not implemented\n";
    }

    void stepSelect(const InsnSelect& insn)
    {
        std::cerr << "stepSelect() not implemented\n";
    }

    void stepIEqual(const InsnIEqual& insn)
    {
        std::cerr << "stepIEqual() not implemented\n";
    }

    void stepINotEqual(const InsnINotEqual& insn)
    {
        std::cerr << "stepINotEqual() not implemented\n";
    }

    void stepUGreaterThan(const InsnUGreaterThan& insn)
    {
        std::cerr << "stepUGreaterThan() not implemented\n";
    }

    void stepSGreaterThan(const InsnSGreaterThan& insn)
    {
        std::cerr << "stepSGreaterThan() not implemented\n";
    }

    void stepUGreaterThanEqual(const InsnUGreaterThanEqual& insn)
    {
        std::cerr << "stepUGreaterThanEqual() not implemented\n";
    }

    void stepSGreaterThanEqual(const InsnSGreaterThanEqual& insn)
    {
        std::cerr << "stepSGreaterThanEqual() not implemented\n";
    }

    void stepULessThan(const InsnULessThan& insn)
    {
        std::cerr << "stepULessThan() not implemented\n";
    }

    void stepSLessThan(const InsnSLessThan& insn)
    {
        std::cerr << "stepSLessThan() not implemented\n";
    }

    void stepULessThanEqual(const InsnULessThanEqual& insn)
    {
        std::cerr << "stepULessThanEqual() not implemented\n";
    }

    void stepSLessThanEqual(const InsnSLessThanEqual& insn)
    {
        std::cerr << "stepSLessThanEqual() not implemented\n";
    }

    void stepFOrdEqual(const InsnFOrdEqual& insn)
    {
        std::cerr << "stepFOrdEqual() not implemented\n";
    }

    void stepFUnordEqual(const InsnFUnordEqual& insn)
    {
        std::cerr << "stepFUnordEqual() not implemented\n";
    }

    void stepFOrdNotEqual(const InsnFOrdNotEqual& insn)
    {
        std::cerr << "stepFOrdNotEqual() not implemented\n";
    }

    void stepFUnordNotEqual(const InsnFUnordNotEqual& insn)
    {
        std::cerr << "stepFUnordNotEqual() not implemented\n";
    }

    void stepFOrdLessThan(const InsnFOrdLessThan& insn)
    {
        std::cerr << "stepFOrdLessThan() not implemented\n";
    }

    void stepFUnordLessThan(const InsnFUnordLessThan& insn)
    {
        std::cerr << "stepFUnordLessThan() not implemented\n";
    }

    void stepFOrdGreaterThan(const InsnFOrdGreaterThan& insn)
    {
        std::cerr << "stepFOrdGreaterThan() not implemented\n";
    }

    void stepFUnordGreaterThan(const InsnFUnordGreaterThan& insn)
    {
        std::cerr << "stepFUnordGreaterThan() not implemented\n";
    }

    void stepFOrdLessThanEqual(const InsnFOrdLessThanEqual& insn)
    {
        std::cerr << "stepFOrdLessThanEqual() not implemented\n";
    }

    void stepFUnordLessThanEqual(const InsnFUnordLessThanEqual& insn)
    {
        std::cerr << "stepFUnordLessThanEqual() not implemented\n";
    }

    void stepFOrdGreaterThanEqual(const InsnFOrdGreaterThanEqual& insn)
    {
        std::cerr << "stepFOrdGreaterThanEqual() not implemented\n";
    }

    void stepFUnordGreaterThanEqual(const InsnFUnordGreaterThanEqual& insn)
    {
        std::cerr << "stepFUnordGreaterThanEqual() not implemented\n";
    }

    void stepShiftRightLogical(const InsnShiftRightLogical& insn)
    {
        std::cerr << "stepShiftRightLogical() not implemented\n";
    }

    void stepShiftRightArithmetic(const InsnShiftRightArithmetic& insn)
    {
        std::cerr << "stepShiftRightArithmetic() not implemented\n";
    }

    void stepShiftLeftLogical(const InsnShiftLeftLogical& insn)
    {
        std::cerr << "stepShiftLeftLogical() not implemented\n";
    }

    void stepBitwiseOr(const InsnBitwiseOr& insn)
    {
        std::cerr << "stepBitwiseOr() not implemented\n";
    }

    void stepBitwiseXor(const InsnBitwiseXor& insn)
    {
        std::cerr << "stepBitwiseXor() not implemented\n";
    }

    void stepBitwiseAnd(const InsnBitwiseAnd& insn)
    {
        std::cerr << "stepBitwiseAnd() not implemented\n";
    }

    void stepNot(const InsnNot& insn)
    {
        std::cerr << "stepNot() not implemented\n";
    }

    void stepBitFieldInsert(const InsnBitFieldInsert& insn)
    {
        std::cerr << "stepBitFieldInsert() not implemented\n";
    }

    void stepBitFieldSExtract(const InsnBitFieldSExtract& insn)
    {
        std::cerr << "stepBitFieldSExtract() not implemented\n";
    }

    void stepBitFieldUExtract(const InsnBitFieldUExtract& insn)
    {
        std::cerr << "stepBitFieldUExtract() not implemented\n";
    }

    void stepBitReverse(const InsnBitReverse& insn)
    {
        std::cerr << "stepBitReverse() not implemented\n";
    }

    void stepBitCount(const InsnBitCount& insn)
    {
        std::cerr << "stepBitCount() not implemented\n";
    }

    void stepDPdx(const InsnDPdx& insn)
    {
        std::cerr << "stepDPdx() not implemented\n";
    }

    void stepDPdy(const InsnDPdy& insn)
    {
        std::cerr << "stepDPdy() not implemented\n";
    }

    void stepFwidth(const InsnFwidth& insn)
    {
        std::cerr << "stepFwidth() not implemented\n";
    }

    void stepDPdxFine(const InsnDPdxFine& insn)
    {
        std::cerr << "stepDPdxFine() not implemented\n";
    }

    void stepDPdyFine(const InsnDPdyFine& insn)
    {
        std::cerr << "stepDPdyFine() not implemented\n";
    }

    void stepFwidthFine(const InsnFwidthFine& insn)
    {
        std::cerr << "stepFwidthFine() not implemented\n";
    }

    void stepDPdxCoarse(const InsnDPdxCoarse& insn)
    {
        std::cerr << "stepDPdxCoarse() not implemented\n";
    }

    void stepDPdyCoarse(const InsnDPdyCoarse& insn)
    {
        std::cerr << "stepDPdyCoarse() not implemented\n";
    }

    void stepFwidthCoarse(const InsnFwidthCoarse& insn)
    {
        std::cerr << "stepFwidthCoarse() not implemented\n";
    }

    void stepEmitVertex(const InsnEmitVertex& insn)
    {
        std::cerr << "stepEmitVertex() not implemented\n";
    }

    void stepEndPrimitive(const InsnEndPrimitive& insn)
    {
        std::cerr << "stepEndPrimitive() not implemented\n";
    }

    void stepEmitStreamVertex(const InsnEmitStreamVertex& insn)
    {
        std::cerr << "stepEmitStreamVertex() not implemented\n";
    }

    void stepEndStreamPrimitive(const InsnEndStreamPrimitive& insn)
    {
        std::cerr << "stepEndStreamPrimitive() not implemented\n";
    }

    void stepControlBarrier(const InsnControlBarrier& insn)
    {
        std::cerr << "stepControlBarrier() not implemented\n";
    }

    void stepMemoryBarrier(const InsnMemoryBarrier& insn)
    {
        std::cerr << "stepMemoryBarrier() not implemented\n";
    }

    void stepAtomicLoad(const InsnAtomicLoad& insn)
    {
        std::cerr << "stepAtomicLoad() not implemented\n";
    }

    void stepAtomicStore(const InsnAtomicStore& insn)
    {
        std::cerr << "stepAtomicStore() not implemented\n";
    }

    void stepAtomicExchange(const InsnAtomicExchange& insn)
    {
        std::cerr << "stepAtomicExchange() not implemented\n";
    }

    void stepAtomicCompareExchange(const InsnAtomicCompareExchange& insn)
    {
        std::cerr << "stepAtomicCompareExchange() not implemented\n";
    }

    void stepAtomicCompareExchangeWeak(const InsnAtomicCompareExchangeWeak& insn)
    {
        std::cerr << "stepAtomicCompareExchangeWeak() not implemented\n";
    }

    void stepAtomicIIncrement(const InsnAtomicIIncrement& insn)
    {
        std::cerr << "stepAtomicIIncrement() not implemented\n";
    }

    void stepAtomicIDecrement(const InsnAtomicIDecrement& insn)
    {
        std::cerr << "stepAtomicIDecrement() not implemented\n";
    }

    void stepAtomicIAdd(const InsnAtomicIAdd& insn)
    {
        std::cerr << "stepAtomicIAdd() not implemented\n";
    }

    void stepAtomicISub(const InsnAtomicISub& insn)
    {
        std::cerr << "stepAtomicISub() not implemented\n";
    }

    void stepAtomicSMin(const InsnAtomicSMin& insn)
    {
        std::cerr << "stepAtomicSMin() not implemented\n";
    }

    void stepAtomicUMin(const InsnAtomicUMin& insn)
    {
        std::cerr << "stepAtomicUMin() not implemented\n";
    }

    void stepAtomicSMax(const InsnAtomicSMax& insn)
    {
        std::cerr << "stepAtomicSMax() not implemented\n";
    }

    void stepAtomicUMax(const InsnAtomicUMax& insn)
    {
        std::cerr << "stepAtomicUMax() not implemented\n";
    }

    void stepAtomicAnd(const InsnAtomicAnd& insn)
    {
        std::cerr << "stepAtomicAnd() not implemented\n";
    }

    void stepAtomicOr(const InsnAtomicOr& insn)
    {
        std::cerr << "stepAtomicOr() not implemented\n";
    }

    void stepAtomicXor(const InsnAtomicXor& insn)
    {
        std::cerr << "stepAtomicXor() not implemented\n";
    }

    void stepPhi(const InsnPhi& insn)
    {
        std::cerr << "stepPhi() not implemented\n";
    }

    void stepLoopMerge(const InsnLoopMerge& insn)
    {
        std::cerr << "stepLoopMerge() not implemented\n";
    }

    void stepSelectionMerge(const InsnSelectionMerge& insn)
    {
        std::cerr << "stepSelectionMerge() not implemented\n";
    }

    void stepLabel(const InsnLabel& insn)
    {
        std::cerr << "stepLabel() not implemented\n";
    }

    void stepBranch(const InsnBranch& insn)
    {
        std::cerr << "stepBranch() not implemented\n";
    }

    void stepBranchConditional(const InsnBranchConditional& insn)
    {
        std::cerr << "stepBranchConditional() not implemented\n";
    }

    void stepSwitch(const InsnSwitch& insn)
    {
        std::cerr << "stepSwitch() not implemented\n";
    }

    void stepKill(const InsnKill& insn)
    {
        std::cerr << "stepKill() not implemented\n";
    }

    void stepReturnValue(const InsnReturnValue& insn)
    {
        std::cerr << "stepReturnValue() not implemented\n";
    }

    void stepUnreachable(const InsnUnreachable& insn)
    {
        std::cerr << "stepUnreachable() not implemented\n";
    }

    void stepLifetimeStart(const InsnLifetimeStart& insn)
    {
        std::cerr << "stepLifetimeStart() not implemented\n";
    }

    void stepLifetimeStop(const InsnLifetimeStop& insn)
    {
        std::cerr << "stepLifetimeStop() not implemented\n";
    }

    void stepGroupAsyncCopy(const InsnGroupAsyncCopy& insn)
    {
        std::cerr << "stepGroupAsyncCopy() not implemented\n";
    }

    void stepGroupWaitEvents(const InsnGroupWaitEvents& insn)
    {
        std::cerr << "stepGroupWaitEvents() not implemented\n";
    }

    void stepGroupAll(const InsnGroupAll& insn)
    {
        std::cerr << "stepGroupAll() not implemented\n";
    }

    void stepGroupAny(const InsnGroupAny& insn)
    {
        std::cerr << "stepGroupAny() not implemented\n";
    }

    void stepGroupBroadcast(const InsnGroupBroadcast& insn)
    {
        std::cerr << "stepGroupBroadcast() not implemented\n";
    }

    void stepGroupIAdd(const InsnGroupIAdd& insn)
    {
        std::cerr << "stepGroupIAdd() not implemented\n";
    }

    void stepGroupFAdd(const InsnGroupFAdd& insn)
    {
        std::cerr << "stepGroupFAdd() not implemented\n";
    }

    void stepGroupFMin(const InsnGroupFMin& insn)
    {
        std::cerr << "stepGroupFMin() not implemented\n";
    }

    void stepGroupUMin(const InsnGroupUMin& insn)
    {
        std::cerr << "stepGroupUMin() not implemented\n";
    }

    void stepGroupSMin(const InsnGroupSMin& insn)
    {
        std::cerr << "stepGroupSMin() not implemented\n";
    }

    void stepGroupFMax(const InsnGroupFMax& insn)
    {
        std::cerr << "stepGroupFMax() not implemented\n";
    }

    void stepGroupUMax(const InsnGroupUMax& insn)
    {
        std::cerr << "stepGroupUMax() not implemented\n";
    }

    void stepGroupSMax(const InsnGroupSMax& insn)
    {
        std::cerr << "stepGroupSMax() not implemented\n";
    }

    void stepReadPipe(const InsnReadPipe& insn)
    {
        std::cerr << "stepReadPipe() not implemented\n";
    }

    void stepWritePipe(const InsnWritePipe& insn)
    {
        std::cerr << "stepWritePipe() not implemented\n";
    }

    void stepReservedReadPipe(const InsnReservedReadPipe& insn)
    {
        std::cerr << "stepReservedReadPipe() not implemented\n";
    }

    void stepReservedWritePipe(const InsnReservedWritePipe& insn)
    {
        std::cerr << "stepReservedWritePipe() not implemented\n";
    }

    void stepReserveReadPipePackets(const InsnReserveReadPipePackets& insn)
    {
        std::cerr << "stepReserveReadPipePackets() not implemented\n";
    }

    void stepReserveWritePipePackets(const InsnReserveWritePipePackets& insn)
    {
        std::cerr << "stepReserveWritePipePackets() not implemented\n";
    }

    void stepCommitReadPipe(const InsnCommitReadPipe& insn)
    {
        std::cerr << "stepCommitReadPipe() not implemented\n";
    }

    void stepCommitWritePipe(const InsnCommitWritePipe& insn)
    {
        std::cerr << "stepCommitWritePipe() not implemented\n";
    }

    void stepIsValidReserveId(const InsnIsValidReserveId& insn)
    {
        std::cerr << "stepIsValidReserveId() not implemented\n";
    }

    void stepGetNumPipePackets(const InsnGetNumPipePackets& insn)
    {
        std::cerr << "stepGetNumPipePackets() not implemented\n";
    }

    void stepGetMaxPipePackets(const InsnGetMaxPipePackets& insn)
    {
        std::cerr << "stepGetMaxPipePackets() not implemented\n";
    }

    void stepGroupReserveReadPipePackets(const InsnGroupReserveReadPipePackets& insn)
    {
        std::cerr << "stepGroupReserveReadPipePackets() not implemented\n";
    }

    void stepGroupReserveWritePipePackets(const InsnGroupReserveWritePipePackets& insn)
    {
        std::cerr << "stepGroupReserveWritePipePackets() not implemented\n";
    }

    void stepGroupCommitReadPipe(const InsnGroupCommitReadPipe& insn)
    {
        std::cerr << "stepGroupCommitReadPipe() not implemented\n";
    }

    void stepGroupCommitWritePipe(const InsnGroupCommitWritePipe& insn)
    {
        std::cerr << "stepGroupCommitWritePipe() not implemented\n";
    }

    void stepEnqueueMarker(const InsnEnqueueMarker& insn)
    {
        std::cerr << "stepEnqueueMarker() not implemented\n";
    }

    void stepEnqueueKernel(const InsnEnqueueKernel& insn)
    {
        std::cerr << "stepEnqueueKernel() not implemented\n";
    }

    void stepGetKernelNDrangeSubGroupCount(const InsnGetKernelNDrangeSubGroupCount& insn)
    {
        std::cerr << "stepGetKernelNDrangeSubGroupCount() not implemented\n";
    }

    void stepGetKernelNDrangeMaxSubGroupSize(const InsnGetKernelNDrangeMaxSubGroupSize& insn)
    {
        std::cerr << "stepGetKernelNDrangeMaxSubGroupSize() not implemented\n";
    }

    void stepGetKernelWorkGroupSize(const InsnGetKernelWorkGroupSize& insn)
    {
        std::cerr << "stepGetKernelWorkGroupSize() not implemented\n";
    }

    void stepGetKernelPreferredWorkGroupSizeMultiple(const InsnGetKernelPreferredWorkGroupSizeMultiple& insn)
    {
        std::cerr << "stepGetKernelPreferredWorkGroupSizeMultiple() not implemented\n";
    }

    void stepRetainEvent(const InsnRetainEvent& insn)
    {
        std::cerr << "stepRetainEvent() not implemented\n";
    }

    void stepReleaseEvent(const InsnReleaseEvent& insn)
    {
        std::cerr << "stepReleaseEvent() not implemented\n";
    }

    void stepCreateUserEvent(const InsnCreateUserEvent& insn)
    {
        std::cerr << "stepCreateUserEvent() not implemented\n";
    }

    void stepIsValidEvent(const InsnIsValidEvent& insn)
    {
        std::cerr << "stepIsValidEvent() not implemented\n";
    }

    void stepSetUserEventStatus(const InsnSetUserEventStatus& insn)
    {
        std::cerr << "stepSetUserEventStatus() not implemented\n";
    }

    void stepCaptureEventProfilingInfo(const InsnCaptureEventProfilingInfo& insn)
    {
        std::cerr << "stepCaptureEventProfilingInfo() not implemented\n";
    }

    void stepGetDefaultQueue(const InsnGetDefaultQueue& insn)
    {
        std::cerr << "stepGetDefaultQueue() not implemented\n";
    }

    void stepBuildNDRange(const InsnBuildNDRange& insn)
    {
        std::cerr << "stepBuildNDRange() not implemented\n";
    }

    void stepImageSparseSampleImplicitLod(const InsnImageSparseSampleImplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleImplicitLod() not implemented\n";
    }

    void stepImageSparseSampleExplicitLod(const InsnImageSparseSampleExplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleExplicitLod() not implemented\n";
    }

    void stepImageSparseSampleDrefImplicitLod(const InsnImageSparseSampleDrefImplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleDrefImplicitLod() not implemented\n";
    }

    void stepImageSparseSampleDrefExplicitLod(const InsnImageSparseSampleDrefExplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleDrefExplicitLod() not implemented\n";
    }

    void stepImageSparseSampleProjImplicitLod(const InsnImageSparseSampleProjImplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleProjImplicitLod() not implemented\n";
    }

    void stepImageSparseSampleProjExplicitLod(const InsnImageSparseSampleProjExplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleProjExplicitLod() not implemented\n";
    }

    void stepImageSparseSampleProjDrefImplicitLod(const InsnImageSparseSampleProjDrefImplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleProjDrefImplicitLod() not implemented\n";
    }

    void stepImageSparseSampleProjDrefExplicitLod(const InsnImageSparseSampleProjDrefExplicitLod& insn)
    {
        std::cerr << "stepImageSparseSampleProjDrefExplicitLod() not implemented\n";
    }

    void stepImageSparseFetch(const InsnImageSparseFetch& insn)
    {
        std::cerr << "stepImageSparseFetch() not implemented\n";
    }

    void stepImageSparseGather(const InsnImageSparseGather& insn)
    {
        std::cerr << "stepImageSparseGather() not implemented\n";
    }

    void stepImageSparseDrefGather(const InsnImageSparseDrefGather& insn)
    {
        std::cerr << "stepImageSparseDrefGather() not implemented\n";
    }

    void stepImageSparseTexelsResident(const InsnImageSparseTexelsResident& insn)
    {
        std::cerr << "stepImageSparseTexelsResident() not implemented\n";
    }

    void stepNoLine(const InsnNoLine& insn)
    {
        std::cerr << "stepNoLine() not implemented\n";
    }

    void stepAtomicFlagTestAndSet(const InsnAtomicFlagTestAndSet& insn)
    {
        std::cerr << "stepAtomicFlagTestAndSet() not implemented\n";
    }

    void stepAtomicFlagClear(const InsnAtomicFlagClear& insn)
    {
        std::cerr << "stepAtomicFlagClear() not implemented\n";
    }

    void stepImageSparseRead(const InsnImageSparseRead& insn)
    {
        std::cerr << "stepImageSparseRead() not implemented\n";
    }

    void stepSizeOf(const InsnSizeOf& insn)
    {
        std::cerr << "stepSizeOf() not implemented\n";
    }

    void stepTypePipeStorage(const InsnTypePipeStorage& insn)
    {
        std::cerr << "stepTypePipeStorage() not implemented\n";
    }

    void stepConstantPipeStorage(const InsnConstantPipeStorage& insn)
    {
        std::cerr << "stepConstantPipeStorage() not implemented\n";
    }

    void stepCreatePipeFromPipeStorage(const InsnCreatePipeFromPipeStorage& insn)
    {
        std::cerr << "stepCreatePipeFromPipeStorage() not implemented\n";
    }

    void stepGetKernelLocalSizeForSubgroupCount(const InsnGetKernelLocalSizeForSubgroupCount& insn)
    {
        std::cerr << "stepGetKernelLocalSizeForSubgroupCount() not implemented\n";
    }

    void stepGetKernelMaxNumSubgroups(const InsnGetKernelMaxNumSubgroups& insn)
    {
        std::cerr << "stepGetKernelMaxNumSubgroups() not implemented\n";
    }

    void stepTypeNamedBarrier(const InsnTypeNamedBarrier& insn)
    {
        std::cerr << "stepTypeNamedBarrier() not implemented\n";
    }

    void stepNamedBarrierInitialize(const InsnNamedBarrierInitialize& insn)
    {
        std::cerr << "stepNamedBarrierInitialize() not implemented\n";
    }

    void stepMemoryNamedBarrier(const InsnMemoryNamedBarrier& insn)
    {
        std::cerr << "stepMemoryNamedBarrier() not implemented\n";
    }

    void stepModuleProcessed(const InsnModuleProcessed& insn)
    {
        std::cerr << "stepModuleProcessed() not implemented\n";
    }

    void stepExecutionModeId(const InsnExecutionModeId& insn)
    {
        std::cerr << "stepExecutionModeId() not implemented\n";
    }

    void stepDecorateId(const InsnDecorateId& insn)
    {
        std::cerr << "stepDecorateId() not implemented\n";
    }

    void stepSubgroupBallotKHR(const InsnSubgroupBallotKHR& insn)
    {
        std::cerr << "stepSubgroupBallotKHR() not implemented\n";
    }

    void stepSubgroupFirstInvocationKHR(const InsnSubgroupFirstInvocationKHR& insn)
    {
        std::cerr << "stepSubgroupFirstInvocationKHR() not implemented\n";
    }

    void stepSubgroupAllKHR(const InsnSubgroupAllKHR& insn)
    {
        std::cerr << "stepSubgroupAllKHR() not implemented\n";
    }

    void stepSubgroupAnyKHR(const InsnSubgroupAnyKHR& insn)
    {
        std::cerr << "stepSubgroupAnyKHR() not implemented\n";
    }

    void stepSubgroupAllEqualKHR(const InsnSubgroupAllEqualKHR& insn)
    {
        std::cerr << "stepSubgroupAllEqualKHR() not implemented\n";
    }

    void stepSubgroupReadInvocationKHR(const InsnSubgroupReadInvocationKHR& insn)
    {
        std::cerr << "stepSubgroupReadInvocationKHR() not implemented\n";
    }

    void stepGroupIAddNonUniformAMD(const InsnGroupIAddNonUniformAMD& insn)
    {
        std::cerr << "stepGroupIAddNonUniformAMD() not implemented\n";
    }

    void stepGroupFAddNonUniformAMD(const InsnGroupFAddNonUniformAMD& insn)
    {
        std::cerr << "stepGroupFAddNonUniformAMD() not implemented\n";
    }

    void stepGroupFMinNonUniformAMD(const InsnGroupFMinNonUniformAMD& insn)
    {
        std::cerr << "stepGroupFMinNonUniformAMD() not implemented\n";
    }

    void stepGroupUMinNonUniformAMD(const InsnGroupUMinNonUniformAMD& insn)
    {
        std::cerr << "stepGroupUMinNonUniformAMD() not implemented\n";
    }

    void stepGroupSMinNonUniformAMD(const InsnGroupSMinNonUniformAMD& insn)
    {
        std::cerr << "stepGroupSMinNonUniformAMD() not implemented\n";
    }

    void stepGroupFMaxNonUniformAMD(const InsnGroupFMaxNonUniformAMD& insn)
    {
        std::cerr << "stepGroupFMaxNonUniformAMD() not implemented\n";
    }

    void stepGroupUMaxNonUniformAMD(const InsnGroupUMaxNonUniformAMD& insn)
    {
        std::cerr << "stepGroupUMaxNonUniformAMD() not implemented\n";
    }

    void stepGroupSMaxNonUniformAMD(const InsnGroupSMaxNonUniformAMD& insn)
    {
        std::cerr << "stepGroupSMaxNonUniformAMD() not implemented\n";
    }

    void stepFragmentMaskFetchAMD(const InsnFragmentMaskFetchAMD& insn)
    {
        std::cerr << "stepFragmentMaskFetchAMD() not implemented\n";
    }

    void stepFragmentFetchAMD(const InsnFragmentFetchAMD& insn)
    {
        std::cerr << "stepFragmentFetchAMD() not implemented\n";
    }

    void stepSubgroupShuffleINTEL(const InsnSubgroupShuffleINTEL& insn)
    {
        std::cerr << "stepSubgroupShuffleINTEL() not implemented\n";
    }

    void stepSubgroupShuffleDownINTEL(const InsnSubgroupShuffleDownINTEL& insn)
    {
        std::cerr << "stepSubgroupShuffleDownINTEL() not implemented\n";
    }

    void stepSubgroupShuffleUpINTEL(const InsnSubgroupShuffleUpINTEL& insn)
    {
        std::cerr << "stepSubgroupShuffleUpINTEL() not implemented\n";
    }

    void stepSubgroupShuffleXorINTEL(const InsnSubgroupShuffleXorINTEL& insn)
    {
        std::cerr << "stepSubgroupShuffleXorINTEL() not implemented\n";
    }

    void stepSubgroupBlockReadINTEL(const InsnSubgroupBlockReadINTEL& insn)
    {
        std::cerr << "stepSubgroupBlockReadINTEL() not implemented\n";
    }

    void stepSubgroupBlockWriteINTEL(const InsnSubgroupBlockWriteINTEL& insn)
    {
        std::cerr << "stepSubgroupBlockWriteINTEL() not implemented\n";
    }

    void stepSubgroupImageBlockReadINTEL(const InsnSubgroupImageBlockReadINTEL& insn)
    {
        std::cerr << "stepSubgroupImageBlockReadINTEL() not implemented\n";
    }

    void stepSubgroupImageBlockWriteINTEL(const InsnSubgroupImageBlockWriteINTEL& insn)
    {
        std::cerr << "stepSubgroupImageBlockWriteINTEL() not implemented\n";
    }

    void stepDecorateStringGOOGLE(const InsnDecorateStringGOOGLE& insn)
    {
        std::cerr << "stepDecorateStringGOOGLE() not implemented\n";
    }

    void stepMemberDecorateStringGOOGLE(const InsnMemberDecorateStringGOOGLE& insn)
    {
        std::cerr << "stepMemberDecorateStringGOOGLE() not implemented\n";
    }

