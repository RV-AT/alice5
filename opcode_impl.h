#ifndef OPCODE_IMPL_H
#define OPCODE_IMPL_H

// Automatically generated by generate_ops.py. DO NOT EDIT.

void State::stepNop(const InsnNop& insn)
{
    std::cerr << "stepNop() not implemented\n";
}

void State::stepUndef(const InsnUndef& insn)
{
    std::cerr << "stepUndef() not implemented\n";
}

void State::stepSourceContinued(const InsnSourceContinued& insn)
{
    std::cerr << "stepSourceContinued() not implemented\n";
}

void State::stepSource(const InsnSource& insn)
{
    std::cerr << "stepSource() not implemented\n";
}

void State::stepSourceExtension(const InsnSourceExtension& insn)
{
    std::cerr << "stepSourceExtension() not implemented\n";
}

void State::stepName(const InsnName& insn)
{
    std::cerr << "stepName() not implemented\n";
}

void State::stepMemberName(const InsnMemberName& insn)
{
    std::cerr << "stepMemberName() not implemented\n";
}

void State::stepString(const InsnString& insn)
{
    std::cerr << "stepString() not implemented\n";
}

void State::stepLine(const InsnLine& insn)
{
    std::cerr << "stepLine() not implemented\n";
}

void State::stepExtension(const InsnExtension& insn)
{
    std::cerr << "stepExtension() not implemented\n";
}

void State::stepExtInstImport(const InsnExtInstImport& insn)
{
    std::cerr << "stepExtInstImport() not implemented\n";
}

void State::stepExtInst(const InsnExtInst& insn)
{
    std::cerr << "stepExtInst() not implemented\n";
}

void State::stepMemoryModel(const InsnMemoryModel& insn)
{
    std::cerr << "stepMemoryModel() not implemented\n";
}

void State::stepEntryPoint(const InsnEntryPoint& insn)
{
    std::cerr << "stepEntryPoint() not implemented\n";
}

void State::stepExecutionMode(const InsnExecutionMode& insn)
{
    std::cerr << "stepExecutionMode() not implemented\n";
}

void State::stepCapability(const InsnCapability& insn)
{
    std::cerr << "stepCapability() not implemented\n";
}

void State::stepTypeVoid(const InsnTypeVoid& insn)
{
    std::cerr << "stepTypeVoid() not implemented\n";
}

void State::stepTypeBool(const InsnTypeBool& insn)
{
    std::cerr << "stepTypeBool() not implemented\n";
}

void State::stepTypeInt(const InsnTypeInt& insn)
{
    std::cerr << "stepTypeInt() not implemented\n";
}

void State::stepTypeFloat(const InsnTypeFloat& insn)
{
    std::cerr << "stepTypeFloat() not implemented\n";
}

void State::stepTypeVector(const InsnTypeVector& insn)
{
    std::cerr << "stepTypeVector() not implemented\n";
}

void State::stepTypeMatrix(const InsnTypeMatrix& insn)
{
    std::cerr << "stepTypeMatrix() not implemented\n";
}

void State::stepTypeImage(const InsnTypeImage& insn)
{
    std::cerr << "stepTypeImage() not implemented\n";
}

void State::stepTypeSampler(const InsnTypeSampler& insn)
{
    std::cerr << "stepTypeSampler() not implemented\n";
}

void State::stepTypeSampledImage(const InsnTypeSampledImage& insn)
{
    std::cerr << "stepTypeSampledImage() not implemented\n";
}

void State::stepTypeArray(const InsnTypeArray& insn)
{
    std::cerr << "stepTypeArray() not implemented\n";
}

void State::stepTypeRuntimeArray(const InsnTypeRuntimeArray& insn)
{
    std::cerr << "stepTypeRuntimeArray() not implemented\n";
}

void State::stepTypeStruct(const InsnTypeStruct& insn)
{
    std::cerr << "stepTypeStruct() not implemented\n";
}

void State::stepTypeOpaque(const InsnTypeOpaque& insn)
{
    std::cerr << "stepTypeOpaque() not implemented\n";
}

void State::stepTypePointer(const InsnTypePointer& insn)
{
    std::cerr << "stepTypePointer() not implemented\n";
}

void State::stepTypeFunction(const InsnTypeFunction& insn)
{
    std::cerr << "stepTypeFunction() not implemented\n";
}

void State::stepTypeEvent(const InsnTypeEvent& insn)
{
    std::cerr << "stepTypeEvent() not implemented\n";
}

void State::stepTypeDeviceEvent(const InsnTypeDeviceEvent& insn)
{
    std::cerr << "stepTypeDeviceEvent() not implemented\n";
}

void State::stepTypeReserveId(const InsnTypeReserveId& insn)
{
    std::cerr << "stepTypeReserveId() not implemented\n";
}

void State::stepTypeQueue(const InsnTypeQueue& insn)
{
    std::cerr << "stepTypeQueue() not implemented\n";
}

void State::stepTypePipe(const InsnTypePipe& insn)
{
    std::cerr << "stepTypePipe() not implemented\n";
}

void State::stepTypeForwardPointer(const InsnTypeForwardPointer& insn)
{
    std::cerr << "stepTypeForwardPointer() not implemented\n";
}

void State::stepConstantTrue(const InsnConstantTrue& insn)
{
    std::cerr << "stepConstantTrue() not implemented\n";
}

void State::stepConstantFalse(const InsnConstantFalse& insn)
{
    std::cerr << "stepConstantFalse() not implemented\n";
}

void State::stepConstant(const InsnConstant& insn)
{
    std::cerr << "stepConstant() not implemented\n";
}

void State::stepConstantComposite(const InsnConstantComposite& insn)
{
    std::cerr << "stepConstantComposite() not implemented\n";
}

void State::stepConstantSampler(const InsnConstantSampler& insn)
{
    std::cerr << "stepConstantSampler() not implemented\n";
}

void State::stepConstantNull(const InsnConstantNull& insn)
{
    std::cerr << "stepConstantNull() not implemented\n";
}

void State::stepSpecConstantTrue(const InsnSpecConstantTrue& insn)
{
    std::cerr << "stepSpecConstantTrue() not implemented\n";
}

void State::stepSpecConstantFalse(const InsnSpecConstantFalse& insn)
{
    std::cerr << "stepSpecConstantFalse() not implemented\n";
}

void State::stepSpecConstant(const InsnSpecConstant& insn)
{
    std::cerr << "stepSpecConstant() not implemented\n";
}

void State::stepSpecConstantComposite(const InsnSpecConstantComposite& insn)
{
    std::cerr << "stepSpecConstantComposite() not implemented\n";
}

void State::stepSpecConstantOp(const InsnSpecConstantOp& insn)
{
    std::cerr << "stepSpecConstantOp() not implemented\n";
}

void State::stepFunction(const InsnFunction& insn)
{
    std::cerr << "stepFunction() not implemented\n";
}

void State::stepFunctionEnd(const InsnFunctionEnd& insn)
{
    std::cerr << "stepFunctionEnd() not implemented\n";
}

void State::stepVariable(const InsnVariable& insn)
{
    std::cerr << "stepVariable() not implemented\n";
}

void State::stepImageTexelPointer(const InsnImageTexelPointer& insn)
{
    std::cerr << "stepImageTexelPointer() not implemented\n";
}

void State::stepCopyMemory(const InsnCopyMemory& insn)
{
    std::cerr << "stepCopyMemory() not implemented\n";
}

void State::stepCopyMemorySized(const InsnCopyMemorySized& insn)
{
    std::cerr << "stepCopyMemorySized() not implemented\n";
}

void State::stepInBoundsAccessChain(const InsnInBoundsAccessChain& insn)
{
    std::cerr << "stepInBoundsAccessChain() not implemented\n";
}

void State::stepPtrAccessChain(const InsnPtrAccessChain& insn)
{
    std::cerr << "stepPtrAccessChain() not implemented\n";
}

void State::stepArrayLength(const InsnArrayLength& insn)
{
    std::cerr << "stepArrayLength() not implemented\n";
}

void State::stepGenericPtrMemSemantics(const InsnGenericPtrMemSemantics& insn)
{
    std::cerr << "stepGenericPtrMemSemantics() not implemented\n";
}

void State::stepInBoundsPtrAccessChain(const InsnInBoundsPtrAccessChain& insn)
{
    std::cerr << "stepInBoundsPtrAccessChain() not implemented\n";
}

void State::stepDecorate(const InsnDecorate& insn)
{
    std::cerr << "stepDecorate() not implemented\n";
}

void State::stepMemberDecorate(const InsnMemberDecorate& insn)
{
    std::cerr << "stepMemberDecorate() not implemented\n";
}

void State::stepDecorationGroup(const InsnDecorationGroup& insn)
{
    std::cerr << "stepDecorationGroup() not implemented\n";
}

void State::stepGroupDecorate(const InsnGroupDecorate& insn)
{
    std::cerr << "stepGroupDecorate() not implemented\n";
}

void State::stepGroupMemberDecorate(const InsnGroupMemberDecorate& insn)
{
    std::cerr << "stepGroupMemberDecorate() not implemented\n";
}

void State::stepVectorExtractDynamic(const InsnVectorExtractDynamic& insn)
{
    std::cerr << "stepVectorExtractDynamic() not implemented\n";
}

void State::stepVectorInsertDynamic(const InsnVectorInsertDynamic& insn)
{
    std::cerr << "stepVectorInsertDynamic() not implemented\n";
}

void State::stepCompositeInsert(const InsnCompositeInsert& insn)
{
    std::cerr << "stepCompositeInsert() not implemented\n";
}

void State::stepCopyObject(const InsnCopyObject& insn)
{
    std::cerr << "stepCopyObject() not implemented\n";
}

void State::stepTranspose(const InsnTranspose& insn)
{
    std::cerr << "stepTranspose() not implemented\n";
}

void State::stepSampledImage(const InsnSampledImage& insn)
{
    std::cerr << "stepSampledImage() not implemented\n";
}

void State::stepImageSampleImplicitLod(const InsnImageSampleImplicitLod& insn)
{
    std::cerr << "stepImageSampleImplicitLod() not implemented\n";
}

void State::stepImageSampleExplicitLod(const InsnImageSampleExplicitLod& insn)
{
    std::cerr << "stepImageSampleExplicitLod() not implemented\n";
}

void State::stepImageSampleDrefImplicitLod(const InsnImageSampleDrefImplicitLod& insn)
{
    std::cerr << "stepImageSampleDrefImplicitLod() not implemented\n";
}

void State::stepImageSampleDrefExplicitLod(const InsnImageSampleDrefExplicitLod& insn)
{
    std::cerr << "stepImageSampleDrefExplicitLod() not implemented\n";
}

void State::stepImageSampleProjImplicitLod(const InsnImageSampleProjImplicitLod& insn)
{
    std::cerr << "stepImageSampleProjImplicitLod() not implemented\n";
}

void State::stepImageSampleProjExplicitLod(const InsnImageSampleProjExplicitLod& insn)
{
    std::cerr << "stepImageSampleProjExplicitLod() not implemented\n";
}

void State::stepImageSampleProjDrefImplicitLod(const InsnImageSampleProjDrefImplicitLod& insn)
{
    std::cerr << "stepImageSampleProjDrefImplicitLod() not implemented\n";
}

void State::stepImageSampleProjDrefExplicitLod(const InsnImageSampleProjDrefExplicitLod& insn)
{
    std::cerr << "stepImageSampleProjDrefExplicitLod() not implemented\n";
}

void State::stepImageFetch(const InsnImageFetch& insn)
{
    std::cerr << "stepImageFetch() not implemented\n";
}

void State::stepImageGather(const InsnImageGather& insn)
{
    std::cerr << "stepImageGather() not implemented\n";
}

void State::stepImageDrefGather(const InsnImageDrefGather& insn)
{
    std::cerr << "stepImageDrefGather() not implemented\n";
}

void State::stepImageRead(const InsnImageRead& insn)
{
    std::cerr << "stepImageRead() not implemented\n";
}

void State::stepImageWrite(const InsnImageWrite& insn)
{
    std::cerr << "stepImageWrite() not implemented\n";
}

void State::stepImage(const InsnImage& insn)
{
    std::cerr << "stepImage() not implemented\n";
}

void State::stepImageQueryFormat(const InsnImageQueryFormat& insn)
{
    std::cerr << "stepImageQueryFormat() not implemented\n";
}

void State::stepImageQueryOrder(const InsnImageQueryOrder& insn)
{
    std::cerr << "stepImageQueryOrder() not implemented\n";
}

void State::stepImageQuerySizeLod(const InsnImageQuerySizeLod& insn)
{
    std::cerr << "stepImageQuerySizeLod() not implemented\n";
}

void State::stepImageQuerySize(const InsnImageQuerySize& insn)
{
    std::cerr << "stepImageQuerySize() not implemented\n";
}

void State::stepImageQueryLod(const InsnImageQueryLod& insn)
{
    std::cerr << "stepImageQueryLod() not implemented\n";
}

void State::stepImageQueryLevels(const InsnImageQueryLevels& insn)
{
    std::cerr << "stepImageQueryLevels() not implemented\n";
}

void State::stepImageQuerySamples(const InsnImageQuerySamples& insn)
{
    std::cerr << "stepImageQuerySamples() not implemented\n";
}

void State::stepConvertFToU(const InsnConvertFToU& insn)
{
    std::cerr << "stepConvertFToU() not implemented\n";
}

void State::stepConvertUToF(const InsnConvertUToF& insn)
{
    std::cerr << "stepConvertUToF() not implemented\n";
}

void State::stepUConvert(const InsnUConvert& insn)
{
    std::cerr << "stepUConvert() not implemented\n";
}

void State::stepSConvert(const InsnSConvert& insn)
{
    std::cerr << "stepSConvert() not implemented\n";
}

void State::stepFConvert(const InsnFConvert& insn)
{
    std::cerr << "stepFConvert() not implemented\n";
}

void State::stepQuantizeToF16(const InsnQuantizeToF16& insn)
{
    std::cerr << "stepQuantizeToF16() not implemented\n";
}

void State::stepConvertPtrToU(const InsnConvertPtrToU& insn)
{
    std::cerr << "stepConvertPtrToU() not implemented\n";
}

void State::stepSatConvertSToU(const InsnSatConvertSToU& insn)
{
    std::cerr << "stepSatConvertSToU() not implemented\n";
}

void State::stepSatConvertUToS(const InsnSatConvertUToS& insn)
{
    std::cerr << "stepSatConvertUToS() not implemented\n";
}

void State::stepConvertUToPtr(const InsnConvertUToPtr& insn)
{
    std::cerr << "stepConvertUToPtr() not implemented\n";
}

void State::stepPtrCastToGeneric(const InsnPtrCastToGeneric& insn)
{
    std::cerr << "stepPtrCastToGeneric() not implemented\n";
}

void State::stepGenericCastToPtr(const InsnGenericCastToPtr& insn)
{
    std::cerr << "stepGenericCastToPtr() not implemented\n";
}

void State::stepGenericCastToPtrExplicit(const InsnGenericCastToPtrExplicit& insn)
{
    std::cerr << "stepGenericCastToPtrExplicit() not implemented\n";
}

void State::stepBitcast(const InsnBitcast& insn)
{
    std::cerr << "stepBitcast() not implemented\n";
}

void State::stepSNegate(const InsnSNegate& insn)
{
    std::cerr << "stepSNegate() not implemented\n";
}

void State::stepISub(const InsnISub& insn)
{
    std::cerr << "stepISub() not implemented\n";
}

void State::stepIMul(const InsnIMul& insn)
{
    std::cerr << "stepIMul() not implemented\n";
}

void State::stepUDiv(const InsnUDiv& insn)
{
    std::cerr << "stepUDiv() not implemented\n";
}

void State::stepSDiv(const InsnSDiv& insn)
{
    std::cerr << "stepSDiv() not implemented\n";
}

void State::stepUMod(const InsnUMod& insn)
{
    std::cerr << "stepUMod() not implemented\n";
}

void State::stepSRem(const InsnSRem& insn)
{
    std::cerr << "stepSRem() not implemented\n";
}

void State::stepSMod(const InsnSMod& insn)
{
    std::cerr << "stepSMod() not implemented\n";
}

void State::stepFRem(const InsnFRem& insn)
{
    std::cerr << "stepFRem() not implemented\n";
}

void State::stepMatrixTimesScalar(const InsnMatrixTimesScalar& insn)
{
    std::cerr << "stepMatrixTimesScalar() not implemented\n";
}

void State::stepVectorTimesMatrix(const InsnVectorTimesMatrix& insn)
{
    std::cerr << "stepVectorTimesMatrix() not implemented\n";
}

void State::stepMatrixTimesVector(const InsnMatrixTimesVector& insn)
{
    std::cerr << "stepMatrixTimesVector() not implemented\n";
}

void State::stepMatrixTimesMatrix(const InsnMatrixTimesMatrix& insn)
{
    std::cerr << "stepMatrixTimesMatrix() not implemented\n";
}

void State::stepOuterProduct(const InsnOuterProduct& insn)
{
    std::cerr << "stepOuterProduct() not implemented\n";
}

void State::stepIAddCarry(const InsnIAddCarry& insn)
{
    std::cerr << "stepIAddCarry() not implemented\n";
}

void State::stepISubBorrow(const InsnISubBorrow& insn)
{
    std::cerr << "stepISubBorrow() not implemented\n";
}

void State::stepUMulExtended(const InsnUMulExtended& insn)
{
    std::cerr << "stepUMulExtended() not implemented\n";
}

void State::stepSMulExtended(const InsnSMulExtended& insn)
{
    std::cerr << "stepSMulExtended() not implemented\n";
}

void State::stepAny(const InsnAny& insn)
{
    std::cerr << "stepAny() not implemented\n";
}

void State::stepAll(const InsnAll& insn)
{
    std::cerr << "stepAll() not implemented\n";
}

void State::stepIsNan(const InsnIsNan& insn)
{
    std::cerr << "stepIsNan() not implemented\n";
}

void State::stepIsInf(const InsnIsInf& insn)
{
    std::cerr << "stepIsInf() not implemented\n";
}

void State::stepIsFinite(const InsnIsFinite& insn)
{
    std::cerr << "stepIsFinite() not implemented\n";
}

void State::stepIsNormal(const InsnIsNormal& insn)
{
    std::cerr << "stepIsNormal() not implemented\n";
}

void State::stepSignBitSet(const InsnSignBitSet& insn)
{
    std::cerr << "stepSignBitSet() not implemented\n";
}

void State::stepLessOrGreater(const InsnLessOrGreater& insn)
{
    std::cerr << "stepLessOrGreater() not implemented\n";
}

void State::stepOrdered(const InsnOrdered& insn)
{
    std::cerr << "stepOrdered() not implemented\n";
}

void State::stepUnordered(const InsnUnordered& insn)
{
    std::cerr << "stepUnordered() not implemented\n";
}

void State::stepLogicalEqual(const InsnLogicalEqual& insn)
{
    std::cerr << "stepLogicalEqual() not implemented\n";
}

void State::stepLogicalNotEqual(const InsnLogicalNotEqual& insn)
{
    std::cerr << "stepLogicalNotEqual() not implemented\n";
}

void State::stepLogicalOr(const InsnLogicalOr& insn)
{
    std::cerr << "stepLogicalOr() not implemented\n";
}

void State::stepLogicalAnd(const InsnLogicalAnd& insn)
{
    std::cerr << "stepLogicalAnd() not implemented\n";
}

void State::stepINotEqual(const InsnINotEqual& insn)
{
    std::cerr << "stepINotEqual() not implemented\n";
}

void State::stepUGreaterThan(const InsnUGreaterThan& insn)
{
    std::cerr << "stepUGreaterThan() not implemented\n";
}

void State::stepSGreaterThan(const InsnSGreaterThan& insn)
{
    std::cerr << "stepSGreaterThan() not implemented\n";
}

void State::stepUGreaterThanEqual(const InsnUGreaterThanEqual& insn)
{
    std::cerr << "stepUGreaterThanEqual() not implemented\n";
}

void State::stepSGreaterThanEqual(const InsnSGreaterThanEqual& insn)
{
    std::cerr << "stepSGreaterThanEqual() not implemented\n";
}

void State::stepULessThan(const InsnULessThan& insn)
{
    std::cerr << "stepULessThan() not implemented\n";
}

void State::stepULessThanEqual(const InsnULessThanEqual& insn)
{
    std::cerr << "stepULessThanEqual() not implemented\n";
}

void State::stepSLessThanEqual(const InsnSLessThanEqual& insn)
{
    std::cerr << "stepSLessThanEqual() not implemented\n";
}

void State::stepFUnordEqual(const InsnFUnordEqual& insn)
{
    std::cerr << "stepFUnordEqual() not implemented\n";
}

void State::stepFOrdNotEqual(const InsnFOrdNotEqual& insn)
{
    std::cerr << "stepFOrdNotEqual() not implemented\n";
}

void State::stepFUnordNotEqual(const InsnFUnordNotEqual& insn)
{
    std::cerr << "stepFUnordNotEqual() not implemented\n";
}

void State::stepFUnordLessThan(const InsnFUnordLessThan& insn)
{
    std::cerr << "stepFUnordLessThan() not implemented\n";
}

void State::stepFUnordGreaterThan(const InsnFUnordGreaterThan& insn)
{
    std::cerr << "stepFUnordGreaterThan() not implemented\n";
}

void State::stepFUnordLessThanEqual(const InsnFUnordLessThanEqual& insn)
{
    std::cerr << "stepFUnordLessThanEqual() not implemented\n";
}

void State::stepFUnordGreaterThanEqual(const InsnFUnordGreaterThanEqual& insn)
{
    std::cerr << "stepFUnordGreaterThanEqual() not implemented\n";
}

void State::stepShiftRightLogical(const InsnShiftRightLogical& insn)
{
    std::cerr << "stepShiftRightLogical() not implemented\n";
}

void State::stepShiftRightArithmetic(const InsnShiftRightArithmetic& insn)
{
    std::cerr << "stepShiftRightArithmetic() not implemented\n";
}

void State::stepShiftLeftLogical(const InsnShiftLeftLogical& insn)
{
    std::cerr << "stepShiftLeftLogical() not implemented\n";
}

void State::stepBitwiseOr(const InsnBitwiseOr& insn)
{
    std::cerr << "stepBitwiseOr() not implemented\n";
}

void State::stepBitwiseXor(const InsnBitwiseXor& insn)
{
    std::cerr << "stepBitwiseXor() not implemented\n";
}

void State::stepBitwiseAnd(const InsnBitwiseAnd& insn)
{
    std::cerr << "stepBitwiseAnd() not implemented\n";
}

void State::stepNot(const InsnNot& insn)
{
    std::cerr << "stepNot() not implemented\n";
}

void State::stepBitFieldInsert(const InsnBitFieldInsert& insn)
{
    std::cerr << "stepBitFieldInsert() not implemented\n";
}

void State::stepBitFieldSExtract(const InsnBitFieldSExtract& insn)
{
    std::cerr << "stepBitFieldSExtract() not implemented\n";
}

void State::stepBitFieldUExtract(const InsnBitFieldUExtract& insn)
{
    std::cerr << "stepBitFieldUExtract() not implemented\n";
}

void State::stepBitReverse(const InsnBitReverse& insn)
{
    std::cerr << "stepBitReverse() not implemented\n";
}

void State::stepBitCount(const InsnBitCount& insn)
{
    std::cerr << "stepBitCount() not implemented\n";
}

void State::stepDPdx(const InsnDPdx& insn)
{
    std::cerr << "stepDPdx() not implemented\n";
}

void State::stepDPdy(const InsnDPdy& insn)
{
    std::cerr << "stepDPdy() not implemented\n";
}

void State::stepFwidth(const InsnFwidth& insn)
{
    std::cerr << "stepFwidth() not implemented\n";
}

void State::stepDPdxFine(const InsnDPdxFine& insn)
{
    std::cerr << "stepDPdxFine() not implemented\n";
}

void State::stepDPdyFine(const InsnDPdyFine& insn)
{
    std::cerr << "stepDPdyFine() not implemented\n";
}

void State::stepFwidthFine(const InsnFwidthFine& insn)
{
    std::cerr << "stepFwidthFine() not implemented\n";
}

void State::stepDPdxCoarse(const InsnDPdxCoarse& insn)
{
    std::cerr << "stepDPdxCoarse() not implemented\n";
}

void State::stepDPdyCoarse(const InsnDPdyCoarse& insn)
{
    std::cerr << "stepDPdyCoarse() not implemented\n";
}

void State::stepFwidthCoarse(const InsnFwidthCoarse& insn)
{
    std::cerr << "stepFwidthCoarse() not implemented\n";
}

void State::stepEmitVertex(const InsnEmitVertex& insn)
{
    std::cerr << "stepEmitVertex() not implemented\n";
}

void State::stepEndPrimitive(const InsnEndPrimitive& insn)
{
    std::cerr << "stepEndPrimitive() not implemented\n";
}

void State::stepEmitStreamVertex(const InsnEmitStreamVertex& insn)
{
    std::cerr << "stepEmitStreamVertex() not implemented\n";
}

void State::stepEndStreamPrimitive(const InsnEndStreamPrimitive& insn)
{
    std::cerr << "stepEndStreamPrimitive() not implemented\n";
}

void State::stepControlBarrier(const InsnControlBarrier& insn)
{
    std::cerr << "stepControlBarrier() not implemented\n";
}

void State::stepMemoryBarrier(const InsnMemoryBarrier& insn)
{
    std::cerr << "stepMemoryBarrier() not implemented\n";
}

void State::stepAtomicLoad(const InsnAtomicLoad& insn)
{
    std::cerr << "stepAtomicLoad() not implemented\n";
}

void State::stepAtomicStore(const InsnAtomicStore& insn)
{
    std::cerr << "stepAtomicStore() not implemented\n";
}

void State::stepAtomicExchange(const InsnAtomicExchange& insn)
{
    std::cerr << "stepAtomicExchange() not implemented\n";
}

void State::stepAtomicCompareExchange(const InsnAtomicCompareExchange& insn)
{
    std::cerr << "stepAtomicCompareExchange() not implemented\n";
}

void State::stepAtomicCompareExchangeWeak(const InsnAtomicCompareExchangeWeak& insn)
{
    std::cerr << "stepAtomicCompareExchangeWeak() not implemented\n";
}

void State::stepAtomicIIncrement(const InsnAtomicIIncrement& insn)
{
    std::cerr << "stepAtomicIIncrement() not implemented\n";
}

void State::stepAtomicIDecrement(const InsnAtomicIDecrement& insn)
{
    std::cerr << "stepAtomicIDecrement() not implemented\n";
}

void State::stepAtomicIAdd(const InsnAtomicIAdd& insn)
{
    std::cerr << "stepAtomicIAdd() not implemented\n";
}

void State::stepAtomicISub(const InsnAtomicISub& insn)
{
    std::cerr << "stepAtomicISub() not implemented\n";
}

void State::stepAtomicSMin(const InsnAtomicSMin& insn)
{
    std::cerr << "stepAtomicSMin() not implemented\n";
}

void State::stepAtomicUMin(const InsnAtomicUMin& insn)
{
    std::cerr << "stepAtomicUMin() not implemented\n";
}

void State::stepAtomicSMax(const InsnAtomicSMax& insn)
{
    std::cerr << "stepAtomicSMax() not implemented\n";
}

void State::stepAtomicUMax(const InsnAtomicUMax& insn)
{
    std::cerr << "stepAtomicUMax() not implemented\n";
}

void State::stepAtomicAnd(const InsnAtomicAnd& insn)
{
    std::cerr << "stepAtomicAnd() not implemented\n";
}

void State::stepAtomicOr(const InsnAtomicOr& insn)
{
    std::cerr << "stepAtomicOr() not implemented\n";
}

void State::stepAtomicXor(const InsnAtomicXor& insn)
{
    std::cerr << "stepAtomicXor() not implemented\n";
}

void State::stepLoopMerge(const InsnLoopMerge& insn)
{
    std::cerr << "stepLoopMerge() not implemented\n";
}

void State::stepSelectionMerge(const InsnSelectionMerge& insn)
{
    std::cerr << "stepSelectionMerge() not implemented\n";
}

void State::stepLabel(const InsnLabel& insn)
{
    std::cerr << "stepLabel() not implemented\n";
}

void State::stepSwitch(const InsnSwitch& insn)
{
    std::cerr << "stepSwitch() not implemented\n";
}

void State::stepKill(const InsnKill& insn)
{
    std::cerr << "stepKill() not implemented\n";
}

void State::stepUnreachable(const InsnUnreachable& insn)
{
    std::cerr << "stepUnreachable() not implemented\n";
}

void State::stepLifetimeStart(const InsnLifetimeStart& insn)
{
    std::cerr << "stepLifetimeStart() not implemented\n";
}

void State::stepLifetimeStop(const InsnLifetimeStop& insn)
{
    std::cerr << "stepLifetimeStop() not implemented\n";
}

void State::stepGroupAsyncCopy(const InsnGroupAsyncCopy& insn)
{
    std::cerr << "stepGroupAsyncCopy() not implemented\n";
}

void State::stepGroupWaitEvents(const InsnGroupWaitEvents& insn)
{
    std::cerr << "stepGroupWaitEvents() not implemented\n";
}

void State::stepGroupAll(const InsnGroupAll& insn)
{
    std::cerr << "stepGroupAll() not implemented\n";
}

void State::stepGroupAny(const InsnGroupAny& insn)
{
    std::cerr << "stepGroupAny() not implemented\n";
}

void State::stepGroupBroadcast(const InsnGroupBroadcast& insn)
{
    std::cerr << "stepGroupBroadcast() not implemented\n";
}

void State::stepGroupIAdd(const InsnGroupIAdd& insn)
{
    std::cerr << "stepGroupIAdd() not implemented\n";
}

void State::stepGroupFAdd(const InsnGroupFAdd& insn)
{
    std::cerr << "stepGroupFAdd() not implemented\n";
}

void State::stepGroupFMin(const InsnGroupFMin& insn)
{
    std::cerr << "stepGroupFMin() not implemented\n";
}

void State::stepGroupUMin(const InsnGroupUMin& insn)
{
    std::cerr << "stepGroupUMin() not implemented\n";
}

void State::stepGroupSMin(const InsnGroupSMin& insn)
{
    std::cerr << "stepGroupSMin() not implemented\n";
}

void State::stepGroupFMax(const InsnGroupFMax& insn)
{
    std::cerr << "stepGroupFMax() not implemented\n";
}

void State::stepGroupUMax(const InsnGroupUMax& insn)
{
    std::cerr << "stepGroupUMax() not implemented\n";
}

void State::stepGroupSMax(const InsnGroupSMax& insn)
{
    std::cerr << "stepGroupSMax() not implemented\n";
}

void State::stepReadPipe(const InsnReadPipe& insn)
{
    std::cerr << "stepReadPipe() not implemented\n";
}

void State::stepWritePipe(const InsnWritePipe& insn)
{
    std::cerr << "stepWritePipe() not implemented\n";
}

void State::stepReservedReadPipe(const InsnReservedReadPipe& insn)
{
    std::cerr << "stepReservedReadPipe() not implemented\n";
}

void State::stepReservedWritePipe(const InsnReservedWritePipe& insn)
{
    std::cerr << "stepReservedWritePipe() not implemented\n";
}

void State::stepReserveReadPipePackets(const InsnReserveReadPipePackets& insn)
{
    std::cerr << "stepReserveReadPipePackets() not implemented\n";
}

void State::stepReserveWritePipePackets(const InsnReserveWritePipePackets& insn)
{
    std::cerr << "stepReserveWritePipePackets() not implemented\n";
}

void State::stepCommitReadPipe(const InsnCommitReadPipe& insn)
{
    std::cerr << "stepCommitReadPipe() not implemented\n";
}

void State::stepCommitWritePipe(const InsnCommitWritePipe& insn)
{
    std::cerr << "stepCommitWritePipe() not implemented\n";
}

void State::stepIsValidReserveId(const InsnIsValidReserveId& insn)
{
    std::cerr << "stepIsValidReserveId() not implemented\n";
}

void State::stepGetNumPipePackets(const InsnGetNumPipePackets& insn)
{
    std::cerr << "stepGetNumPipePackets() not implemented\n";
}

void State::stepGetMaxPipePackets(const InsnGetMaxPipePackets& insn)
{
    std::cerr << "stepGetMaxPipePackets() not implemented\n";
}

void State::stepGroupReserveReadPipePackets(const InsnGroupReserveReadPipePackets& insn)
{
    std::cerr << "stepGroupReserveReadPipePackets() not implemented\n";
}

void State::stepGroupReserveWritePipePackets(const InsnGroupReserveWritePipePackets& insn)
{
    std::cerr << "stepGroupReserveWritePipePackets() not implemented\n";
}

void State::stepGroupCommitReadPipe(const InsnGroupCommitReadPipe& insn)
{
    std::cerr << "stepGroupCommitReadPipe() not implemented\n";
}

void State::stepGroupCommitWritePipe(const InsnGroupCommitWritePipe& insn)
{
    std::cerr << "stepGroupCommitWritePipe() not implemented\n";
}

void State::stepEnqueueMarker(const InsnEnqueueMarker& insn)
{
    std::cerr << "stepEnqueueMarker() not implemented\n";
}

void State::stepEnqueueKernel(const InsnEnqueueKernel& insn)
{
    std::cerr << "stepEnqueueKernel() not implemented\n";
}

void State::stepGetKernelNDrangeSubGroupCount(const InsnGetKernelNDrangeSubGroupCount& insn)
{
    std::cerr << "stepGetKernelNDrangeSubGroupCount() not implemented\n";
}

void State::stepGetKernelNDrangeMaxSubGroupSize(const InsnGetKernelNDrangeMaxSubGroupSize& insn)
{
    std::cerr << "stepGetKernelNDrangeMaxSubGroupSize() not implemented\n";
}

void State::stepGetKernelWorkGroupSize(const InsnGetKernelWorkGroupSize& insn)
{
    std::cerr << "stepGetKernelWorkGroupSize() not implemented\n";
}

void State::stepGetKernelPreferredWorkGroupSizeMultiple(const InsnGetKernelPreferredWorkGroupSizeMultiple& insn)
{
    std::cerr << "stepGetKernelPreferredWorkGroupSizeMultiple() not implemented\n";
}

void State::stepRetainEvent(const InsnRetainEvent& insn)
{
    std::cerr << "stepRetainEvent() not implemented\n";
}

void State::stepReleaseEvent(const InsnReleaseEvent& insn)
{
    std::cerr << "stepReleaseEvent() not implemented\n";
}

void State::stepCreateUserEvent(const InsnCreateUserEvent& insn)
{
    std::cerr << "stepCreateUserEvent() not implemented\n";
}

void State::stepIsValidEvent(const InsnIsValidEvent& insn)
{
    std::cerr << "stepIsValidEvent() not implemented\n";
}

void State::stepSetUserEventStatus(const InsnSetUserEventStatus& insn)
{
    std::cerr << "stepSetUserEventStatus() not implemented\n";
}

void State::stepCaptureEventProfilingInfo(const InsnCaptureEventProfilingInfo& insn)
{
    std::cerr << "stepCaptureEventProfilingInfo() not implemented\n";
}

void State::stepGetDefaultQueue(const InsnGetDefaultQueue& insn)
{
    std::cerr << "stepGetDefaultQueue() not implemented\n";
}

void State::stepBuildNDRange(const InsnBuildNDRange& insn)
{
    std::cerr << "stepBuildNDRange() not implemented\n";
}

void State::stepImageSparseSampleImplicitLod(const InsnImageSparseSampleImplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleImplicitLod() not implemented\n";
}

void State::stepImageSparseSampleExplicitLod(const InsnImageSparseSampleExplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleExplicitLod() not implemented\n";
}

void State::stepImageSparseSampleDrefImplicitLod(const InsnImageSparseSampleDrefImplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleDrefImplicitLod() not implemented\n";
}

void State::stepImageSparseSampleDrefExplicitLod(const InsnImageSparseSampleDrefExplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleDrefExplicitLod() not implemented\n";
}

void State::stepImageSparseSampleProjImplicitLod(const InsnImageSparseSampleProjImplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleProjImplicitLod() not implemented\n";
}

void State::stepImageSparseSampleProjExplicitLod(const InsnImageSparseSampleProjExplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleProjExplicitLod() not implemented\n";
}

void State::stepImageSparseSampleProjDrefImplicitLod(const InsnImageSparseSampleProjDrefImplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleProjDrefImplicitLod() not implemented\n";
}

void State::stepImageSparseSampleProjDrefExplicitLod(const InsnImageSparseSampleProjDrefExplicitLod& insn)
{
    std::cerr << "stepImageSparseSampleProjDrefExplicitLod() not implemented\n";
}

void State::stepImageSparseFetch(const InsnImageSparseFetch& insn)
{
    std::cerr << "stepImageSparseFetch() not implemented\n";
}

void State::stepImageSparseGather(const InsnImageSparseGather& insn)
{
    std::cerr << "stepImageSparseGather() not implemented\n";
}

void State::stepImageSparseDrefGather(const InsnImageSparseDrefGather& insn)
{
    std::cerr << "stepImageSparseDrefGather() not implemented\n";
}

void State::stepImageSparseTexelsResident(const InsnImageSparseTexelsResident& insn)
{
    std::cerr << "stepImageSparseTexelsResident() not implemented\n";
}

void State::stepNoLine(const InsnNoLine& insn)
{
    std::cerr << "stepNoLine() not implemented\n";
}

void State::stepAtomicFlagTestAndSet(const InsnAtomicFlagTestAndSet& insn)
{
    std::cerr << "stepAtomicFlagTestAndSet() not implemented\n";
}

void State::stepAtomicFlagClear(const InsnAtomicFlagClear& insn)
{
    std::cerr << "stepAtomicFlagClear() not implemented\n";
}

void State::stepImageSparseRead(const InsnImageSparseRead& insn)
{
    std::cerr << "stepImageSparseRead() not implemented\n";
}

void State::stepSizeOf(const InsnSizeOf& insn)
{
    std::cerr << "stepSizeOf() not implemented\n";
}

void State::stepTypePipeStorage(const InsnTypePipeStorage& insn)
{
    std::cerr << "stepTypePipeStorage() not implemented\n";
}

void State::stepConstantPipeStorage(const InsnConstantPipeStorage& insn)
{
    std::cerr << "stepConstantPipeStorage() not implemented\n";
}

void State::stepCreatePipeFromPipeStorage(const InsnCreatePipeFromPipeStorage& insn)
{
    std::cerr << "stepCreatePipeFromPipeStorage() not implemented\n";
}

void State::stepGetKernelLocalSizeForSubgroupCount(const InsnGetKernelLocalSizeForSubgroupCount& insn)
{
    std::cerr << "stepGetKernelLocalSizeForSubgroupCount() not implemented\n";
}

void State::stepGetKernelMaxNumSubgroups(const InsnGetKernelMaxNumSubgroups& insn)
{
    std::cerr << "stepGetKernelMaxNumSubgroups() not implemented\n";
}

void State::stepTypeNamedBarrier(const InsnTypeNamedBarrier& insn)
{
    std::cerr << "stepTypeNamedBarrier() not implemented\n";
}

void State::stepNamedBarrierInitialize(const InsnNamedBarrierInitialize& insn)
{
    std::cerr << "stepNamedBarrierInitialize() not implemented\n";
}

void State::stepMemoryNamedBarrier(const InsnMemoryNamedBarrier& insn)
{
    std::cerr << "stepMemoryNamedBarrier() not implemented\n";
}

void State::stepModuleProcessed(const InsnModuleProcessed& insn)
{
    std::cerr << "stepModuleProcessed() not implemented\n";
}

void State::stepExecutionModeId(const InsnExecutionModeId& insn)
{
    std::cerr << "stepExecutionModeId() not implemented\n";
}

void State::stepDecorateId(const InsnDecorateId& insn)
{
    std::cerr << "stepDecorateId() not implemented\n";
}

void State::stepSubgroupBallotKHR(const InsnSubgroupBallotKHR& insn)
{
    std::cerr << "stepSubgroupBallotKHR() not implemented\n";
}

void State::stepSubgroupFirstInvocationKHR(const InsnSubgroupFirstInvocationKHR& insn)
{
    std::cerr << "stepSubgroupFirstInvocationKHR() not implemented\n";
}

void State::stepSubgroupAllKHR(const InsnSubgroupAllKHR& insn)
{
    std::cerr << "stepSubgroupAllKHR() not implemented\n";
}

void State::stepSubgroupAnyKHR(const InsnSubgroupAnyKHR& insn)
{
    std::cerr << "stepSubgroupAnyKHR() not implemented\n";
}

void State::stepSubgroupAllEqualKHR(const InsnSubgroupAllEqualKHR& insn)
{
    std::cerr << "stepSubgroupAllEqualKHR() not implemented\n";
}

void State::stepSubgroupReadInvocationKHR(const InsnSubgroupReadInvocationKHR& insn)
{
    std::cerr << "stepSubgroupReadInvocationKHR() not implemented\n";
}

void State::stepGroupIAddNonUniformAMD(const InsnGroupIAddNonUniformAMD& insn)
{
    std::cerr << "stepGroupIAddNonUniformAMD() not implemented\n";
}

void State::stepGroupFAddNonUniformAMD(const InsnGroupFAddNonUniformAMD& insn)
{
    std::cerr << "stepGroupFAddNonUniformAMD() not implemented\n";
}

void State::stepGroupFMinNonUniformAMD(const InsnGroupFMinNonUniformAMD& insn)
{
    std::cerr << "stepGroupFMinNonUniformAMD() not implemented\n";
}

void State::stepGroupUMinNonUniformAMD(const InsnGroupUMinNonUniformAMD& insn)
{
    std::cerr << "stepGroupUMinNonUniformAMD() not implemented\n";
}

void State::stepGroupSMinNonUniformAMD(const InsnGroupSMinNonUniformAMD& insn)
{
    std::cerr << "stepGroupSMinNonUniformAMD() not implemented\n";
}

void State::stepGroupFMaxNonUniformAMD(const InsnGroupFMaxNonUniformAMD& insn)
{
    std::cerr << "stepGroupFMaxNonUniformAMD() not implemented\n";
}

void State::stepGroupUMaxNonUniformAMD(const InsnGroupUMaxNonUniformAMD& insn)
{
    std::cerr << "stepGroupUMaxNonUniformAMD() not implemented\n";
}

void State::stepGroupSMaxNonUniformAMD(const InsnGroupSMaxNonUniformAMD& insn)
{
    std::cerr << "stepGroupSMaxNonUniformAMD() not implemented\n";
}

void State::stepFragmentMaskFetchAMD(const InsnFragmentMaskFetchAMD& insn)
{
    std::cerr << "stepFragmentMaskFetchAMD() not implemented\n";
}

void State::stepFragmentFetchAMD(const InsnFragmentFetchAMD& insn)
{
    std::cerr << "stepFragmentFetchAMD() not implemented\n";
}

void State::stepSubgroupShuffleINTEL(const InsnSubgroupShuffleINTEL& insn)
{
    std::cerr << "stepSubgroupShuffleINTEL() not implemented\n";
}

void State::stepSubgroupShuffleDownINTEL(const InsnSubgroupShuffleDownINTEL& insn)
{
    std::cerr << "stepSubgroupShuffleDownINTEL() not implemented\n";
}

void State::stepSubgroupShuffleUpINTEL(const InsnSubgroupShuffleUpINTEL& insn)
{
    std::cerr << "stepSubgroupShuffleUpINTEL() not implemented\n";
}

void State::stepSubgroupShuffleXorINTEL(const InsnSubgroupShuffleXorINTEL& insn)
{
    std::cerr << "stepSubgroupShuffleXorINTEL() not implemented\n";
}

void State::stepSubgroupBlockReadINTEL(const InsnSubgroupBlockReadINTEL& insn)
{
    std::cerr << "stepSubgroupBlockReadINTEL() not implemented\n";
}

void State::stepSubgroupBlockWriteINTEL(const InsnSubgroupBlockWriteINTEL& insn)
{
    std::cerr << "stepSubgroupBlockWriteINTEL() not implemented\n";
}

void State::stepSubgroupImageBlockReadINTEL(const InsnSubgroupImageBlockReadINTEL& insn)
{
    std::cerr << "stepSubgroupImageBlockReadINTEL() not implemented\n";
}

void State::stepSubgroupImageBlockWriteINTEL(const InsnSubgroupImageBlockWriteINTEL& insn)
{
    std::cerr << "stepSubgroupImageBlockWriteINTEL() not implemented\n";
}

void State::stepDecorateStringGOOGLE(const InsnDecorateStringGOOGLE& insn)
{
    std::cerr << "stepDecorateStringGOOGLE() not implemented\n";
}

void State::stepMemberDecorateStringGOOGLE(const InsnMemberDecorateStringGOOGLE& insn)
{
    std::cerr << "stepMemberDecorateStringGOOGLE() not implemented\n";
}

void State::stepGLSLstd450Round(const InsnGLSLstd450Round& insn)
{
    std::cerr << "stepGLSLstd450Round() not implemented\n";
}

void State::stepGLSLstd450RoundEven(const InsnGLSLstd450RoundEven& insn)
{
    std::cerr << "stepGLSLstd450RoundEven() not implemented\n";
}

void State::stepGLSLstd450Trunc(const InsnGLSLstd450Trunc& insn)
{
    std::cerr << "stepGLSLstd450Trunc() not implemented\n";
}

void State::stepGLSLstd450SAbs(const InsnGLSLstd450SAbs& insn)
{
    std::cerr << "stepGLSLstd450SAbs() not implemented\n";
}

void State::stepGLSLstd450FSign(const InsnGLSLstd450FSign& insn)
{
    std::cerr << "stepGLSLstd450FSign() not implemented\n";
}

void State::stepGLSLstd450SSign(const InsnGLSLstd450SSign& insn)
{
    std::cerr << "stepGLSLstd450SSign() not implemented\n";
}

void State::stepGLSLstd450Ceil(const InsnGLSLstd450Ceil& insn)
{
    std::cerr << "stepGLSLstd450Ceil() not implemented\n";
}

void State::stepGLSLstd450Fract(const InsnGLSLstd450Fract& insn)
{
    std::cerr << "stepGLSLstd450Fract() not implemented\n";
}

void State::stepGLSLstd450Radians(const InsnGLSLstd450Radians& insn)
{
    std::cerr << "stepGLSLstd450Radians() not implemented\n";
}

void State::stepGLSLstd450Degrees(const InsnGLSLstd450Degrees& insn)
{
    std::cerr << "stepGLSLstd450Degrees() not implemented\n";
}

void State::stepGLSLstd450Tan(const InsnGLSLstd450Tan& insn)
{
    std::cerr << "stepGLSLstd450Tan() not implemented\n";
}

void State::stepGLSLstd450Asin(const InsnGLSLstd450Asin& insn)
{
    std::cerr << "stepGLSLstd450Asin() not implemented\n";
}

void State::stepGLSLstd450Acos(const InsnGLSLstd450Acos& insn)
{
    std::cerr << "stepGLSLstd450Acos() not implemented\n";
}

void State::stepGLSLstd450Atan(const InsnGLSLstd450Atan& insn)
{
    std::cerr << "stepGLSLstd450Atan() not implemented\n";
}

void State::stepGLSLstd450Sinh(const InsnGLSLstd450Sinh& insn)
{
    std::cerr << "stepGLSLstd450Sinh() not implemented\n";
}

void State::stepGLSLstd450Cosh(const InsnGLSLstd450Cosh& insn)
{
    std::cerr << "stepGLSLstd450Cosh() not implemented\n";
}

void State::stepGLSLstd450Tanh(const InsnGLSLstd450Tanh& insn)
{
    std::cerr << "stepGLSLstd450Tanh() not implemented\n";
}

void State::stepGLSLstd450Asinh(const InsnGLSLstd450Asinh& insn)
{
    std::cerr << "stepGLSLstd450Asinh() not implemented\n";
}

void State::stepGLSLstd450Acosh(const InsnGLSLstd450Acosh& insn)
{
    std::cerr << "stepGLSLstd450Acosh() not implemented\n";
}

void State::stepGLSLstd450Atanh(const InsnGLSLstd450Atanh& insn)
{
    std::cerr << "stepGLSLstd450Atanh() not implemented\n";
}

void State::stepGLSLstd450Atan2(const InsnGLSLstd450Atan2& insn)
{
    std::cerr << "stepGLSLstd450Atan2() not implemented\n";
}

void State::stepGLSLstd450Exp(const InsnGLSLstd450Exp& insn)
{
    std::cerr << "stepGLSLstd450Exp() not implemented\n";
}

void State::stepGLSLstd450Log(const InsnGLSLstd450Log& insn)
{
    std::cerr << "stepGLSLstd450Log() not implemented\n";
}

void State::stepGLSLstd450Exp2(const InsnGLSLstd450Exp2& insn)
{
    std::cerr << "stepGLSLstd450Exp2() not implemented\n";
}

void State::stepGLSLstd450Log2(const InsnGLSLstd450Log2& insn)
{
    std::cerr << "stepGLSLstd450Log2() not implemented\n";
}

void State::stepGLSLstd450Sqrt(const InsnGLSLstd450Sqrt& insn)
{
    std::cerr << "stepGLSLstd450Sqrt() not implemented\n";
}

void State::stepGLSLstd450InverseSqrt(const InsnGLSLstd450InverseSqrt& insn)
{
    std::cerr << "stepGLSLstd450InverseSqrt() not implemented\n";
}

void State::stepGLSLstd450Determinant(const InsnGLSLstd450Determinant& insn)
{
    std::cerr << "stepGLSLstd450Determinant() not implemented\n";
}

void State::stepGLSLstd450MatrixInverse(const InsnGLSLstd450MatrixInverse& insn)
{
    std::cerr << "stepGLSLstd450MatrixInverse() not implemented\n";
}

void State::stepGLSLstd450Modf(const InsnGLSLstd450Modf& insn)
{
    std::cerr << "stepGLSLstd450Modf() not implemented\n";
}

void State::stepGLSLstd450ModfStruct(const InsnGLSLstd450ModfStruct& insn)
{
    std::cerr << "stepGLSLstd450ModfStruct() not implemented\n";
}

void State::stepGLSLstd450UMin(const InsnGLSLstd450UMin& insn)
{
    std::cerr << "stepGLSLstd450UMin() not implemented\n";
}

void State::stepGLSLstd450SMin(const InsnGLSLstd450SMin& insn)
{
    std::cerr << "stepGLSLstd450SMin() not implemented\n";
}

void State::stepGLSLstd450UMax(const InsnGLSLstd450UMax& insn)
{
    std::cerr << "stepGLSLstd450UMax() not implemented\n";
}

void State::stepGLSLstd450SMax(const InsnGLSLstd450SMax& insn)
{
    std::cerr << "stepGLSLstd450SMax() not implemented\n";
}

void State::stepGLSLstd450FClamp(const InsnGLSLstd450FClamp& insn)
{
    std::cerr << "stepGLSLstd450FClamp() not implemented\n";
}

void State::stepGLSLstd450UClamp(const InsnGLSLstd450UClamp& insn)
{
    std::cerr << "stepGLSLstd450UClamp() not implemented\n";
}

void State::stepGLSLstd450SClamp(const InsnGLSLstd450SClamp& insn)
{
    std::cerr << "stepGLSLstd450SClamp() not implemented\n";
}

void State::stepGLSLstd450FMix(const InsnGLSLstd450FMix& insn)
{
    std::cerr << "stepGLSLstd450FMix() not implemented\n";
}

void State::stepGLSLstd450IMix(const InsnGLSLstd450IMix& insn)
{
    std::cerr << "stepGLSLstd450IMix() not implemented\n";
}

void State::stepGLSLstd450Step(const InsnGLSLstd450Step& insn)
{
    std::cerr << "stepGLSLstd450Step() not implemented\n";
}

void State::stepGLSLstd450SmoothStep(const InsnGLSLstd450SmoothStep& insn)
{
    std::cerr << "stepGLSLstd450SmoothStep() not implemented\n";
}

void State::stepGLSLstd450Fma(const InsnGLSLstd450Fma& insn)
{
    std::cerr << "stepGLSLstd450Fma() not implemented\n";
}

void State::stepGLSLstd450Frexp(const InsnGLSLstd450Frexp& insn)
{
    std::cerr << "stepGLSLstd450Frexp() not implemented\n";
}

void State::stepGLSLstd450FrexpStruct(const InsnGLSLstd450FrexpStruct& insn)
{
    std::cerr << "stepGLSLstd450FrexpStruct() not implemented\n";
}

void State::stepGLSLstd450Ldexp(const InsnGLSLstd450Ldexp& insn)
{
    std::cerr << "stepGLSLstd450Ldexp() not implemented\n";
}

void State::stepGLSLstd450PackSnorm4x8(const InsnGLSLstd450PackSnorm4x8& insn)
{
    std::cerr << "stepGLSLstd450PackSnorm4x8() not implemented\n";
}

void State::stepGLSLstd450PackUnorm4x8(const InsnGLSLstd450PackUnorm4x8& insn)
{
    std::cerr << "stepGLSLstd450PackUnorm4x8() not implemented\n";
}

void State::stepGLSLstd450PackSnorm2x16(const InsnGLSLstd450PackSnorm2x16& insn)
{
    std::cerr << "stepGLSLstd450PackSnorm2x16() not implemented\n";
}

void State::stepGLSLstd450PackUnorm2x16(const InsnGLSLstd450PackUnorm2x16& insn)
{
    std::cerr << "stepGLSLstd450PackUnorm2x16() not implemented\n";
}

void State::stepGLSLstd450PackHalf2x16(const InsnGLSLstd450PackHalf2x16& insn)
{
    std::cerr << "stepGLSLstd450PackHalf2x16() not implemented\n";
}

void State::stepGLSLstd450PackDouble2x32(const InsnGLSLstd450PackDouble2x32& insn)
{
    std::cerr << "stepGLSLstd450PackDouble2x32() not implemented\n";
}

void State::stepGLSLstd450UnpackSnorm2x16(const InsnGLSLstd450UnpackSnorm2x16& insn)
{
    std::cerr << "stepGLSLstd450UnpackSnorm2x16() not implemented\n";
}

void State::stepGLSLstd450UnpackUnorm2x16(const InsnGLSLstd450UnpackUnorm2x16& insn)
{
    std::cerr << "stepGLSLstd450UnpackUnorm2x16() not implemented\n";
}

void State::stepGLSLstd450UnpackHalf2x16(const InsnGLSLstd450UnpackHalf2x16& insn)
{
    std::cerr << "stepGLSLstd450UnpackHalf2x16() not implemented\n";
}

void State::stepGLSLstd450UnpackSnorm4x8(const InsnGLSLstd450UnpackSnorm4x8& insn)
{
    std::cerr << "stepGLSLstd450UnpackSnorm4x8() not implemented\n";
}

void State::stepGLSLstd450UnpackUnorm4x8(const InsnGLSLstd450UnpackUnorm4x8& insn)
{
    std::cerr << "stepGLSLstd450UnpackUnorm4x8() not implemented\n";
}

void State::stepGLSLstd450UnpackDouble2x32(const InsnGLSLstd450UnpackDouble2x32& insn)
{
    std::cerr << "stepGLSLstd450UnpackDouble2x32() not implemented\n";
}

void State::stepGLSLstd450FaceForward(const InsnGLSLstd450FaceForward& insn)
{
    std::cerr << "stepGLSLstd450FaceForward() not implemented\n";
}

void State::stepGLSLstd450Reflect(const InsnGLSLstd450Reflect& insn)
{
    std::cerr << "stepGLSLstd450Reflect() not implemented\n";
}

void State::stepGLSLstd450Refract(const InsnGLSLstd450Refract& insn)
{
    std::cerr << "stepGLSLstd450Refract() not implemented\n";
}

void State::stepGLSLstd450FindILsb(const InsnGLSLstd450FindILsb& insn)
{
    std::cerr << "stepGLSLstd450FindILsb() not implemented\n";
}

void State::stepGLSLstd450FindSMsb(const InsnGLSLstd450FindSMsb& insn)
{
    std::cerr << "stepGLSLstd450FindSMsb() not implemented\n";
}

void State::stepGLSLstd450FindUMsb(const InsnGLSLstd450FindUMsb& insn)
{
    std::cerr << "stepGLSLstd450FindUMsb() not implemented\n";
}

void State::stepGLSLstd450InterpolateAtCentroid(const InsnGLSLstd450InterpolateAtCentroid& insn)
{
    std::cerr << "stepGLSLstd450InterpolateAtCentroid() not implemented\n";
}

void State::stepGLSLstd450InterpolateAtSample(const InsnGLSLstd450InterpolateAtSample& insn)
{
    std::cerr << "stepGLSLstd450InterpolateAtSample() not implemented\n";
}

void State::stepGLSLstd450InterpolateAtOffset(const InsnGLSLstd450InterpolateAtOffset& insn)
{
    std::cerr << "stepGLSLstd450InterpolateAtOffset() not implemented\n";
}

void State::stepGLSLstd450NMin(const InsnGLSLstd450NMin& insn)
{
    std::cerr << "stepGLSLstd450NMin() not implemented\n";
}

void State::stepGLSLstd450NMax(const InsnGLSLstd450NMax& insn)
{
    std::cerr << "stepGLSLstd450NMax() not implemented\n";
}

void State::stepGLSLstd450NClamp(const InsnGLSLstd450NClamp& insn)
{
    std::cerr << "stepGLSLstd450NClamp() not implemented\n";
}


#endif // OPCODE_IMPL_H
