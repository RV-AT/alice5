// Automatically generated by generate_ops.py. DO NOT EDIT.

// OpNop instruction (code 0).
struct InsnNop {
};

// OpUndef instruction (code 1).
struct InsnUndef {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpSourceContinued instruction (code 2).
struct InsnSourceContinued {
    std::string continuedSourceId; // literal string
};

// OpSource instruction (code 3).
struct InsnSource {
    uint32_t sourceLanguage; // SourceLanguage
    uint32_t versionId; // LiteralInteger
    uint32_t fileId; // operand from register (optional)
    std::string sourceId; // literal string (optional)
};

// OpSourceExtension instruction (code 4).
struct InsnSourceExtension {
    std::string extensionId; // literal string
};

// OpName instruction (code 5).
struct InsnName {
    uint32_t targetId; // operand from register
    std::string nameId; // literal string
};

// OpMemberName instruction (code 6).
struct InsnMemberName {
    uint32_t typeId; // operand from register
    uint32_t memberId; // LiteralInteger
    std::string nameId; // literal string
};

// OpString instruction (code 7).
struct InsnString {
    uint32_t resultId; // SSA register for result value
    std::string stringId; // literal string
};

// OpLine instruction (code 8).
struct InsnLine {
    uint32_t fileId; // operand from register
    uint32_t lineId; // LiteralInteger
    uint32_t columnId; // LiteralInteger
};

// OpExtension instruction (code 10).
struct InsnExtension {
    std::string nameId; // literal string
};

// OpExtInstImport instruction (code 11).
struct InsnExtInstImport {
    uint32_t resultId; // SSA register for result value
    std::string nameId; // literal string
};

// OpExtInst instruction (code 12).
struct InsnExtInst {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t setId; // operand from register
    uint32_t instructionId; // LiteralExtInstInteger
    std::vector<uint32_t> operandId; // operand from register
};

// OpMemoryModel instruction (code 14).
struct InsnMemoryModel {
    uint32_t addressingModel; // AddressingModel
    uint32_t memoryModel; // MemoryModel
};

// OpEntryPoint instruction (code 15).
struct InsnEntryPoint {
    uint32_t executionModel; // ExecutionModel
    uint32_t entryPointId; // operand from register
    std::string nameId; // literal string
    std::vector<uint32_t> interfaceId; // operand from register
};

// OpExecutionMode instruction (code 16).
struct InsnExecutionMode {
    uint32_t entryPointId; // operand from register
    uint32_t modeId; // ExecutionMode
};

// OpCapability instruction (code 17).
struct InsnCapability {
    uint32_t capabilityId; // Capability
};

// OpTypeVoid instruction (code 19).
struct InsnTypeVoid {
    uint32_t resultId; // SSA register for result value
};

// OpTypeBool instruction (code 20).
struct InsnTypeBool {
    uint32_t resultId; // SSA register for result value
};

// OpTypeInt instruction (code 21).
struct InsnTypeInt {
    uint32_t resultId; // SSA register for result value
    uint32_t widthId; // LiteralInteger
    uint32_t signednessId; // LiteralInteger
};

// OpTypeFloat instruction (code 22).
struct InsnTypeFloat {
    uint32_t resultId; // SSA register for result value
    uint32_t widthId; // LiteralInteger
};

// OpTypeVector instruction (code 23).
struct InsnTypeVector {
    uint32_t resultId; // SSA register for result value
    uint32_t componentTypeId; // operand from register
    uint32_t componentCountId; // LiteralInteger
};

// OpTypeMatrix instruction (code 24).
struct InsnTypeMatrix {
    uint32_t resultId; // SSA register for result value
    uint32_t columnTypeId; // operand from register
    uint32_t columnCountId; // LiteralInteger
};

// OpTypeImage instruction (code 25).
struct InsnTypeImage {
    uint32_t resultId; // SSA register for result value
    uint32_t sampledTypeId; // operand from register
    uint32_t dim; // Dim
    uint32_t depthId; // LiteralInteger
    uint32_t arrayedId; // LiteralInteger
    uint32_t mSId; // LiteralInteger
    uint32_t sampledId; // LiteralInteger
    uint32_t imageFormat; // ImageFormat
    uint32_t accessQualifier; // AccessQualifier (optional)
};

// OpTypeSampler instruction (code 26).
struct InsnTypeSampler {
    uint32_t resultId; // SSA register for result value
};

// OpTypeSampledImage instruction (code 27).
struct InsnTypeSampledImage {
    uint32_t resultId; // SSA register for result value
    uint32_t imageTypeId; // operand from register
};

// OpTypeArray instruction (code 28).
struct InsnTypeArray {
    uint32_t resultId; // SSA register for result value
    uint32_t elementTypeId; // operand from register
    uint32_t lengthId; // operand from register
};

// OpTypeRuntimeArray instruction (code 29).
struct InsnTypeRuntimeArray {
    uint32_t resultId; // SSA register for result value
    uint32_t elementTypeId; // operand from register
};

// OpTypeStruct instruction (code 30).
struct InsnTypeStruct {
    uint32_t resultId; // SSA register for result value
    std::vector<uint32_t> operandId; // operand from register
};

// OpTypeOpaque instruction (code 31).
struct InsnTypeOpaque {
    uint32_t resultId; // SSA register for result value
    std::string henameoftheopaquetypeId; // literal string
};

// OpTypePointer instruction (code 32).
struct InsnTypePointer {
    uint32_t resultId; // SSA register for result value
    uint32_t storageClass; // StorageClass
    uint32_t typeId; // operand from register
};

// OpTypeFunction instruction (code 33).
struct InsnTypeFunction {
    uint32_t resultId; // SSA register for result value
    uint32_t returnTypeId; // operand from register
    std::vector<uint32_t> operandId; // operand from register
};

// OpTypeEvent instruction (code 34).
struct InsnTypeEvent {
    uint32_t resultId; // SSA register for result value
};

// OpTypeDeviceEvent instruction (code 35).
struct InsnTypeDeviceEvent {
    uint32_t resultId; // SSA register for result value
};

// OpTypeReserveId instruction (code 36).
struct InsnTypeReserveId {
    uint32_t resultId; // SSA register for result value
};

// OpTypeQueue instruction (code 37).
struct InsnTypeQueue {
    uint32_t resultId; // SSA register for result value
};

// OpTypePipe instruction (code 38).
struct InsnTypePipe {
    uint32_t resultId; // SSA register for result value
    uint32_t qualifierId; // AccessQualifier
};

// OpTypeForwardPointer instruction (code 39).
struct InsnTypeForwardPointer {
    uint32_t pointerTypeId; // operand from register
    uint32_t storageClass; // StorageClass
};

// OpConstantTrue instruction (code 41).
struct InsnConstantTrue {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpConstantFalse instruction (code 42).
struct InsnConstantFalse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpConstant instruction (code 43).
struct InsnConstant {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t valueId; // LiteralContextDependentNumber
};

// OpConstantComposite instruction (code 44).
struct InsnConstantComposite {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    std::vector<uint32_t> constituentsId; // operand from register
};

// OpConstantSampler instruction (code 45).
struct InsnConstantSampler {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t samplerAddressingMode; // SamplerAddressingMode
    uint32_t paramId; // LiteralInteger
    uint32_t samplerFilterMode; // SamplerFilterMode
};

// OpConstantNull instruction (code 46).
struct InsnConstantNull {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpSpecConstantTrue instruction (code 48).
struct InsnSpecConstantTrue {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpSpecConstantFalse instruction (code 49).
struct InsnSpecConstantFalse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpSpecConstant instruction (code 50).
struct InsnSpecConstant {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t valueId; // LiteralContextDependentNumber
};

// OpSpecConstantComposite instruction (code 51).
struct InsnSpecConstantComposite {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    std::vector<uint32_t> constituentsId; // operand from register
};

// OpSpecConstantOp instruction (code 52).
struct InsnSpecConstantOp {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t opcodeId; // LiteralSpecConstantOpInteger
};

// OpFunction instruction (code 54).
struct InsnFunction {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t functionControl; // FunctionControl
    uint32_t functionTypeId; // operand from register
};

// OpFunctionParameter instruction (code 55).
struct InsnFunctionParameter {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpFunctionEnd instruction (code 56).
struct InsnFunctionEnd {
};

// OpFunctionCall instruction (code 57).
struct InsnFunctionCall {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t functionId; // operand from register
    std::vector<uint32_t> operandId; // operand from register
};

// OpVariable instruction (code 59).
struct InsnVariable {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t storageClass; // StorageClass
    uint32_t initializerId; // operand from register (optional)
};

// OpImageTexelPointer instruction (code 60).
struct InsnImageTexelPointer {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t sampleId; // operand from register
};

// OpLoad instruction (code 61).
struct InsnLoad {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
};

// OpStore instruction (code 62).
struct InsnStore {
    uint32_t pointerId; // operand from register
    uint32_t objectId; // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
};

// OpCopyMemory instruction (code 63).
struct InsnCopyMemory {
    uint32_t targetId; // operand from register
    uint32_t sourceId; // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
};

// OpCopyMemorySized instruction (code 64).
struct InsnCopyMemorySized {
    uint32_t targetId; // operand from register
    uint32_t sourceId; // operand from register
    uint32_t sizeId; // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
};

// OpAccessChain instruction (code 65).
struct InsnAccessChain {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    std::vector<uint32_t> indexesId; // operand from register
};

// OpInBoundsAccessChain instruction (code 66).
struct InsnInBoundsAccessChain {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    std::vector<uint32_t> indexesId; // operand from register
};

// OpPtrAccessChain instruction (code 67).
struct InsnPtrAccessChain {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t elementId; // operand from register
    std::vector<uint32_t> indexesId; // operand from register
};

// OpArrayLength instruction (code 68).
struct InsnArrayLength {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t structureId; // operand from register
    uint32_t arraymemberId; // LiteralInteger
};

// OpGenericPtrMemSemantics instruction (code 69).
struct InsnGenericPtrMemSemantics {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
};

// OpInBoundsPtrAccessChain instruction (code 70).
struct InsnInBoundsPtrAccessChain {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t elementId; // operand from register
    std::vector<uint32_t> indexesId; // operand from register
};

// OpDecorate instruction (code 71).
struct InsnDecorate {
    uint32_t targetId; // operand from register
    uint32_t decoration; // Decoration
};

// OpMemberDecorate instruction (code 72).
struct InsnMemberDecorate {
    uint32_t structureTypeId; // operand from register
    uint32_t memberId; // LiteralInteger
    uint32_t decoration; // Decoration
};

// OpDecorationGroup instruction (code 73).
struct InsnDecorationGroup {
    uint32_t resultId; // SSA register for result value
};

// OpGroupDecorate instruction (code 74).
struct InsnGroupDecorate {
    uint32_t decorationGroupId; // operand from register
    std::vector<uint32_t> targetsId; // operand from register
};

// OpGroupMemberDecorate instruction (code 75).
struct InsnGroupMemberDecorate {
    uint32_t decorationGroupId; // operand from register
    std::vector<uint32_t> targetsId; // PairIdRefLiteralInteger
};

// OpVectorExtractDynamic instruction (code 77).
struct InsnVectorExtractDynamic {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
    uint32_t indexId; // operand from register
};

// OpVectorInsertDynamic instruction (code 78).
struct InsnVectorInsertDynamic {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
    uint32_t componentId; // operand from register
    uint32_t indexId; // operand from register
};

// OpVectorShuffle instruction (code 79).
struct InsnVectorShuffle {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vector1Id; // operand from register
    uint32_t vector2Id; // operand from register
    std::vector<uint32_t> componentsId; // LiteralInteger
};

// OpCompositeConstruct instruction (code 80).
struct InsnCompositeConstruct {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    std::vector<uint32_t> constituentsId; // operand from register
};

// OpCompositeExtract instruction (code 81).
struct InsnCompositeExtract {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t compositeId; // operand from register
    std::vector<uint32_t> indexesId; // LiteralInteger
};

// OpCompositeInsert instruction (code 82).
struct InsnCompositeInsert {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t objectId; // operand from register
    uint32_t compositeId; // operand from register
    std::vector<uint32_t> indexesId; // LiteralInteger
};

// OpCopyObject instruction (code 83).
struct InsnCopyObject {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpTranspose instruction (code 84).
struct InsnTranspose {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t matrixId; // operand from register
};

// OpSampledImage instruction (code 86).
struct InsnSampledImage {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t samplerId; // operand from register
};

// OpImageSampleImplicitLod instruction (code 87).
struct InsnImageSampleImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSampleExplicitLod instruction (code 88).
struct InsnImageSampleExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSampleDrefImplicitLod instruction (code 89).
struct InsnImageSampleDrefImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSampleDrefExplicitLod instruction (code 90).
struct InsnImageSampleDrefExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSampleProjImplicitLod instruction (code 91).
struct InsnImageSampleProjImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSampleProjExplicitLod instruction (code 92).
struct InsnImageSampleProjExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSampleProjDrefImplicitLod instruction (code 93).
struct InsnImageSampleProjDrefImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSampleProjDrefExplicitLod instruction (code 94).
struct InsnImageSampleProjDrefExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageFetch instruction (code 95).
struct InsnImageFetch {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageGather instruction (code 96).
struct InsnImageGather {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t componentId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageDrefGather instruction (code 97).
struct InsnImageDrefGather {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageRead instruction (code 98).
struct InsnImageRead {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageWrite instruction (code 99).
struct InsnImageWrite {
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t texelId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImage instruction (code 100).
struct InsnImage {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
};

// OpImageQueryFormat instruction (code 101).
struct InsnImageQueryFormat {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
};

// OpImageQueryOrder instruction (code 102).
struct InsnImageQueryOrder {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
};

// OpImageQuerySizeLod instruction (code 103).
struct InsnImageQuerySizeLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t levelofDetailId; // operand from register
};

// OpImageQuerySize instruction (code 104).
struct InsnImageQuerySize {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
};

// OpImageQueryLod instruction (code 105).
struct InsnImageQueryLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
};

// OpImageQueryLevels instruction (code 106).
struct InsnImageQueryLevels {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
};

// OpImageQuerySamples instruction (code 107).
struct InsnImageQuerySamples {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
};

// OpConvertFToU instruction (code 109).
struct InsnConvertFToU {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t floatValueId; // operand from register
};

// OpConvertFToS instruction (code 110).
struct InsnConvertFToS {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t floatValueId; // operand from register
};

// OpConvertSToF instruction (code 111).
struct InsnConvertSToF {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t signedValueId; // operand from register
};

// OpConvertUToF instruction (code 112).
struct InsnConvertUToF {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t unsignedValueId; // operand from register
};

// OpUConvert instruction (code 113).
struct InsnUConvert {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t unsignedValueId; // operand from register
};

// OpSConvert instruction (code 114).
struct InsnSConvert {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t signedValueId; // operand from register
};

// OpFConvert instruction (code 115).
struct InsnFConvert {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t floatValueId; // operand from register
};

// OpQuantizeToF16 instruction (code 116).
struct InsnQuantizeToF16 {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t valueId; // operand from register
};

// OpConvertPtrToU instruction (code 117).
struct InsnConvertPtrToU {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
};

// OpSatConvertSToU instruction (code 118).
struct InsnSatConvertSToU {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t signedValueId; // operand from register
};

// OpSatConvertUToS instruction (code 119).
struct InsnSatConvertUToS {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t unsignedValueId; // operand from register
};

// OpConvertUToPtr instruction (code 120).
struct InsnConvertUToPtr {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t integerValueId; // operand from register
};

// OpPtrCastToGeneric instruction (code 121).
struct InsnPtrCastToGeneric {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
};

// OpGenericCastToPtr instruction (code 122).
struct InsnGenericCastToPtr {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
};

// OpGenericCastToPtrExplicit instruction (code 123).
struct InsnGenericCastToPtrExplicit {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t storageId; // StorageClass
};

// OpBitcast instruction (code 124).
struct InsnBitcast {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpSNegate instruction (code 126).
struct InsnSNegate {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpFNegate instruction (code 127).
struct InsnFNegate {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpIAdd instruction (code 128).
struct InsnIAdd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFAdd instruction (code 129).
struct InsnFAdd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpISub instruction (code 130).
struct InsnISub {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFSub instruction (code 131).
struct InsnFSub {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpIMul instruction (code 132).
struct InsnIMul {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFMul instruction (code 133).
struct InsnFMul {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpUDiv instruction (code 134).
struct InsnUDiv {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSDiv instruction (code 135).
struct InsnSDiv {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFDiv instruction (code 136).
struct InsnFDiv {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpUMod instruction (code 137).
struct InsnUMod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSRem instruction (code 138).
struct InsnSRem {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSMod instruction (code 139).
struct InsnSMod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFRem instruction (code 140).
struct InsnFRem {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFMod instruction (code 141).
struct InsnFMod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpVectorTimesScalar instruction (code 142).
struct InsnVectorTimesScalar {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
    uint32_t scalarId; // operand from register
};

// OpMatrixTimesScalar instruction (code 143).
struct InsnMatrixTimesScalar {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t matrixId; // operand from register
    uint32_t scalarId; // operand from register
};

// OpVectorTimesMatrix instruction (code 144).
struct InsnVectorTimesMatrix {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
    uint32_t matrixId; // operand from register
};

// OpMatrixTimesVector instruction (code 145).
struct InsnMatrixTimesVector {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t matrixId; // operand from register
    uint32_t vectorId; // operand from register
};

// OpMatrixTimesMatrix instruction (code 146).
struct InsnMatrixTimesMatrix {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t leftMatrixId; // operand from register
    uint32_t rightMatrixId; // operand from register
};

// OpOuterProduct instruction (code 147).
struct InsnOuterProduct {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vector1Id; // operand from register
    uint32_t vector2Id; // operand from register
};

// OpDot instruction (code 148).
struct InsnDot {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vector1Id; // operand from register
    uint32_t vector2Id; // operand from register
};

// OpIAddCarry instruction (code 149).
struct InsnIAddCarry {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpISubBorrow instruction (code 150).
struct InsnISubBorrow {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpUMulExtended instruction (code 151).
struct InsnUMulExtended {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSMulExtended instruction (code 152).
struct InsnSMulExtended {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpAny instruction (code 154).
struct InsnAny {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
};

// OpAll instruction (code 155).
struct InsnAll {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t vectorId; // operand from register
};

// OpIsNan instruction (code 156).
struct InsnIsNan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
};

// OpIsInf instruction (code 157).
struct InsnIsInf {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
};

// OpIsFinite instruction (code 158).
struct InsnIsFinite {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
};

// OpIsNormal instruction (code 159).
struct InsnIsNormal {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
};

// OpSignBitSet instruction (code 160).
struct InsnSignBitSet {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
};

// OpLessOrGreater instruction (code 161).
struct InsnLessOrGreater {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
    uint32_t yId; // operand from register
};

// OpOrdered instruction (code 162).
struct InsnOrdered {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
    uint32_t yId; // operand from register
};

// OpUnordered instruction (code 163).
struct InsnUnordered {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t xId; // operand from register
    uint32_t yId; // operand from register
};

// OpLogicalEqual instruction (code 164).
struct InsnLogicalEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpLogicalNotEqual instruction (code 165).
struct InsnLogicalNotEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpLogicalOr instruction (code 166).
struct InsnLogicalOr {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpLogicalAnd instruction (code 167).
struct InsnLogicalAnd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpLogicalNot instruction (code 168).
struct InsnLogicalNot {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpSelect instruction (code 169).
struct InsnSelect {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t conditionId; // operand from register
    uint32_t object1Id; // operand from register
    uint32_t object2Id; // operand from register
};

// OpIEqual instruction (code 170).
struct InsnIEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpINotEqual instruction (code 171).
struct InsnINotEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpUGreaterThan instruction (code 172).
struct InsnUGreaterThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSGreaterThan instruction (code 173).
struct InsnSGreaterThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpUGreaterThanEqual instruction (code 174).
struct InsnUGreaterThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSGreaterThanEqual instruction (code 175).
struct InsnSGreaterThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpULessThan instruction (code 176).
struct InsnULessThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSLessThan instruction (code 177).
struct InsnSLessThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpULessThanEqual instruction (code 178).
struct InsnULessThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpSLessThanEqual instruction (code 179).
struct InsnSLessThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdEqual instruction (code 180).
struct InsnFOrdEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordEqual instruction (code 181).
struct InsnFUnordEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdNotEqual instruction (code 182).
struct InsnFOrdNotEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordNotEqual instruction (code 183).
struct InsnFUnordNotEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdLessThan instruction (code 184).
struct InsnFOrdLessThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordLessThan instruction (code 185).
struct InsnFUnordLessThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdGreaterThan instruction (code 186).
struct InsnFOrdGreaterThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordGreaterThan instruction (code 187).
struct InsnFUnordGreaterThan {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdLessThanEqual instruction (code 188).
struct InsnFOrdLessThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordLessThanEqual instruction (code 189).
struct InsnFUnordLessThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFOrdGreaterThanEqual instruction (code 190).
struct InsnFOrdGreaterThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpFUnordGreaterThanEqual instruction (code 191).
struct InsnFUnordGreaterThanEqual {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpShiftRightLogical instruction (code 194).
struct InsnShiftRightLogical {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t shiftId; // operand from register
};

// OpShiftRightArithmetic instruction (code 195).
struct InsnShiftRightArithmetic {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t shiftId; // operand from register
};

// OpShiftLeftLogical instruction (code 196).
struct InsnShiftLeftLogical {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t shiftId; // operand from register
};

// OpBitwiseOr instruction (code 197).
struct InsnBitwiseOr {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpBitwiseXor instruction (code 198).
struct InsnBitwiseXor {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpBitwiseAnd instruction (code 199).
struct InsnBitwiseAnd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operand1Id; // operand from register
    uint32_t operand2Id; // operand from register
};

// OpNot instruction (code 200).
struct InsnNot {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t operandId; // operand from register
};

// OpBitFieldInsert instruction (code 201).
struct InsnBitFieldInsert {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t insertId; // operand from register
    uint32_t offsetId; // operand from register
    uint32_t countId; // operand from register
};

// OpBitFieldSExtract instruction (code 202).
struct InsnBitFieldSExtract {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t offsetId; // operand from register
    uint32_t countId; // operand from register
};

// OpBitFieldUExtract instruction (code 203).
struct InsnBitFieldUExtract {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
    uint32_t offsetId; // operand from register
    uint32_t countId; // operand from register
};

// OpBitReverse instruction (code 204).
struct InsnBitReverse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
};

// OpBitCount instruction (code 205).
struct InsnBitCount {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t baseId; // operand from register
};

// OpDPdx instruction (code 207).
struct InsnDPdx {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpDPdy instruction (code 208).
struct InsnDPdy {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpFwidth instruction (code 209).
struct InsnFwidth {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpDPdxFine instruction (code 210).
struct InsnDPdxFine {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpDPdyFine instruction (code 211).
struct InsnDPdyFine {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpFwidthFine instruction (code 212).
struct InsnFwidthFine {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpDPdxCoarse instruction (code 213).
struct InsnDPdxCoarse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpDPdyCoarse instruction (code 214).
struct InsnDPdyCoarse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpFwidthCoarse instruction (code 215).
struct InsnFwidthCoarse {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pId; // operand from register
};

// OpEmitVertex instruction (code 218).
struct InsnEmitVertex {
};

// OpEndPrimitive instruction (code 219).
struct InsnEndPrimitive {
};

// OpEmitStreamVertex instruction (code 220).
struct InsnEmitStreamVertex {
    uint32_t streamId; // operand from register
};

// OpEndStreamPrimitive instruction (code 221).
struct InsnEndStreamPrimitive {
    uint32_t streamId; // operand from register
};

// OpControlBarrier instruction (code 224).
struct InsnControlBarrier {
    uint32_t executionId; // IdScope
    uint32_t memoryId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpMemoryBarrier instruction (code 225).
struct InsnMemoryBarrier {
    uint32_t memoryId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpAtomicLoad instruction (code 227).
struct InsnAtomicLoad {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpAtomicStore instruction (code 228).
struct InsnAtomicStore {
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicExchange instruction (code 229).
struct InsnAtomicExchange {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicCompareExchange instruction (code 230).
struct InsnAtomicCompareExchange {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t equalId; // IdMemorySemantics
    uint32_t unequalId; // IdMemorySemantics
    uint32_t valueId; // operand from register
    uint32_t comparatorId; // operand from register
};

// OpAtomicCompareExchangeWeak instruction (code 231).
struct InsnAtomicCompareExchangeWeak {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t equalId; // IdMemorySemantics
    uint32_t unequalId; // IdMemorySemantics
    uint32_t valueId; // operand from register
    uint32_t comparatorId; // operand from register
};

// OpAtomicIIncrement instruction (code 232).
struct InsnAtomicIIncrement {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpAtomicIDecrement instruction (code 233).
struct InsnAtomicIDecrement {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpAtomicIAdd instruction (code 234).
struct InsnAtomicIAdd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicISub instruction (code 235).
struct InsnAtomicISub {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicSMin instruction (code 236).
struct InsnAtomicSMin {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicUMin instruction (code 237).
struct InsnAtomicUMin {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicSMax instruction (code 238).
struct InsnAtomicSMax {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicUMax instruction (code 239).
struct InsnAtomicUMax {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicAnd instruction (code 240).
struct InsnAtomicAnd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicOr instruction (code 241).
struct InsnAtomicOr {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpAtomicXor instruction (code 242).
struct InsnAtomicXor {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
    uint32_t valueId; // operand from register
};

// OpPhi instruction (code 245).
struct InsnPhi {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    std::vector<uint32_t> operandId; // PairIdRefIdRef
};

// OpLoopMerge instruction (code 246).
struct InsnLoopMerge {
    uint32_t mergeBlockId; // operand from register
    uint32_t continueTargetId; // operand from register
    uint32_t loopControl; // LoopControl
};

// OpSelectionMerge instruction (code 247).
struct InsnSelectionMerge {
    uint32_t mergeBlockId; // operand from register
    uint32_t selectionControl; // SelectionControl
};

// OpLabel instruction (code 248).
struct InsnLabel {
    uint32_t resultId; // SSA register for result value
};

// OpBranch instruction (code 249).
struct InsnBranch {
    uint32_t targetLabelId; // operand from register
};

// OpBranchConditional instruction (code 250).
struct InsnBranchConditional {
    uint32_t conditionId; // operand from register
    uint32_t trueLabelId; // operand from register
    uint32_t falseLabelId; // operand from register
    std::vector<uint32_t> branchweightsId; // LiteralInteger
};

// OpSwitch instruction (code 251).
struct InsnSwitch {
    uint32_t selectorId; // operand from register
    uint32_t defaultId; // operand from register
    std::vector<uint32_t> targetId; // PairLiteralIntegerIdRef
};

// OpKill instruction (code 252).
struct InsnKill {
};

// OpReturn instruction (code 253).
struct InsnReturn {
};

// OpReturnValue instruction (code 254).
struct InsnReturnValue {
    uint32_t valueId; // operand from register
};

// OpUnreachable instruction (code 255).
struct InsnUnreachable {
};

// OpLifetimeStart instruction (code 256).
struct InsnLifetimeStart {
    uint32_t pointerId; // operand from register
    uint32_t sizeId; // LiteralInteger
};

// OpLifetimeStop instruction (code 257).
struct InsnLifetimeStop {
    uint32_t pointerId; // operand from register
    uint32_t sizeId; // LiteralInteger
};

// OpGroupAsyncCopy instruction (code 259).
struct InsnGroupAsyncCopy {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t destinationId; // operand from register
    uint32_t sourceId; // operand from register
    uint32_t numElementsId; // operand from register
    uint32_t strideId; // operand from register
    uint32_t eventId; // operand from register
};

// OpGroupWaitEvents instruction (code 260).
struct InsnGroupWaitEvents {
    uint32_t executionId; // IdScope
    uint32_t numEventsId; // operand from register
    uint32_t eventsListId; // operand from register
};

// OpGroupAll instruction (code 261).
struct InsnGroupAll {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t predicateId; // operand from register
};

// OpGroupAny instruction (code 262).
struct InsnGroupAny {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t predicateId; // operand from register
};

// OpGroupBroadcast instruction (code 263).
struct InsnGroupBroadcast {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t valueId; // operand from register
    uint32_t localIdId; // operand from register
};

// OpGroupIAdd instruction (code 264).
struct InsnGroupIAdd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFAdd instruction (code 265).
struct InsnGroupFAdd {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFMin instruction (code 266).
struct InsnGroupFMin {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupUMin instruction (code 267).
struct InsnGroupUMin {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupSMin instruction (code 268).
struct InsnGroupSMin {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFMax instruction (code 269).
struct InsnGroupFMax {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupUMax instruction (code 270).
struct InsnGroupUMax {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupSMax instruction (code 271).
struct InsnGroupSMax {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpReadPipe instruction (code 274).
struct InsnReadPipe {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t pointerId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpWritePipe instruction (code 275).
struct InsnWritePipe {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t pointerId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpReservedReadPipe instruction (code 276).
struct InsnReservedReadPipe {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t indexId; // operand from register
    uint32_t pointerId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpReservedWritePipe instruction (code 277).
struct InsnReservedWritePipe {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t indexId; // operand from register
    uint32_t pointerId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpReserveReadPipePackets instruction (code 278).
struct InsnReserveReadPipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t numPacketsId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpReserveWritePipePackets instruction (code 279).
struct InsnReserveWritePipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t numPacketsId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpCommitReadPipe instruction (code 280).
struct InsnCommitReadPipe {
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpCommitWritePipe instruction (code 281).
struct InsnCommitWritePipe {
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpIsValidReserveId instruction (code 282).
struct InsnIsValidReserveId {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t reserveIdId; // operand from register
};

// OpGetNumPipePackets instruction (code 283).
struct InsnGetNumPipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpGetMaxPipePackets instruction (code 284).
struct InsnGetMaxPipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpGroupReserveReadPipePackets instruction (code 285).
struct InsnGroupReserveReadPipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t pipeId; // operand from register
    uint32_t numPacketsId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpGroupReserveWritePipePackets instruction (code 286).
struct InsnGroupReserveWritePipePackets {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t pipeId; // operand from register
    uint32_t numPacketsId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpGroupCommitReadPipe instruction (code 287).
struct InsnGroupCommitReadPipe {
    uint32_t executionId; // IdScope
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpGroupCommitWritePipe instruction (code 288).
struct InsnGroupCommitWritePipe {
    uint32_t executionId; // IdScope
    uint32_t pipeId; // operand from register
    uint32_t reserveIdId; // operand from register
    uint32_t packetSizeId; // operand from register
    uint32_t packetAlignmentId; // operand from register
};

// OpEnqueueMarker instruction (code 291).
struct InsnEnqueueMarker {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t queueId; // operand from register
    uint32_t numEventsId; // operand from register
    uint32_t waitEventsId; // operand from register
    uint32_t retEventId; // operand from register
};

// OpEnqueueKernel instruction (code 292).
struct InsnEnqueueKernel {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t queueId; // operand from register
    uint32_t flagsId; // operand from register
    uint32_t nDRangeId; // operand from register
    uint32_t numEventsId; // operand from register
    uint32_t waitEventsId; // operand from register
    uint32_t retEventId; // operand from register
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
    std::vector<uint32_t> localSizeId; // operand from register
};

// OpGetKernelNDrangeSubGroupCount instruction (code 293).
struct InsnGetKernelNDrangeSubGroupCount {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t nDRangeId; // operand from register
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpGetKernelNDrangeMaxSubGroupSize instruction (code 294).
struct InsnGetKernelNDrangeMaxSubGroupSize {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t nDRangeId; // operand from register
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpGetKernelWorkGroupSize instruction (code 295).
struct InsnGetKernelWorkGroupSize {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpGetKernelPreferredWorkGroupSizeMultiple instruction (code 296).
struct InsnGetKernelPreferredWorkGroupSizeMultiple {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpRetainEvent instruction (code 297).
struct InsnRetainEvent {
    uint32_t eventId; // operand from register
};

// OpReleaseEvent instruction (code 298).
struct InsnReleaseEvent {
    uint32_t eventId; // operand from register
};

// OpCreateUserEvent instruction (code 299).
struct InsnCreateUserEvent {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpIsValidEvent instruction (code 300).
struct InsnIsValidEvent {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t eventId; // operand from register
};

// OpSetUserEventStatus instruction (code 301).
struct InsnSetUserEventStatus {
    uint32_t eventId; // operand from register
    uint32_t statusId; // operand from register
};

// OpCaptureEventProfilingInfo instruction (code 302).
struct InsnCaptureEventProfilingInfo {
    uint32_t eventId; // operand from register
    uint32_t profilingInfoId; // operand from register
    uint32_t valueId; // operand from register
};

// OpGetDefaultQueue instruction (code 303).
struct InsnGetDefaultQueue {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
};

// OpBuildNDRange instruction (code 304).
struct InsnBuildNDRange {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t globalWorkSizeId; // operand from register
    uint32_t localWorkSizeId; // operand from register
    uint32_t globalWorkOffsetId; // operand from register
};

// OpImageSparseSampleImplicitLod instruction (code 305).
struct InsnImageSparseSampleImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseSampleExplicitLod instruction (code 306).
struct InsnImageSparseSampleExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSparseSampleDrefImplicitLod instruction (code 307).
struct InsnImageSparseSampleDrefImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseSampleDrefExplicitLod instruction (code 308).
struct InsnImageSparseSampleDrefExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSparseSampleProjImplicitLod instruction (code 309).
struct InsnImageSparseSampleProjImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseSampleProjExplicitLod instruction (code 310).
struct InsnImageSparseSampleProjExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSparseSampleProjDrefImplicitLod instruction (code 311).
struct InsnImageSparseSampleProjDrefImplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseSampleProjDrefExplicitLod instruction (code 312).
struct InsnImageSparseSampleProjDrefExplicitLod {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands
};

// OpImageSparseFetch instruction (code 313).
struct InsnImageSparseFetch {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseGather instruction (code 314).
struct InsnImageSparseGather {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t componentId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseDrefGather instruction (code 315).
struct InsnImageSparseDrefGather {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t sampledImageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t drefId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpImageSparseTexelsResident instruction (code 316).
struct InsnImageSparseTexelsResident {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t residentCodeId; // operand from register
};

// OpNoLine instruction (code 317).
struct InsnNoLine {
};

// OpAtomicFlagTestAndSet instruction (code 318).
struct InsnAtomicFlagTestAndSet {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpAtomicFlagClear instruction (code 319).
struct InsnAtomicFlagClear {
    uint32_t pointerId; // operand from register
    uint32_t scopeId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpImageSparseRead instruction (code 320).
struct InsnImageSparseRead {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
};

// OpSizeOf instruction (code 321).
struct InsnSizeOf {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pointerId; // operand from register
};

// OpTypePipeStorage instruction (code 322).
struct InsnTypePipeStorage {
    uint32_t resultId; // SSA register for result value
};

// OpConstantPipeStorage instruction (code 323).
struct InsnConstantPipeStorage {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t packetSizeId; // LiteralInteger
    uint32_t packetAlignmentId; // LiteralInteger
    uint32_t capacityId; // LiteralInteger
};

// OpCreatePipeFromPipeStorage instruction (code 324).
struct InsnCreatePipeFromPipeStorage {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t pipeStorageId; // operand from register
};

// OpGetKernelLocalSizeForSubgroupCount instruction (code 325).
struct InsnGetKernelLocalSizeForSubgroupCount {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t subgroupCountId; // operand from register
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpGetKernelMaxNumSubgroups instruction (code 326).
struct InsnGetKernelMaxNumSubgroups {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t invokeId; // operand from register
    uint32_t paramId; // operand from register
    uint32_t paramSizeId; // operand from register
    uint32_t paramAlignId; // operand from register
};

// OpTypeNamedBarrier instruction (code 327).
struct InsnTypeNamedBarrier {
    uint32_t resultId; // SSA register for result value
};

// OpNamedBarrierInitialize instruction (code 328).
struct InsnNamedBarrierInitialize {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t subgroupCountId; // operand from register
};

// OpMemoryNamedBarrier instruction (code 329).
struct InsnMemoryNamedBarrier {
    uint32_t namedBarrierId; // operand from register
    uint32_t memoryId; // IdScope
    uint32_t semanticsId; // IdMemorySemantics
};

// OpModuleProcessed instruction (code 330).
struct InsnModuleProcessed {
    std::string processId; // literal string
};

// OpExecutionModeId instruction (code 331).
struct InsnExecutionModeId {
    uint32_t entryPointId; // operand from register
    uint32_t modeId; // ExecutionMode
};

// OpDecorateId instruction (code 332).
struct InsnDecorateId {
    uint32_t targetId; // operand from register
    uint32_t decoration; // Decoration
};

// OpSubgroupBallotKHR instruction (code 4421).
struct InsnSubgroupBallotKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t predicateId; // operand from register
};

// OpSubgroupFirstInvocationKHR instruction (code 4422).
struct InsnSubgroupFirstInvocationKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t valueId; // operand from register
};

// OpSubgroupAllKHR instruction (code 4428).
struct InsnSubgroupAllKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t predicateId; // operand from register
};

// OpSubgroupAnyKHR instruction (code 4429).
struct InsnSubgroupAnyKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t predicateId; // operand from register
};

// OpSubgroupAllEqualKHR instruction (code 4430).
struct InsnSubgroupAllEqualKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t predicateId; // operand from register
};

// OpSubgroupReadInvocationKHR instruction (code 4432).
struct InsnSubgroupReadInvocationKHR {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t valueId; // operand from register
    uint32_t indexId; // operand from register
};

// OpGroupIAddNonUniformAMD instruction (code 5000).
struct InsnGroupIAddNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFAddNonUniformAMD instruction (code 5001).
struct InsnGroupFAddNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFMinNonUniformAMD instruction (code 5002).
struct InsnGroupFMinNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupUMinNonUniformAMD instruction (code 5003).
struct InsnGroupUMinNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupSMinNonUniformAMD instruction (code 5004).
struct InsnGroupSMinNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupFMaxNonUniformAMD instruction (code 5005).
struct InsnGroupFMaxNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupUMaxNonUniformAMD instruction (code 5006).
struct InsnGroupUMaxNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpGroupSMaxNonUniformAMD instruction (code 5007).
struct InsnGroupSMaxNonUniformAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t executionId; // IdScope
    uint32_t operationId; // GroupOperation
    uint32_t xId; // operand from register
};

// OpFragmentMaskFetchAMD instruction (code 5011).
struct InsnFragmentMaskFetchAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
};

// OpFragmentFetchAMD instruction (code 5012).
struct InsnFragmentFetchAMD {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t fragmentIndexId; // operand from register
};

// OpSubgroupShuffleINTEL instruction (code 5571).
struct InsnSubgroupShuffleINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t dataId; // operand from register
    uint32_t invocationIdId; // operand from register
};

// OpSubgroupShuffleDownINTEL instruction (code 5572).
struct InsnSubgroupShuffleDownINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t currentId; // operand from register
    uint32_t nextId; // operand from register
    uint32_t deltaId; // operand from register
};

// OpSubgroupShuffleUpINTEL instruction (code 5573).
struct InsnSubgroupShuffleUpINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t previousId; // operand from register
    uint32_t currentId; // operand from register
    uint32_t deltaId; // operand from register
};

// OpSubgroupShuffleXorINTEL instruction (code 5574).
struct InsnSubgroupShuffleXorINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t dataId; // operand from register
    uint32_t valueId; // operand from register
};

// OpSubgroupBlockReadINTEL instruction (code 5575).
struct InsnSubgroupBlockReadINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t ptrId; // operand from register
};

// OpSubgroupBlockWriteINTEL instruction (code 5576).
struct InsnSubgroupBlockWriteINTEL {
    uint32_t ptrId; // operand from register
    uint32_t dataId; // operand from register
};

// OpSubgroupImageBlockReadINTEL instruction (code 5577).
struct InsnSubgroupImageBlockReadINTEL {
    uint32_t type; // result type
    uint32_t resultId; // SSA register for result value
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
};

// OpSubgroupImageBlockWriteINTEL instruction (code 5578).
struct InsnSubgroupImageBlockWriteINTEL {
    uint32_t imageId; // operand from register
    uint32_t coordinateId; // operand from register
    uint32_t dataId; // operand from register
};

// OpDecorateStringGOOGLE instruction (code 5632).
struct InsnDecorateStringGOOGLE {
    uint32_t targetId; // operand from register
    uint32_t decoration; // Decoration
};

// OpMemberDecorateStringGOOGLE instruction (code 5633).
struct InsnMemberDecorateStringGOOGLE {
    uint32_t structTypeId; // operand from register
    uint32_t memberId; // LiteralInteger
    uint32_t decoration; // Decoration
};

