
; ------------------------------------------------------------------------
; library.s
;
; library of math functions

; some useful constants

.segment data

.NaN:
        .word   0xffc00000      ; quiet? NaN result of sqrt(-1)

.one:
        .word   1065353216      ; 1.0

.point5:
        .word   1056964608      ; .5

.point25:
        .word   1048576000      ; 0x3e800000 = .25

.oneOverTwoPi:
        .word   1042479491      ; 1.0 / 2pi

.halfPi:
        .word   1070141403      ; 0x3fc90fdb = pi / 2

.pi:
        .word   1078530011      ; 0x40490fdb = pi

.sqrtTable:
        .word   0 ; 0x00000000 = 0 (sqrt(0))
        .word   536870912 ; 0x20000000 = 1.0842e-19 (sqrt(1.17549e-38))
        .word   540345587 ; 0x203504F3 = 1.53329e-19 (sqrt(2.35099e-38))
        .word   545259520 ; 0x20800000 = 2.1684e-19 (sqrt(4.70198e-38))
        .word   548734195 ; 0x20B504F3 = 3.06659e-19 (sqrt(9.40395e-38))
        .word   553648128 ; 0x21000000 = 4.33681e-19 (sqrt(1.88079e-37))
        .word   557122803 ; 0x213504F3 = 6.13317e-19 (sqrt(3.76158e-37))
        .word   562036736 ; 0x21800000 = 8.67362e-19 (sqrt(7.52316e-37))
        .word   565511411 ; 0x21B504F3 = 1.22663e-18 (sqrt(1.50463e-36))
        .word   570425344 ; 0x22000000 = 1.73472e-18 (sqrt(3.00927e-36))
        .word   573900019 ; 0x223504F3 = 2.45327e-18 (sqrt(6.01853e-36))
        .word   578813952 ; 0x22800000 = 3.46945e-18 (sqrt(1.20371e-35))
        .word   582288627 ; 0x22B504F3 = 4.90654e-18 (sqrt(2.40741e-35))
        .word   587202560 ; 0x23000000 = 6.93889e-18 (sqrt(4.81482e-35))
        .word   590677235 ; 0x233504F3 = 9.81308e-18 (sqrt(9.62965e-35))
        .word   595591168 ; 0x23800000 = 1.38778e-17 (sqrt(1.92593e-34))
        .word   599065843 ; 0x23B504F3 = 1.96262e-17 (sqrt(3.85186e-34))
        .word   603979776 ; 0x24000000 = 2.77556e-17 (sqrt(7.70372e-34))
        .word   607454451 ; 0x243504F3 = 3.92523e-17 (sqrt(1.54074e-33))
        .word   612368384 ; 0x24800000 = 5.55112e-17 (sqrt(3.08149e-33))
        .word   615843059 ; 0x24B504F3 = 7.85046e-17 (sqrt(6.16298e-33))
        .word   620756992 ; 0x25000000 = 1.11022e-16 (sqrt(1.2326e-32))
        .word   624231667 ; 0x253504F3 = 1.57009e-16 (sqrt(2.46519e-32))
        .word   629145600 ; 0x25800000 = 2.22045e-16 (sqrt(4.93038e-32))
        .word   632620275 ; 0x25B504F3 = 3.14018e-16 (sqrt(9.86076e-32))
        .word   637534208 ; 0x26000000 = 4.44089e-16 (sqrt(1.97215e-31))
        .word   641008883 ; 0x263504F3 = 6.28037e-16 (sqrt(3.9443e-31))
        .word   645922816 ; 0x26800000 = 8.88178e-16 (sqrt(7.88861e-31))
        .word   649397491 ; 0x26B504F3 = 1.25607e-15 (sqrt(1.57772e-30))
        .word   654311424 ; 0x27000000 = 1.77636e-15 (sqrt(3.15544e-30))
        .word   657786099 ; 0x273504F3 = 2.51215e-15 (sqrt(6.31089e-30))
        .word   662700032 ; 0x27800000 = 3.55271e-15 (sqrt(1.26218e-29))
        .word   666174707 ; 0x27B504F3 = 5.0243e-15 (sqrt(2.52435e-29))
        .word   671088640 ; 0x28000000 = 7.10543e-15 (sqrt(5.04871e-29))
        .word   674563315 ; 0x283504F3 = 1.00486e-14 (sqrt(1.00974e-28))
        .word   679477248 ; 0x28800000 = 1.42109e-14 (sqrt(2.01948e-28))
        .word   682951923 ; 0x28B504F3 = 2.00972e-14 (sqrt(4.03897e-28))
        .word   687865856 ; 0x29000000 = 2.84217e-14 (sqrt(8.07794e-28))
        .word   691340531 ; 0x293504F3 = 4.01944e-14 (sqrt(1.61559e-27))
        .word   696254464 ; 0x29800000 = 5.68434e-14 (sqrt(3.23117e-27))
        .word   699729139 ; 0x29B504F3 = 8.03887e-14 (sqrt(6.46235e-27))
        .word   704643072 ; 0x2A000000 = 1.13687e-13 (sqrt(1.29247e-26))
        .word   708117747 ; 0x2A3504F3 = 1.60777e-13 (sqrt(2.58494e-26))
        .word   713031680 ; 0x2A800000 = 2.27374e-13 (sqrt(5.16988e-26))
        .word   716506355 ; 0x2AB504F3 = 3.21555e-13 (sqrt(1.03398e-25))
        .word   721420288 ; 0x2B000000 = 4.54747e-13 (sqrt(2.06795e-25))
        .word   724894963 ; 0x2B3504F3 = 6.4311e-13 (sqrt(4.1359e-25))
        .word   729808896 ; 0x2B800000 = 9.09495e-13 (sqrt(8.27181e-25))
        .word   733283571 ; 0x2BB504F3 = 1.28622e-12 (sqrt(1.65436e-24))
        .word   738197504 ; 0x2C000000 = 1.81899e-12 (sqrt(3.30872e-24))
        .word   741672179 ; 0x2C3504F3 = 2.57244e-12 (sqrt(6.61744e-24))
        .word   746586112 ; 0x2C800000 = 3.63798e-12 (sqrt(1.32349e-23))
        .word   750060787 ; 0x2CB504F3 = 5.14488e-12 (sqrt(2.64698e-23))
        .word   754974720 ; 0x2D000000 = 7.27596e-12 (sqrt(5.29396e-23))
        .word   758449395 ; 0x2D3504F3 = 1.02898e-11 (sqrt(1.05879e-22))
        .word   763363328 ; 0x2D800000 = 1.45519e-11 (sqrt(2.11758e-22))
        .word   766838003 ; 0x2DB504F3 = 2.05795e-11 (sqrt(4.23516e-22))
        .word   771751936 ; 0x2E000000 = 2.91038e-11 (sqrt(8.47033e-22))
        .word   775226611 ; 0x2E3504F3 = 4.1159e-11 (sqrt(1.69407e-21))
        .word   780140544 ; 0x2E800000 = 5.82077e-11 (sqrt(3.38813e-21))
        .word   783615219 ; 0x2EB504F3 = 8.23181e-11 (sqrt(6.77626e-21))
        .word   788529152 ; 0x2F000000 = 1.16415e-10 (sqrt(1.35525e-20))
        .word   792003827 ; 0x2F3504F3 = 1.64636e-10 (sqrt(2.71051e-20))
        .word   796917760 ; 0x2F800000 = 2.32831e-10 (sqrt(5.42101e-20))
        .word   800392435 ; 0x2FB504F3 = 3.29272e-10 (sqrt(1.0842e-19))
        .word   805306368 ; 0x30000000 = 4.65661e-10 (sqrt(2.1684e-19))
        .word   808781043 ; 0x303504F3 = 6.58544e-10 (sqrt(4.33681e-19))
        .word   813694976 ; 0x30800000 = 9.31323e-10 (sqrt(8.67362e-19))
        .word   817169651 ; 0x30B504F3 = 1.31709e-09 (sqrt(1.73472e-18))
        .word   822083584 ; 0x31000000 = 1.86265e-09 (sqrt(3.46945e-18))
        .word   825558259 ; 0x313504F3 = 2.63418e-09 (sqrt(6.93889e-18))
        .word   830472192 ; 0x31800000 = 3.72529e-09 (sqrt(1.38778e-17))
        .word   833946867 ; 0x31B504F3 = 5.26836e-09 (sqrt(2.77556e-17))
        .word   838860800 ; 0x32000000 = 7.45058e-09 (sqrt(5.55112e-17))
        .word   842335475 ; 0x323504F3 = 1.05367e-08 (sqrt(1.11022e-16))
        .word   847249408 ; 0x32800000 = 1.49012e-08 (sqrt(2.22045e-16))
        .word   850724083 ; 0x32B504F3 = 2.10734e-08 (sqrt(4.44089e-16))
        .word   855638016 ; 0x33000000 = 2.98023e-08 (sqrt(8.88178e-16))
        .word   859112691 ; 0x333504F3 = 4.21468e-08 (sqrt(1.77636e-15))
        .word   864026624 ; 0x33800000 = 5.96046e-08 (sqrt(3.55271e-15))
        .word   867501299 ; 0x33B504F3 = 8.42937e-08 (sqrt(7.10543e-15))
        .word   872415232 ; 0x34000000 = 1.19209e-07 (sqrt(1.42109e-14))
        .word   875889907 ; 0x343504F3 = 1.68587e-07 (sqrt(2.84217e-14))
        .word   880803840 ; 0x34800000 = 2.38419e-07 (sqrt(5.68434e-14))
        .word   884278515 ; 0x34B504F3 = 3.37175e-07 (sqrt(1.13687e-13))
        .word   889192448 ; 0x35000000 = 4.76837e-07 (sqrt(2.27374e-13))
        .word   892667123 ; 0x353504F3 = 6.7435e-07 (sqrt(4.54747e-13))
        .word   897581056 ; 0x35800000 = 9.53674e-07 (sqrt(9.09495e-13))
        .word   901055731 ; 0x35B504F3 = 1.3487e-06 (sqrt(1.81899e-12))
        .word   905969664 ; 0x36000000 = 1.90735e-06 (sqrt(3.63798e-12))
        .word   909444339 ; 0x363504F3 = 2.6974e-06 (sqrt(7.27596e-12))
        .word   914358272 ; 0x36800000 = 3.8147e-06 (sqrt(1.45519e-11))
        .word   917832947 ; 0x36B504F3 = 5.3948e-06 (sqrt(2.91038e-11))
        .word   922746880 ; 0x37000000 = 7.62939e-06 (sqrt(5.82077e-11))
        .word   926221555 ; 0x373504F3 = 1.07896e-05 (sqrt(1.16415e-10))
        .word   931135488 ; 0x37800000 = 1.52588e-05 (sqrt(2.32831e-10))
        .word   934610163 ; 0x37B504F3 = 2.15792e-05 (sqrt(4.65661e-10))
        .word   939524096 ; 0x38000000 = 3.05176e-05 (sqrt(9.31323e-10))
        .word   942998771 ; 0x383504F3 = 4.31584e-05 (sqrt(1.86265e-09))
        .word   947912704 ; 0x38800000 = 6.10352e-05 (sqrt(3.72529e-09))
        .word   951387379 ; 0x38B504F3 = 8.63167e-05 (sqrt(7.45058e-09))
        .word   956301312 ; 0x39000000 = 0.00012207 (sqrt(1.49012e-08))
        .word   959775987 ; 0x393504F3 = 0.000172633 (sqrt(2.98023e-08))
        .word   964689920 ; 0x39800000 = 0.000244141 (sqrt(5.96046e-08))
        .word   968164595 ; 0x39B504F3 = 0.000345267 (sqrt(1.19209e-07))
        .word   973078528 ; 0x3A000000 = 0.000488281 (sqrt(2.38419e-07))
        .word   976553203 ; 0x3A3504F3 = 0.000690534 (sqrt(4.76837e-07))
        .word   981467136 ; 0x3A800000 = 0.000976562 (sqrt(9.53674e-07))
        .word   984941811 ; 0x3AB504F3 = 0.00138107 (sqrt(1.90735e-06))
        .word   989855744 ; 0x3B000000 = 0.00195312 (sqrt(3.8147e-06))
        .word   993330419 ; 0x3B3504F3 = 0.00276214 (sqrt(7.62939e-06))
        .word   998244352 ; 0x3B800000 = 0.00390625 (sqrt(1.52588e-05))
        .word   1001719027 ; 0x3BB504F3 = 0.00552427 (sqrt(3.05176e-05))
        .word   1006632960 ; 0x3C000000 = 0.0078125 (sqrt(6.10352e-05))
        .word   1010107635 ; 0x3C3504F3 = 0.0110485 (sqrt(0.00012207))
        .word   1015021568 ; 0x3C800000 = 0.015625 (sqrt(0.000244141))
        .word   1018496243 ; 0x3CB504F3 = 0.0220971 (sqrt(0.000488281))
        .word   1023410176 ; 0x3D000000 = 0.03125 (sqrt(0.000976562))
        .word   1026884851 ; 0x3D3504F3 = 0.0441942 (sqrt(0.00195312))
        .word   1031798784 ; 0x3D800000 = 0.0625 (sqrt(0.00390625))
        .word   1035273459 ; 0x3DB504F3 = 0.0883883 (sqrt(0.0078125))
        .word   1040187392 ; 0x3E000000 = 0.125 (sqrt(0.015625))
        .word   1043662067 ; 0x3E3504F3 = 0.176777 (sqrt(0.03125))
        .word   1048576000 ; 0x3E800000 = 0.25 (sqrt(0.0625))
        .word   1052050675 ; 0x3EB504F3 = 0.353553 (sqrt(0.125))
        .word   1056964608 ; 0x3F000000 = 0.5 (sqrt(0.25))
        .word   1060439283 ; 0x3F3504F3 = 0.707107 (sqrt(0.5))
        .word   1065353216 ; 0x3F800000 = 1 (sqrt(1))
        .word   1068827891 ; 0x3FB504F3 = 1.41421 (sqrt(2))
        .word   1073741824 ; 0x40000000 = 2 (sqrt(4))
        .word   1077216499 ; 0x403504F3 = 2.82843 (sqrt(8))
        .word   1082130432 ; 0x40800000 = 4 (sqrt(16))
        .word   1085605107 ; 0x40B504F3 = 5.65685 (sqrt(32))
        .word   1090519040 ; 0x41000000 = 8 (sqrt(64))
        .word   1093993715 ; 0x413504F3 = 11.3137 (sqrt(128))
        .word   1098907648 ; 0x41800000 = 16 (sqrt(256))
        .word   1102382323 ; 0x41B504F3 = 22.6274 (sqrt(512))
        .word   1107296256 ; 0x42000000 = 32 (sqrt(1024))
        .word   1110770931 ; 0x423504F3 = 45.2548 (sqrt(2048))
        .word   1115684864 ; 0x42800000 = 64 (sqrt(4096))
        .word   1119159539 ; 0x42B504F3 = 90.5097 (sqrt(8192))
        .word   1124073472 ; 0x43000000 = 128 (sqrt(16384))
        .word   1127548147 ; 0x433504F3 = 181.019 (sqrt(32768))
        .word   1132462080 ; 0x43800000 = 256 (sqrt(65536))
        .word   1135936755 ; 0x43B504F3 = 362.039 (sqrt(131072))
        .word   1140850688 ; 0x44000000 = 512 (sqrt(262144))
        .word   1144325363 ; 0x443504F3 = 724.077 (sqrt(524288))
        .word   1149239296 ; 0x44800000 = 1024 (sqrt(1.04858e+06))
        .word   1152713971 ; 0x44B504F3 = 1448.15 (sqrt(2.09715e+06))
        .word   1157627904 ; 0x45000000 = 2048 (sqrt(4.1943e+06))
        .word   1161102579 ; 0x453504F3 = 2896.31 (sqrt(8.38861e+06))
        .word   1166016512 ; 0x45800000 = 4096 (sqrt(1.67772e+07))
        .word   1169491187 ; 0x45B504F3 = 5792.62 (sqrt(3.35544e+07))
        .word   1174405120 ; 0x46000000 = 8192 (sqrt(6.71089e+07))
        .word   1177879795 ; 0x463504F3 = 11585.2 (sqrt(1.34218e+08))
        .word   1182793728 ; 0x46800000 = 16384 (sqrt(2.68435e+08))
        .word   1186268403 ; 0x46B504F3 = 23170.5 (sqrt(5.36871e+08))
        .word   1191182336 ; 0x47000000 = 32768 (sqrt(1.07374e+09))
        .word   1194657011 ; 0x473504F3 = 46340.9 (sqrt(2.14748e+09))
        .word   1199570944 ; 0x47800000 = 65536 (sqrt(4.29497e+09))
        .word   1203045619 ; 0x47B504F3 = 92681.9 (sqrt(8.58993e+09))
        .word   1207959552 ; 0x48000000 = 131072 (sqrt(1.71799e+10))
        .word   1211434227 ; 0x483504F3 = 185364 (sqrt(3.43597e+10))
        .word   1216348160 ; 0x48800000 = 262144 (sqrt(6.87195e+10))
        .word   1219822835 ; 0x48B504F3 = 370728 (sqrt(1.37439e+11))
        .word   1224736768 ; 0x49000000 = 524288 (sqrt(2.74878e+11))
        .word   1228211443 ; 0x493504F3 = 741455 (sqrt(5.49756e+11))
        .word   1233125376 ; 0x49800000 = 1.04858e+06 (sqrt(1.09951e+12))
        .word   1236600051 ; 0x49B504F3 = 1.48291e+06 (sqrt(2.19902e+12))
        .word   1241513984 ; 0x4A000000 = 2.09715e+06 (sqrt(4.39805e+12))
        .word   1244988659 ; 0x4A3504F3 = 2.96582e+06 (sqrt(8.79609e+12))
        .word   1249902592 ; 0x4A800000 = 4.1943e+06 (sqrt(1.75922e+13))
        .word   1253377267 ; 0x4AB504F3 = 5.93164e+06 (sqrt(3.51844e+13))
        .word   1258291200 ; 0x4B000000 = 8.38861e+06 (sqrt(7.03687e+13))
        .word   1261765875 ; 0x4B3504F3 = 1.18633e+07 (sqrt(1.40737e+14))
        .word   1266679808 ; 0x4B800000 = 1.67772e+07 (sqrt(2.81475e+14))
        .word   1270154483 ; 0x4BB504F3 = 2.37266e+07 (sqrt(5.6295e+14))
        .word   1275068416 ; 0x4C000000 = 3.35544e+07 (sqrt(1.1259e+15))
        .word   1278543091 ; 0x4C3504F3 = 4.74531e+07 (sqrt(2.2518e+15))
        .word   1283457024 ; 0x4C800000 = 6.71089e+07 (sqrt(4.5036e+15))
        .word   1286931699 ; 0x4CB504F3 = 9.49063e+07 (sqrt(9.0072e+15))
        .word   1291845632 ; 0x4D000000 = 1.34218e+08 (sqrt(1.80144e+16))
        .word   1295320307 ; 0x4D3504F3 = 1.89813e+08 (sqrt(3.60288e+16))
        .word   1300234240 ; 0x4D800000 = 2.68435e+08 (sqrt(7.20576e+16))
        .word   1303708915 ; 0x4DB504F3 = 3.79625e+08 (sqrt(1.44115e+17))
        .word   1308622848 ; 0x4E000000 = 5.36871e+08 (sqrt(2.8823e+17))
        .word   1312097523 ; 0x4E3504F3 = 7.5925e+08 (sqrt(5.76461e+17))
        .word   1317011456 ; 0x4E800000 = 1.07374e+09 (sqrt(1.15292e+18))
        .word   1320486131 ; 0x4EB504F3 = 1.5185e+09 (sqrt(2.30584e+18))
        .word   1325400064 ; 0x4F000000 = 2.14748e+09 (sqrt(4.61169e+18))
        .word   1328874739 ; 0x4F3504F3 = 3.037e+09 (sqrt(9.22337e+18))
        .word   1333788672 ; 0x4F800000 = 4.29497e+09 (sqrt(1.84467e+19))
        .word   1337263347 ; 0x4FB504F3 = 6.074e+09 (sqrt(3.68935e+19))
        .word   1342177280 ; 0x50000000 = 8.58993e+09 (sqrt(7.3787e+19))
        .word   1345651955 ; 0x503504F3 = 1.2148e+10 (sqrt(1.47574e+20))
        .word   1350565888 ; 0x50800000 = 1.71799e+10 (sqrt(2.95148e+20))
        .word   1354040563 ; 0x50B504F3 = 2.4296e+10 (sqrt(5.90296e+20))
        .word   1358954496 ; 0x51000000 = 3.43597e+10 (sqrt(1.18059e+21))
        .word   1362429171 ; 0x513504F3 = 4.8592e+10 (sqrt(2.36118e+21))
        .word   1367343104 ; 0x51800000 = 6.87195e+10 (sqrt(4.72237e+21))
        .word   1370817779 ; 0x51B504F3 = 9.7184e+10 (sqrt(9.44473e+21))
        .word   1375731712 ; 0x52000000 = 1.37439e+11 (sqrt(1.88895e+22))
        .word   1379206387 ; 0x523504F3 = 1.94368e+11 (sqrt(3.77789e+22))
        .word   1384120320 ; 0x52800000 = 2.74878e+11 (sqrt(7.55579e+22))
        .word   1387594995 ; 0x52B504F3 = 3.88736e+11 (sqrt(1.51116e+23))
        .word   1392508928 ; 0x53000000 = 5.49756e+11 (sqrt(3.02231e+23))
        .word   1395983603 ; 0x533504F3 = 7.77472e+11 (sqrt(6.04463e+23))
        .word   1400897536 ; 0x53800000 = 1.09951e+12 (sqrt(1.20893e+24))
        .word   1404372211 ; 0x53B504F3 = 1.55494e+12 (sqrt(2.41785e+24))
        .word   1409286144 ; 0x54000000 = 2.19902e+12 (sqrt(4.8357e+24))
        .word   1412760819 ; 0x543504F3 = 3.10989e+12 (sqrt(9.67141e+24))
        .word   1417674752 ; 0x54800000 = 4.39805e+12 (sqrt(1.93428e+25))
        .word   1421149427 ; 0x54B504F3 = 6.21978e+12 (sqrt(3.86856e+25))
        .word   1426063360 ; 0x55000000 = 8.79609e+12 (sqrt(7.73713e+25))
        .word   1429538035 ; 0x553504F3 = 1.24396e+13 (sqrt(1.54743e+26))
        .word   1434451968 ; 0x55800000 = 1.75922e+13 (sqrt(3.09485e+26))
        .word   1437926643 ; 0x55B504F3 = 2.48791e+13 (sqrt(6.1897e+26))
        .word   1442840576 ; 0x56000000 = 3.51844e+13 (sqrt(1.23794e+27))
        .word   1446315251 ; 0x563504F3 = 4.97582e+13 (sqrt(2.47588e+27))
        .word   1451229184 ; 0x56800000 = 7.03687e+13 (sqrt(4.95176e+27))
        .word   1454703859 ; 0x56B504F3 = 9.95164e+13 (sqrt(9.90352e+27))
        .word   1459617792 ; 0x57000000 = 1.40737e+14 (sqrt(1.9807e+28))
        .word   1463092467 ; 0x573504F3 = 1.99033e+14 (sqrt(3.96141e+28))
        .word   1468006400 ; 0x57800000 = 2.81475e+14 (sqrt(7.92282e+28))
        .word   1471481075 ; 0x57B504F3 = 3.98066e+14 (sqrt(1.58456e+29))
        .word   1476395008 ; 0x58000000 = 5.6295e+14 (sqrt(3.16913e+29))
        .word   1479869683 ; 0x583504F3 = 7.96131e+14 (sqrt(6.33825e+29))
        .word   1484783616 ; 0x58800000 = 1.1259e+15 (sqrt(1.26765e+30))
        .word   1488258291 ; 0x58B504F3 = 1.59226e+15 (sqrt(2.5353e+30))
        .word   1493172224 ; 0x59000000 = 2.2518e+15 (sqrt(5.0706e+30))
        .word   1496646899 ; 0x593504F3 = 3.18453e+15 (sqrt(1.01412e+31))
        .word   1501560832 ; 0x59800000 = 4.5036e+15 (sqrt(2.02824e+31))
        .word   1505035507 ; 0x59B504F3 = 6.36905e+15 (sqrt(4.05648e+31))
        .word   1509949440 ; 0x5A000000 = 9.0072e+15 (sqrt(8.11296e+31))
        .word   1513424115 ; 0x5A3504F3 = 1.27381e+16 (sqrt(1.62259e+32))
        .word   1518338048 ; 0x5A800000 = 1.80144e+16 (sqrt(3.24519e+32))
        .word   1521812723 ; 0x5AB504F3 = 2.54762e+16 (sqrt(6.49037e+32))
        .word   1526726656 ; 0x5B000000 = 3.60288e+16 (sqrt(1.29807e+33))
        .word   1530201331 ; 0x5B3504F3 = 5.09524e+16 (sqrt(2.59615e+33))
        .word   1535115264 ; 0x5B800000 = 7.20576e+16 (sqrt(5.1923e+33))
        .word   1538589939 ; 0x5BB504F3 = 1.01905e+17 (sqrt(1.03846e+34))
        .word   1543503872 ; 0x5C000000 = 1.44115e+17 (sqrt(2.07692e+34))
        .word   1546978547 ; 0x5C3504F3 = 2.0381e+17 (sqrt(4.15384e+34))
        .word   1551892480 ; 0x5C800000 = 2.8823e+17 (sqrt(8.30767e+34))
        .word   1555367155 ; 0x5CB504F3 = 4.07619e+17 (sqrt(1.66153e+35))
        .word   1560281088 ; 0x5D000000 = 5.76461e+17 (sqrt(3.32307e+35))
        .word   1563755763 ; 0x5D3504F3 = 8.15239e+17 (sqrt(6.64614e+35))
        .word   1568669696 ; 0x5D800000 = 1.15292e+18 (sqrt(1.32923e+36))
        .word   1572144371 ; 0x5DB504F3 = 1.63048e+18 (sqrt(2.65846e+36))
        .word   1577058304 ; 0x5E000000 = 2.30584e+18 (sqrt(5.31691e+36))
        .word   1580532979 ; 0x5E3504F3 = 3.26095e+18 (sqrt(1.06338e+37))
        .word   1585446912 ; 0x5E800000 = 4.61169e+18 (sqrt(2.12676e+37))
        .word   1588921587 ; 0x5EB504F3 = 6.52191e+18 (sqrt(4.25353e+37))
        .word   1593835520 ; 0x5F000000 = 9.22337e+18 (sqrt(8.50706e+37))
        .word   1597310195 ; 0x5F3504F3 = 1.30438e+19 (sqrt(1.70141e+38))

.segment text

.sqrt:
        ; Doesn't honor IEEE 754; will return NaN for sqrt(-0).
        ; save registers here
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)
        fsw     fa0, -16(sp)
        fsw     fa1, -20(sp)
        fsw     fa2, -24(sp)
        fsw     fa3, -28(sp)
        fsw     fa4, -32(sp)
        fsw     fa5, -36(sp)

        flw     fa0, 0(sp)       ; load first parameter ("x"), doesn't have to be into fa0

        ; if(x < 0)
        ;     return nan;

        fmv.s.x fa1, zero   ; fa1 = 0.0
        flt.s   a0, fa0, fa1
        beq     a0, zero, .sqrtNonNegative
	lui	a1, %hi(.NaN)
	flw	fa0, %lo(.NaN)(a1)
        jal     zero, .sqrtFinish   ; goto .sqrtFinish

.sqrtNonNegative:
        feq.s   a0, fa0, fa1
        beq     a0, zero, .sqrtPositive
        fmv.s.x fa0, zero   ; fa1 = 0.0
        jal     zero, .sqrtFinish   ; goto .sqrtFinish

.sqrtPositive:
        ; use exponent to make an initial guess as if it was 1.0^2exp
        fmv.x.s a0, fa0         ; uint32_t xi = floatToInt(x);
        srli    a1, a0, 23      ; uint32_t xi23 = xi >> 23;

        ; float x0 = .sqrtTable[ex2];
        slli    a2, a1, 2                     ; a2 = byte offset of guess in sqrtTable
        lui     a0, %hi(.sqrtTable)           ; a0 = high address of sqrtTable
        add     a1, a0, a2                    ; a1 = %hi(sqrtTable) + byte offset of guess
        flw     fa1, %lo(.sqrtTable)(a1)      ; fa0 = *(%hi(sqrtTable) + %lo(sqrtTable) + byte offset of guess)

        ; Use three steps of Newton's method from
        ; https://en.wikipedia.org/wiki/Newton%27s_method#Square_root_of_a_number
        ; This gives < .1% error for the test range below.
        ; float x1 = x0 - (x0 * x0 - x) / (2 * x0);
        fmul.s  fa5, fa1, fa1   ; fa5 = x0 * x0
        fadd.s  fa4, fa1, fa1   ; fa4 = x0 * 2
        fsub.s  fa2, fa5, fa0   ; fa2 = x0 * x0 - x
        fdiv.s  fa3, fa2, fa4   ; fa3 = (x0 * x0 - x) / (2 * x0)
        fsub.s  fa1, fa1, fa3   ; fa1 = x - (x0 * x0 - x) / (2 * x0)

        ; float x2 = x1 - (x1 * x1 - x) / (2 * x1);
        fmul.s  fa5, fa1, fa1   ; fa5 = x1 * x1
        fadd.s  fa4, fa1, fa1   ; fa4 = x1 * 2
        fsub.s  fa2, fa5, fa0   ; fa2 = x1 * x1 - x
        fdiv.s  fa3, fa2, fa4   ; fa3 = (x1 * x1 - x) / (2 * x1)
        fsub.s  fa1, fa1, fa3   ; fa1 = x - (x1 * x1 - x) / (2 * x1)

        ; float x3 = x2 - (x2 * x2 - x) / (2 * x2);
        fmul.s  fa5, fa1, fa1   ; fa5 = x2 * x2
        fadd.s  fa4, fa1, fa1   ; fa4 = x2 * 2
        fsub.s  fa2, fa5, fa0   ; fa2 = x2 * x2 - x
        fdiv.s  fa3, fa2, fa4   ; fa3 = (x2 * x2 - x) / (2 * x2)
        fsub.s  fa1, fa1, fa3   ; fa1 = x - (x2 * x2 - x) / (2 * x2)

        fsgnj.s fa0, fa1, fa1   ; set fa0 to last term's result

.sqrtFinish:
        ; return result;
        fsw     fa0, 0(sp)      ; store return value

        ; restore registers here
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)
        flw     fa0, -16(sp)
        flw     fa1, -20(sp)
        flw     fa2, -24(sp)
        flw     fa3, -28(sp)
        flw     fa4, -32(sp)
        flw     fa5, -36(sp)

        jalr x0, ra, 0                

.sin:
        ; XXX this is different enough from emulation that it causes substantial visual differences between wetrock and flirt 

        ; save registers here
        sw      a0,-4(sp)
        sw      a1,-8(sp)
        sw      a2,-12(sp)
        sw      a3,-16(sp)
        sw      a4,-20(sp)
        sw      a5,-24(sp)
        fsw     fa0,-28(sp)
        fsw     fa1,-32(sp)
        fsw     fa2,-36(sp)
        fsw     fa3,-40(sp)
        fsw     fa4,-44(sp)
        fsw     fa5,-48(sp)
        fsw     fa6,-52(sp)

        flw     fa0, 0(sp)       ; load first parameter ("x"), doesn't have to be into fa0

        ; .oneOverTwoPi is 1/(2pi)
        ; .sinTableSize is 512.0
        ; .one is 1.0
        ; sinTable_f32 is 513 long

        ; fa2<u> = fa0<x> * fa1<1 / (2 * pi)>
	lui	a5,%hi(.oneOverTwoPi)
	flw	fa1,%lo(.oneOverTwoPi)(a5)
	fmul.s	fa2,fa0,fa1

        ; fa3<indexf> = fa2<u> * fa1<tablesize>
	lui	a5,%hi(.sinTableSize)
	flw	fa1,%lo(.sinTableSize)(a5)
	fmul.s	fa3,fa2,fa1

        ; a1<index> = ifloorf(fa3<indexf>)
	fcvt.w.s a1,fa3,rdn

        ; fa6<beta> = fa3<indexf> - fa4<float(index)>
        fcvt.s.w fa4,a1,rtz
	fsub.s	fa6,fa3,fa4

        ; fa4<alpha> = fa5<1.0f> - fa6<beta>
	lui	a5,%hi(.one)
	flw	fa5,%lo(.one)(a5)
        fsub.s fa4,fa5,fa6

        ; a2<lower> = a1<index> & imm<tablemask>
	andi	a2,a1,511

        ; a3<upper> = a2<lower> + imm<1>
        addi     a3,a2,1

        ; ; fa0<result> = table[a2<lower>] * fa4<alpha> + table[a3<upper>] * fa6<beta>
        ; a1 = table + a2 * 4
        lui     a5,%hi(sinTable_f32)
        addi    a5,a5,%lo(sinTable_f32)

        slli    a4,a2,2
        add    a1,a5,a4

        ; fa1 = *a1
        flw     fa1,0(a1)

        ; fa2 = *(a1 + 4)
        flw     fa2,4(a1)

        ; fa3 = fa2 * fa6
        fmul.s    fa3,fa2,fa6

        ; fa0 = fa1 * fa4 + fa0
        ; for the following, would prefer: fmadd.s   fa0,fa1,fa4,fa3
        fmul.s  fa2,fa1, fa4
        fadd.s  fa0, fa2, fa3

        ; XXX debugging - multiply by .5
	; lui	a5,%hi(.point5)
	; flw	fa1,%lo(.point5)(a5)
        ; fmul.s    fa0,fa0,fa1

        fsw     fa0, 0(sp)      ; store return value
        ; restore registers here, e.g.
        lw      a0,-4(sp)
        lw      a1,-8(sp)
        lw      a2,-12(sp)
        lw      a3,-16(sp)
        lw      a4,-20(sp)
        lw      a5,-24(sp)
        flw     fa0,-28(sp)
        flw     fa1,-32(sp)
        flw     fa2,-36(sp)
        flw     fa3,-40(sp)
        flw     fa4,-44(sp)
        flw     fa5,-48(sp)
        flw     fa6,-52(sp)

        jalr x0, ra, 0                

.segment data
.sinTableSize:
        .word   1140850688      ; 0x44000000 = 512.0
sinTable_f32:
        .word   0 ; 0x00000000 = 0.000000
        .word   1011420816 ; 0x3C490E90 = 0.012272
        .word   1019808432 ; 0x3CC90AB0 = 0.024541
        .word   1024901932 ; 0x3D16C32C = 0.036807
        .word   1028193072 ; 0x3D48FB30 = 0.049068
        .word   1031482228 ; 0x3D7B2B74 = 0.061321
        .word   1033283845 ; 0x3D96A905 = 0.073565
        .word   1034925696 ; 0x3DAFB680 = 0.085797
        .word   1036565814 ; 0x3DC8BD36 = 0.098017
        .word   1038203950 ; 0x3DE1BC2E = 0.110222
        .word   1039839859 ; 0x3DFAB273 = 0.122411
        .word   1040830342 ; 0x3E09CF86 = 0.134581
        .word   1041645699 ; 0x3E164083 = 0.146730
        .word   1042459574 ; 0x3E22ABB6 = 0.158858
        .word   1043271842 ; 0x3E2F10A2 = 0.170962
        .word   1044082383 ; 0x3E3B6ECF = 0.183040
        .word   1044891074 ; 0x3E47C5C2 = 0.195090
        .word   1045697793 ; 0x3E541501 = 0.207111
        .word   1046502419 ; 0x3E605C13 = 0.219101
        .word   1047304831 ; 0x3E6C9A7F = 0.231058
        .word   1048104908 ; 0x3E78CFCC = 0.242980
        .word   1048739264 ; 0x3E827DC0 = 0.254866
        .word   1049136787 ; 0x3E888E93 = 0.266713
        .word   1049532962 ; 0x3E8E9A22 = 0.278520
        .word   1049927729 ; 0x3E94A031 = 0.290285
        .word   1050321030 ; 0x3E9AA086 = 0.302006
        .word   1050712805 ; 0x3EA09AE5 = 0.313682
        .word   1051102994 ; 0x3EA68F12 = 0.325310
        .word   1051491540 ; 0x3EAC7CD4 = 0.336890
        .word   1051878383 ; 0x3EB263EF = 0.348419
        .word   1052263466 ; 0x3EB8442A = 0.359895
        .word   1052646730 ; 0x3EBE1D4A = 0.371317
        .word   1053028117 ; 0x3EC3EF15 = 0.382683
        .word   1053407571 ; 0x3EC9B953 = 0.393992
        .word   1053785034 ; 0x3ECF7BCA = 0.405241
        .word   1054160449 ; 0x3ED53641 = 0.416430
        .word   1054533760 ; 0x3EDAE880 = 0.427555
        .word   1054904911 ; 0x3EE0924F = 0.438616
        .word   1055273845 ; 0x3EE63375 = 0.449611
        .word   1055640507 ; 0x3EEBCBBB = 0.460539
        .word   1056004842 ; 0x3EF15AEA = 0.471397
        .word   1056366795 ; 0x3EF6E0CB = 0.482184
        .word   1056726311 ; 0x3EFC5D27 = 0.492898
        .word   1057023972 ; 0x3F00E7E4 = 0.503538
        .word   1057201213 ; 0x3F039C3D = 0.514103
        .word   1057377154 ; 0x3F064B82 = 0.524590
        .word   1057551771 ; 0x3F08F59B = 0.534998
        .word   1057725035 ; 0x3F0B9A6B = 0.545325
        .word   1057896922 ; 0x3F0E39DA = 0.555570
        .word   1058067405 ; 0x3F10D3CD = 0.565732
        .word   1058236458 ; 0x3F13682A = 0.575808
        .word   1058404057 ; 0x3F15F6D9 = 0.585798
        .word   1058570176 ; 0x3F187FC0 = 0.595699
        .word   1058734790 ; 0x3F1B02C6 = 0.605511
        .word   1058897873 ; 0x3F1D7FD1 = 0.615232
        .word   1059059403 ; 0x3F1FF6CB = 0.624860
        .word   1059219353 ; 0x3F226799 = 0.634393
        .word   1059377701 ; 0x3F24D225 = 0.643832
        .word   1059534422 ; 0x3F273656 = 0.653173
        .word   1059689493 ; 0x3F299415 = 0.662416
        .word   1059842890 ; 0x3F2BEB4A = 0.671559
        .word   1059994590 ; 0x3F2E3BDE = 0.680601
        .word   1060144571 ; 0x3F3085BB = 0.689541
        .word   1060292809 ; 0x3F32C8C9 = 0.698376
        .word   1060439283 ; 0x3F3504F3 = 0.707107
        .word   1060583971 ; 0x3F373A23 = 0.715731
        .word   1060726850 ; 0x3F396842 = 0.724247
        .word   1060867899 ; 0x3F3B8F3B = 0.732654
        .word   1061007097 ; 0x3F3DAEF9 = 0.740951
        .word   1061144423 ; 0x3F3FC767 = 0.749136
        .word   1061279856 ; 0x3F41D870 = 0.757209
        .word   1061413376 ; 0x3F43E200 = 0.765167
        .word   1061544963 ; 0x3F45E403 = 0.773010
        .word   1061674597 ; 0x3F47DE65 = 0.780737
        .word   1061802258 ; 0x3F49D112 = 0.788346
        .word   1061927928 ; 0x3F4BBBF8 = 0.795837
        .word   1062051586 ; 0x3F4D9F02 = 0.803208
        .word   1062173215 ; 0x3F4F7A1F = 0.810457
        .word   1062292797 ; 0x3F514D3D = 0.817585
        .word   1062410313 ; 0x3F531849 = 0.824589
        .word   1062525745 ; 0x3F54DB31 = 0.831470
        .word   1062639077 ; 0x3F5695E5 = 0.838225
        .word   1062750291 ; 0x3F584853 = 0.844854
        .word   1062859370 ; 0x3F59F26A = 0.851355
        .word   1062966298 ; 0x3F5B941A = 0.857729
        .word   1063071059 ; 0x3F5D2D53 = 0.863973
        .word   1063173637 ; 0x3F5EBE05 = 0.870087
        .word   1063274017 ; 0x3F604621 = 0.876070
        .word   1063372184 ; 0x3F61C598 = 0.881921
        .word   1063468122 ; 0x3F633C5A = 0.887640
        .word   1063561817 ; 0x3F64AA59 = 0.893224
        .word   1063653256 ; 0x3F660F88 = 0.898674
        .word   1063742424 ; 0x3F676BD8 = 0.903989
        .word   1063829308 ; 0x3F68BF3C = 0.909168
        .word   1063913895 ; 0x3F6A09A7 = 0.914210
        .word   1063996172 ; 0x3F6B4B0C = 0.919114
        .word   1064076126 ; 0x3F6C835E = 0.923880
        .word   1064153747 ; 0x3F6DB293 = 0.928506
        .word   1064229022 ; 0x3F6ED89E = 0.932993
        .word   1064301939 ; 0x3F6FF573 = 0.937339
        .word   1064372488 ; 0x3F710908 = 0.941544
        .word   1064440658 ; 0x3F721352 = 0.945607
        .word   1064506439 ; 0x3F731447 = 0.949528
        .word   1064569821 ; 0x3F740BDD = 0.953306
        .word   1064630795 ; 0x3F74FA0B = 0.956940
        .word   1064689350 ; 0x3F75DEC6 = 0.960431
        .word   1064745479 ; 0x3F76BA07 = 0.963776
        .word   1064799173 ; 0x3F778BC5 = 0.966976
        .word   1064850424 ; 0x3F7853F8 = 0.970031
        .word   1064899224 ; 0x3F791298 = 0.972940
        .word   1064945565 ; 0x3F79C79D = 0.975702
        .word   1064989442 ; 0x3F7A7302 = 0.978317
        .word   1065030846 ; 0x3F7B14BE = 0.980785
        .word   1065069773 ; 0x3F7BACCD = 0.983105
        .word   1065106216 ; 0x3F7C3B28 = 0.985278
        .word   1065140169 ; 0x3F7CBFC9 = 0.987301
        .word   1065171628 ; 0x3F7D3AAC = 0.989177
        .word   1065200588 ; 0x3F7DABCC = 0.990903
        .word   1065227044 ; 0x3F7E1324 = 0.992480
        .word   1065250992 ; 0x3F7E70B0 = 0.993907
        .word   1065272429 ; 0x3F7EC46D = 0.995185
        .word   1065291352 ; 0x3F7F0E58 = 0.996313
        .word   1065307757 ; 0x3F7F4E6D = 0.997290
        .word   1065321643 ; 0x3F7F84AB = 0.998118
        .word   1065333007 ; 0x3F7FB10F = 0.998795
        .word   1065341847 ; 0x3F7FD397 = 0.999322
        .word   1065348163 ; 0x3F7FEC43 = 0.999699
        .word   1065351953 ; 0x3F7FFB11 = 0.999925
        .word   1065353216 ; 0x3F800000 = 1.000000
        .word   1065351953 ; 0x3F7FFB11 = 0.999925
        .word   1065348163 ; 0x3F7FEC43 = 0.999699
        .word   1065341847 ; 0x3F7FD397 = 0.999322
        .word   1065333007 ; 0x3F7FB10F = 0.998795
        .word   1065321643 ; 0x3F7F84AB = 0.998118
        .word   1065307757 ; 0x3F7F4E6D = 0.997290
        .word   1065291352 ; 0x3F7F0E58 = 0.996313
        .word   1065272429 ; 0x3F7EC46D = 0.995185
        .word   1065250992 ; 0x3F7E70B0 = 0.993907
        .word   1065227044 ; 0x3F7E1324 = 0.992480
        .word   1065200588 ; 0x3F7DABCC = 0.990903
        .word   1065171628 ; 0x3F7D3AAC = 0.989177
        .word   1065140169 ; 0x3F7CBFC9 = 0.987301
        .word   1065106216 ; 0x3F7C3B28 = 0.985278
        .word   1065069773 ; 0x3F7BACCD = 0.983105
        .word   1065030846 ; 0x3F7B14BE = 0.980785
        .word   1064989442 ; 0x3F7A7302 = 0.978317
        .word   1064945565 ; 0x3F79C79D = 0.975702
        .word   1064899224 ; 0x3F791298 = 0.972940
        .word   1064850424 ; 0x3F7853F8 = 0.970031
        .word   1064799173 ; 0x3F778BC5 = 0.966976
        .word   1064745479 ; 0x3F76BA07 = 0.963776
        .word   1064689350 ; 0x3F75DEC6 = 0.960431
        .word   1064630795 ; 0x3F74FA0B = 0.956940
        .word   1064569821 ; 0x3F740BDD = 0.953306
        .word   1064506439 ; 0x3F731447 = 0.949528
        .word   1064440658 ; 0x3F721352 = 0.945607
        .word   1064372488 ; 0x3F710908 = 0.941544
        .word   1064301939 ; 0x3F6FF573 = 0.937339
        .word   1064229022 ; 0x3F6ED89E = 0.932993
        .word   1064153747 ; 0x3F6DB293 = 0.928506
        .word   1064076126 ; 0x3F6C835E = 0.923880
        .word   1063996172 ; 0x3F6B4B0C = 0.919114
        .word   1063913895 ; 0x3F6A09A7 = 0.914210
        .word   1063829308 ; 0x3F68BF3C = 0.909168
        .word   1063742424 ; 0x3F676BD8 = 0.903989
        .word   1063653256 ; 0x3F660F88 = 0.898674
        .word   1063561817 ; 0x3F64AA59 = 0.893224
        .word   1063468122 ; 0x3F633C5A = 0.887640
        .word   1063372184 ; 0x3F61C598 = 0.881921
        .word   1063274017 ; 0x3F604621 = 0.876070
        .word   1063173637 ; 0x3F5EBE05 = 0.870087
        .word   1063071059 ; 0x3F5D2D53 = 0.863973
        .word   1062966298 ; 0x3F5B941A = 0.857729
        .word   1062859370 ; 0x3F59F26A = 0.851355
        .word   1062750291 ; 0x3F584853 = 0.844854
        .word   1062639077 ; 0x3F5695E5 = 0.838225
        .word   1062525745 ; 0x3F54DB31 = 0.831470
        .word   1062410313 ; 0x3F531849 = 0.824589
        .word   1062292797 ; 0x3F514D3D = 0.817585
        .word   1062173215 ; 0x3F4F7A1F = 0.810457
        .word   1062051586 ; 0x3F4D9F02 = 0.803208
        .word   1061927928 ; 0x3F4BBBF8 = 0.795837
        .word   1061802258 ; 0x3F49D112 = 0.788346
        .word   1061674597 ; 0x3F47DE65 = 0.780737
        .word   1061544963 ; 0x3F45E403 = 0.773010
        .word   1061413376 ; 0x3F43E200 = 0.765167
        .word   1061279856 ; 0x3F41D870 = 0.757209
        .word   1061144423 ; 0x3F3FC767 = 0.749136
        .word   1061007097 ; 0x3F3DAEF9 = 0.740951
        .word   1060867899 ; 0x3F3B8F3B = 0.732654
        .word   1060726850 ; 0x3F396842 = 0.724247
        .word   1060583971 ; 0x3F373A23 = 0.715731
        .word   1060439283 ; 0x3F3504F3 = 0.707107
        .word   1060292809 ; 0x3F32C8C9 = 0.698376
        .word   1060144571 ; 0x3F3085BB = 0.689541
        .word   1059994590 ; 0x3F2E3BDE = 0.680601
        .word   1059842890 ; 0x3F2BEB4A = 0.671559
        .word   1059689493 ; 0x3F299415 = 0.662416
        .word   1059534422 ; 0x3F273656 = 0.653173
        .word   1059377701 ; 0x3F24D225 = 0.643832
        .word   1059219353 ; 0x3F226799 = 0.634393
        .word   1059059403 ; 0x3F1FF6CB = 0.624860
        .word   1058897873 ; 0x3F1D7FD1 = 0.615232
        .word   1058734790 ; 0x3F1B02C6 = 0.605511
        .word   1058570176 ; 0x3F187FC0 = 0.595699
        .word   1058404057 ; 0x3F15F6D9 = 0.585798
        .word   1058236458 ; 0x3F13682A = 0.575808
        .word   1058067405 ; 0x3F10D3CD = 0.565732
        .word   1057896922 ; 0x3F0E39DA = 0.555570
        .word   1057725035 ; 0x3F0B9A6B = 0.545325
        .word   1057551771 ; 0x3F08F59B = 0.534998
        .word   1057377154 ; 0x3F064B82 = 0.524590
        .word   1057201213 ; 0x3F039C3D = 0.514103
        .word   1057023972 ; 0x3F00E7E4 = 0.503538
        .word   1056726311 ; 0x3EFC5D27 = 0.492898
        .word   1056366795 ; 0x3EF6E0CB = 0.482184
        .word   1056004842 ; 0x3EF15AEA = 0.471397
        .word   1055640507 ; 0x3EEBCBBB = 0.460539
        .word   1055273845 ; 0x3EE63375 = 0.449611
        .word   1054904911 ; 0x3EE0924F = 0.438616
        .word   1054533760 ; 0x3EDAE880 = 0.427555
        .word   1054160449 ; 0x3ED53641 = 0.416430
        .word   1053785034 ; 0x3ECF7BCA = 0.405241
        .word   1053407571 ; 0x3EC9B953 = 0.393992
        .word   1053028117 ; 0x3EC3EF15 = 0.382683
        .word   1052646730 ; 0x3EBE1D4A = 0.371317
        .word   1052263466 ; 0x3EB8442A = 0.359895
        .word   1051878383 ; 0x3EB263EF = 0.348419
        .word   1051491540 ; 0x3EAC7CD4 = 0.336890
        .word   1051102994 ; 0x3EA68F12 = 0.325310
        .word   1050712805 ; 0x3EA09AE5 = 0.313682
        .word   1050321030 ; 0x3E9AA086 = 0.302006
        .word   1049927729 ; 0x3E94A031 = 0.290285
        .word   1049532962 ; 0x3E8E9A22 = 0.278520
        .word   1049136787 ; 0x3E888E93 = 0.266713
        .word   1048739264 ; 0x3E827DC0 = 0.254866
        .word   1048104908 ; 0x3E78CFCC = 0.242980
        .word   1047304831 ; 0x3E6C9A7F = 0.231058
        .word   1046502419 ; 0x3E605C13 = 0.219101
        .word   1045697793 ; 0x3E541501 = 0.207111
        .word   1044891074 ; 0x3E47C5C2 = 0.195090
        .word   1044082383 ; 0x3E3B6ECF = 0.183040
        .word   1043271842 ; 0x3E2F10A2 = 0.170962
        .word   1042459574 ; 0x3E22ABB6 = 0.158858
        .word   1041645699 ; 0x3E164083 = 0.146730
        .word   1040830342 ; 0x3E09CF86 = 0.134581
        .word   1039839859 ; 0x3DFAB273 = 0.122411
        .word   1038203950 ; 0x3DE1BC2E = 0.110222
        .word   1036565814 ; 0x3DC8BD36 = 0.098017
        .word   1034925696 ; 0x3DAFB680 = 0.085797
        .word   1033283845 ; 0x3D96A905 = 0.073565
        .word   1031482228 ; 0x3D7B2B74 = 0.061321
        .word   1028193072 ; 0x3D48FB30 = 0.049068
        .word   1024901932 ; 0x3D16C32C = 0.036807
        .word   1019808432 ; 0x3CC90AB0 = 0.024541
        .word   1011420816 ; 0x3C490E90 = 0.012272
        .word   621621554 ; 0x250D3132 = 0.000000
        .word   3158904464 ; 0xBC490E90 = -0.012272
        .word   3167292080 ; 0xBCC90AB0 = -0.024541
        .word   3172385580 ; 0xBD16C32C = -0.036807
        .word   3175676720 ; 0xBD48FB30 = -0.049068
        .word   3178965876 ; 0xBD7B2B74 = -0.061321
        .word   3180767493 ; 0xBD96A905 = -0.073565
        .word   3182409344 ; 0xBDAFB680 = -0.085797
        .word   3184049462 ; 0xBDC8BD36 = -0.098017
        .word   3185687598 ; 0xBDE1BC2E = -0.110222
        .word   3187323507 ; 0xBDFAB273 = -0.122411
        .word   3188313990 ; 0xBE09CF86 = -0.134581
        .word   3189129347 ; 0xBE164083 = -0.146730
        .word   3189943222 ; 0xBE22ABB6 = -0.158858
        .word   3190755490 ; 0xBE2F10A2 = -0.170962
        .word   3191566031 ; 0xBE3B6ECF = -0.183040
        .word   3192374722 ; 0xBE47C5C2 = -0.195090
        .word   3193181441 ; 0xBE541501 = -0.207111
        .word   3193986067 ; 0xBE605C13 = -0.219101
        .word   3194788479 ; 0xBE6C9A7F = -0.231058
        .word   3195588556 ; 0xBE78CFCC = -0.242980
        .word   3196222912 ; 0xBE827DC0 = -0.254866
        .word   3196620435 ; 0xBE888E93 = -0.266713
        .word   3197016610 ; 0xBE8E9A22 = -0.278520
        .word   3197411377 ; 0xBE94A031 = -0.290285
        .word   3197804678 ; 0xBE9AA086 = -0.302006
        .word   3198196453 ; 0xBEA09AE5 = -0.313682
        .word   3198586642 ; 0xBEA68F12 = -0.325310
        .word   3198975188 ; 0xBEAC7CD4 = -0.336890
        .word   3199362031 ; 0xBEB263EF = -0.348419
        .word   3199747114 ; 0xBEB8442A = -0.359895
        .word   3200130378 ; 0xBEBE1D4A = -0.371317
        .word   3200511765 ; 0xBEC3EF15 = -0.382683
        .word   3200891219 ; 0xBEC9B953 = -0.393992
        .word   3201268682 ; 0xBECF7BCA = -0.405241
        .word   3201644097 ; 0xBED53641 = -0.416430
        .word   3202017408 ; 0xBEDAE880 = -0.427555
        .word   3202388559 ; 0xBEE0924F = -0.438616
        .word   3202757493 ; 0xBEE63375 = -0.449611
        .word   3203124155 ; 0xBEEBCBBB = -0.460539
        .word   3203488490 ; 0xBEF15AEA = -0.471397
        .word   3203850443 ; 0xBEF6E0CB = -0.482184
        .word   3204209959 ; 0xBEFC5D27 = -0.492898
        .word   3204507620 ; 0xBF00E7E4 = -0.503538
        .word   3204684861 ; 0xBF039C3D = -0.514103
        .word   3204860802 ; 0xBF064B82 = -0.524590
        .word   3205035419 ; 0xBF08F59B = -0.534998
        .word   3205208683 ; 0xBF0B9A6B = -0.545325
        .word   3205380570 ; 0xBF0E39DA = -0.555570
        .word   3205551053 ; 0xBF10D3CD = -0.565732
        .word   3205720106 ; 0xBF13682A = -0.575808
        .word   3205887705 ; 0xBF15F6D9 = -0.585798
        .word   3206053824 ; 0xBF187FC0 = -0.595699
        .word   3206218438 ; 0xBF1B02C6 = -0.605511
        .word   3206381521 ; 0xBF1D7FD1 = -0.615232
        .word   3206543051 ; 0xBF1FF6CB = -0.624860
        .word   3206703001 ; 0xBF226799 = -0.634393
        .word   3206861349 ; 0xBF24D225 = -0.643832
        .word   3207018070 ; 0xBF273656 = -0.653173
        .word   3207173141 ; 0xBF299415 = -0.662416
        .word   3207326538 ; 0xBF2BEB4A = -0.671559
        .word   3207478238 ; 0xBF2E3BDE = -0.680601
        .word   3207628219 ; 0xBF3085BB = -0.689541
        .word   3207776457 ; 0xBF32C8C9 = -0.698376
        .word   3207922931 ; 0xBF3504F3 = -0.707107
        .word   3208067619 ; 0xBF373A23 = -0.715731
        .word   3208210498 ; 0xBF396842 = -0.724247
        .word   3208351547 ; 0xBF3B8F3B = -0.732654
        .word   3208490745 ; 0xBF3DAEF9 = -0.740951
        .word   3208628071 ; 0xBF3FC767 = -0.749136
        .word   3208763504 ; 0xBF41D870 = -0.757209
        .word   3208897024 ; 0xBF43E200 = -0.765167
        .word   3209028611 ; 0xBF45E403 = -0.773010
        .word   3209158245 ; 0xBF47DE65 = -0.780737
        .word   3209285906 ; 0xBF49D112 = -0.788346
        .word   3209411576 ; 0xBF4BBBF8 = -0.795837
        .word   3209535234 ; 0xBF4D9F02 = -0.803208
        .word   3209656863 ; 0xBF4F7A1F = -0.810457
        .word   3209776445 ; 0xBF514D3D = -0.817585
        .word   3209893961 ; 0xBF531849 = -0.824589
        .word   3210009393 ; 0xBF54DB31 = -0.831470
        .word   3210122725 ; 0xBF5695E5 = -0.838225
        .word   3210233939 ; 0xBF584853 = -0.844854
        .word   3210343018 ; 0xBF59F26A = -0.851355
        .word   3210449946 ; 0xBF5B941A = -0.857729
        .word   3210554707 ; 0xBF5D2D53 = -0.863973
        .word   3210657285 ; 0xBF5EBE05 = -0.870087
        .word   3210757665 ; 0xBF604621 = -0.876070
        .word   3210855832 ; 0xBF61C598 = -0.881921
        .word   3210951770 ; 0xBF633C5A = -0.887640
        .word   3211045465 ; 0xBF64AA59 = -0.893224
        .word   3211136904 ; 0xBF660F88 = -0.898674
        .word   3211226072 ; 0xBF676BD8 = -0.903989
        .word   3211312956 ; 0xBF68BF3C = -0.909168
        .word   3211397543 ; 0xBF6A09A7 = -0.914210
        .word   3211479820 ; 0xBF6B4B0C = -0.919114
        .word   3211559774 ; 0xBF6C835E = -0.923880
        .word   3211637395 ; 0xBF6DB293 = -0.928506
        .word   3211712670 ; 0xBF6ED89E = -0.932993
        .word   3211785587 ; 0xBF6FF573 = -0.937339
        .word   3211856136 ; 0xBF710908 = -0.941544
        .word   3211924306 ; 0xBF721352 = -0.945607
        .word   3211990087 ; 0xBF731447 = -0.949528
        .word   3212053469 ; 0xBF740BDD = -0.953306
        .word   3212114443 ; 0xBF74FA0B = -0.956940
        .word   3212172998 ; 0xBF75DEC6 = -0.960431
        .word   3212229127 ; 0xBF76BA07 = -0.963776
        .word   3212282821 ; 0xBF778BC5 = -0.966976
        .word   3212334072 ; 0xBF7853F8 = -0.970031
        .word   3212382872 ; 0xBF791298 = -0.972940
        .word   3212429213 ; 0xBF79C79D = -0.975702
        .word   3212473090 ; 0xBF7A7302 = -0.978317
        .word   3212514494 ; 0xBF7B14BE = -0.980785
        .word   3212553421 ; 0xBF7BACCD = -0.983105
        .word   3212589864 ; 0xBF7C3B28 = -0.985278
        .word   3212623817 ; 0xBF7CBFC9 = -0.987301
        .word   3212655276 ; 0xBF7D3AAC = -0.989177
        .word   3212684236 ; 0xBF7DABCC = -0.990903
        .word   3212710692 ; 0xBF7E1324 = -0.992480
        .word   3212734640 ; 0xBF7E70B0 = -0.993907
        .word   3212756077 ; 0xBF7EC46D = -0.995185
        .word   3212775000 ; 0xBF7F0E58 = -0.996313
        .word   3212791405 ; 0xBF7F4E6D = -0.997290
        .word   3212805291 ; 0xBF7F84AB = -0.998118
        .word   3212816655 ; 0xBF7FB10F = -0.998795
        .word   3212825495 ; 0xBF7FD397 = -0.999322
        .word   3212831811 ; 0xBF7FEC43 = -0.999699
        .word   3212835601 ; 0xBF7FFB11 = -0.999925
        .word   3212836864 ; 0xBF800000 = -1.000000
        .word   3212835601 ; 0xBF7FFB11 = -0.999925
        .word   3212831811 ; 0xBF7FEC43 = -0.999699
        .word   3212825495 ; 0xBF7FD397 = -0.999322
        .word   3212816655 ; 0xBF7FB10F = -0.998795
        .word   3212805291 ; 0xBF7F84AB = -0.998118
        .word   3212791405 ; 0xBF7F4E6D = -0.997290
        .word   3212775000 ; 0xBF7F0E58 = -0.996313
        .word   3212756077 ; 0xBF7EC46D = -0.995185
        .word   3212734640 ; 0xBF7E70B0 = -0.993907
        .word   3212710692 ; 0xBF7E1324 = -0.992480
        .word   3212684236 ; 0xBF7DABCC = -0.990903
        .word   3212655276 ; 0xBF7D3AAC = -0.989177
        .word   3212623817 ; 0xBF7CBFC9 = -0.987301
        .word   3212589864 ; 0xBF7C3B28 = -0.985278
        .word   3212553421 ; 0xBF7BACCD = -0.983105
        .word   3212514494 ; 0xBF7B14BE = -0.980785
        .word   3212473090 ; 0xBF7A7302 = -0.978317
        .word   3212429213 ; 0xBF79C79D = -0.975702
        .word   3212382872 ; 0xBF791298 = -0.972940
        .word   3212334072 ; 0xBF7853F8 = -0.970031
        .word   3212282821 ; 0xBF778BC5 = -0.966976
        .word   3212229127 ; 0xBF76BA07 = -0.963776
        .word   3212172998 ; 0xBF75DEC6 = -0.960431
        .word   3212114443 ; 0xBF74FA0B = -0.956940
        .word   3212053469 ; 0xBF740BDD = -0.953306
        .word   3211990087 ; 0xBF731447 = -0.949528
        .word   3211924306 ; 0xBF721352 = -0.945607
        .word   3211856136 ; 0xBF710908 = -0.941544
        .word   3211785587 ; 0xBF6FF573 = -0.937339
        .word   3211712670 ; 0xBF6ED89E = -0.932993
        .word   3211637395 ; 0xBF6DB293 = -0.928506
        .word   3211559774 ; 0xBF6C835E = -0.923880
        .word   3211479820 ; 0xBF6B4B0C = -0.919114
        .word   3211397543 ; 0xBF6A09A7 = -0.914210
        .word   3211312956 ; 0xBF68BF3C = -0.909168
        .word   3211226072 ; 0xBF676BD8 = -0.903989
        .word   3211136904 ; 0xBF660F88 = -0.898674
        .word   3211045465 ; 0xBF64AA59 = -0.893224
        .word   3210951770 ; 0xBF633C5A = -0.887640
        .word   3210855832 ; 0xBF61C598 = -0.881921
        .word   3210757665 ; 0xBF604621 = -0.876070
        .word   3210657285 ; 0xBF5EBE05 = -0.870087
        .word   3210554707 ; 0xBF5D2D53 = -0.863973
        .word   3210449946 ; 0xBF5B941A = -0.857729
        .word   3210343018 ; 0xBF59F26A = -0.851355
        .word   3210233939 ; 0xBF584853 = -0.844854
        .word   3210122725 ; 0xBF5695E5 = -0.838225
        .word   3210009393 ; 0xBF54DB31 = -0.831470
        .word   3209893961 ; 0xBF531849 = -0.824589
        .word   3209776445 ; 0xBF514D3D = -0.817585
        .word   3209656863 ; 0xBF4F7A1F = -0.810457
        .word   3209535234 ; 0xBF4D9F02 = -0.803208
        .word   3209411576 ; 0xBF4BBBF8 = -0.795837
        .word   3209285906 ; 0xBF49D112 = -0.788346
        .word   3209158245 ; 0xBF47DE65 = -0.780737
        .word   3209028611 ; 0xBF45E403 = -0.773010
        .word   3208897024 ; 0xBF43E200 = -0.765167
        .word   3208763504 ; 0xBF41D870 = -0.757209
        .word   3208628071 ; 0xBF3FC767 = -0.749136
        .word   3208490745 ; 0xBF3DAEF9 = -0.740951
        .word   3208351547 ; 0xBF3B8F3B = -0.732654
        .word   3208210498 ; 0xBF396842 = -0.724247
        .word   3208067619 ; 0xBF373A23 = -0.715731
        .word   3207922931 ; 0xBF3504F3 = -0.707107
        .word   3207776457 ; 0xBF32C8C9 = -0.698376
        .word   3207628219 ; 0xBF3085BB = -0.689541
        .word   3207478238 ; 0xBF2E3BDE = -0.680601
        .word   3207326538 ; 0xBF2BEB4A = -0.671559
        .word   3207173141 ; 0xBF299415 = -0.662416
        .word   3207018070 ; 0xBF273656 = -0.653173
        .word   3206861349 ; 0xBF24D225 = -0.643832
        .word   3206703001 ; 0xBF226799 = -0.634393
        .word   3206543051 ; 0xBF1FF6CB = -0.624860
        .word   3206381521 ; 0xBF1D7FD1 = -0.615232
        .word   3206218438 ; 0xBF1B02C6 = -0.605511
        .word   3206053824 ; 0xBF187FC0 = -0.595699
        .word   3205887705 ; 0xBF15F6D9 = -0.585798
        .word   3205720106 ; 0xBF13682A = -0.575808
        .word   3205551053 ; 0xBF10D3CD = -0.565732
        .word   3205380570 ; 0xBF0E39DA = -0.555570
        .word   3205208683 ; 0xBF0B9A6B = -0.545325
        .word   3205035419 ; 0xBF08F59B = -0.534998
        .word   3204860802 ; 0xBF064B82 = -0.524590
        .word   3204684861 ; 0xBF039C3D = -0.514103
        .word   3204507620 ; 0xBF00E7E4 = -0.503538
        .word   3204209959 ; 0xBEFC5D27 = -0.492898
        .word   3203850443 ; 0xBEF6E0CB = -0.482184
        .word   3203488490 ; 0xBEF15AEA = -0.471397
        .word   3203124155 ; 0xBEEBCBBB = -0.460539
        .word   3202757493 ; 0xBEE63375 = -0.449611
        .word   3202388559 ; 0xBEE0924F = -0.438616
        .word   3202017408 ; 0xBEDAE880 = -0.427555
        .word   3201644097 ; 0xBED53641 = -0.416430
        .word   3201268682 ; 0xBECF7BCA = -0.405241
        .word   3200891219 ; 0xBEC9B953 = -0.393992
        .word   3200511765 ; 0xBEC3EF15 = -0.382683
        .word   3200130378 ; 0xBEBE1D4A = -0.371317
        .word   3199747114 ; 0xBEB8442A = -0.359895
        .word   3199362031 ; 0xBEB263EF = -0.348419
        .word   3198975188 ; 0xBEAC7CD4 = -0.336890
        .word   3198586642 ; 0xBEA68F12 = -0.325310
        .word   3198196453 ; 0xBEA09AE5 = -0.313682
        .word   3197804678 ; 0xBE9AA086 = -0.302006
        .word   3197411377 ; 0xBE94A031 = -0.290285
        .word   3197016610 ; 0xBE8E9A22 = -0.278520
        .word   3196620435 ; 0xBE888E93 = -0.266713
        .word   3196222912 ; 0xBE827DC0 = -0.254866
        .word   3195588556 ; 0xBE78CFCC = -0.242980
        .word   3194788479 ; 0xBE6C9A7F = -0.231058
        .word   3193986067 ; 0xBE605C13 = -0.219101
        .word   3193181441 ; 0xBE541501 = -0.207111
        .word   3192374722 ; 0xBE47C5C2 = -0.195090
        .word   3191566031 ; 0xBE3B6ECF = -0.183040
        .word   3190755490 ; 0xBE2F10A2 = -0.170962
        .word   3189943222 ; 0xBE22ABB6 = -0.158858
        .word   3189129347 ; 0xBE164083 = -0.146730
        .word   3188313990 ; 0xBE09CF86 = -0.134581
        .word   3187323507 ; 0xBDFAB273 = -0.122411
        .word   3185687598 ; 0xBDE1BC2E = -0.110222
        .word   3184049462 ; 0xBDC8BD36 = -0.098017
        .word   3182409344 ; 0xBDAFB680 = -0.085797
        .word   3180767493 ; 0xBD96A905 = -0.073565
        .word   3178965876 ; 0xBD7B2B74 = -0.061321
        .word   3175676720 ; 0xBD48FB30 = -0.049068
        .word   3172385580 ; 0xBD16C32C = -0.036807
        .word   3167292080 ; 0xBCC90AB0 = -0.024541
        .word   3158904464 ; 0xBC490E90 = -0.012272
        .word   2777493810 ; 0xA58D3132 = -0.000000

.atanTableSize:
        .word   1124073472      ; 0x43000000 = 128.0

atanTable_f32:
        .word   0 ; 0x00000000 = 0.000000
        .word   1006632619 ; 0x3BFFFEAB = 0.007812
        .word   1015020203 ; 0x3C7FFAAB = 0.015624
        .word   1019213569 ; 0x3CBFF701 = 0.023433
        .word   1023404718 ; 0x3CFFEAAE = 0.031240
        .word   1025502000 ; 0x3D1FEB30 = 0.039043
        .word   1027595276 ; 0x3D3FDC0C = 0.046841
        .word   1029687024 ; 0x3D5FC6F0 = 0.054633
        .word   1031776990 ; 0x3D7FAADE = 0.062419
        .word   1032831854 ; 0x3D8FC36E = 0.070197
        .word   1033874681 ; 0x3D9FACF9 = 0.077967
        .word   1034916243 ; 0x3DAF9193 = 0.085727
        .word   1035956417 ; 0x3DBF70C1 = 0.093477
        .word   1036995083 ; 0x3DCF4A0B = 0.101215
        .word   1038032118 ; 0x3DDF1CF6 = 0.108942
        .word   1039067404 ; 0x3DEEE90C = 0.116655
        .word   1040100821 ; 0x3DFEADD5 = 0.124355
        .word   1040659823 ; 0x3E07356F = 0.132040
        .word   1041174488 ; 0x3E0F0FD8 = 0.139709
        .word   1041688046 ; 0x3E16E5EE = 0.147361
        .word   1042200439 ; 0x3E1EB777 = 0.154997
        .word   1042711613 ; 0x3E26843D = 0.162614
        .word   1043221513 ; 0x3E2E4C09 = 0.170212
        .word   1043730084 ; 0x3E360EA4 = 0.177790
        .word   1044237274 ; 0x3E3DCBDA = 0.185348
        .word   1044743031 ; 0x3E458377 = 0.192884
        .word   1045247303 ; 0x3E4D3547 = 0.200399
        .word   1045750041 ; 0x3E54E119 = 0.207890
        .word   1046251195 ; 0x3E5C86BB = 0.215358
        .word   1046750716 ; 0x3E6425FC = 0.222801
        .word   1047248559 ; 0x3E6BBEAF = 0.230220
        .word   1047744676 ; 0x3E7350A4 = 0.237612
        .word   1048239024 ; 0x3E7ADBB0 = 0.244979
        .word   1048653778 ; 0x3E812FD2 = 0.252318
        .word   1048899117 ; 0x3E84EE2D = 0.259630
        .word   1049143506 ; 0x3E88A8D2 = 0.266913
        .word   1049386925 ; 0x3E8C5FAD = 0.274167
        .word   1049629355 ; 0x3E9012AB = 0.281392
        .word   1049870777 ; 0x3E93C1B9 = 0.288587
        .word   1050111172 ; 0x3E976CC4 = 0.295752
        .word   1050350522 ; 0x3E9B13BA = 0.302885
        .word   1050588809 ; 0x3E9EB689 = 0.309986
        .word   1050826018 ; 0x3EA25522 = 0.317056
        .word   1051062131 ; 0x3EA5EF73 = 0.324092
        .word   1051297133 ; 0x3EA9856D = 0.331096
        .word   1051531009 ; 0x3EAD1701 = 0.338066
        .word   1051763744 ; 0x3EB0A420 = 0.345002
        .word   1051995325 ; 0x3EB42CBD = 0.351904
        .word   1052225738 ; 0x3EB7B0CA = 0.358771
        .word   1052454970 ; 0x3EBB303A = 0.365602
        .word   1052683010 ; 0x3EBEAB02 = 0.372398
        .word   1052909846 ; 0x3EC22116 = 0.379159
        .word   1053135466 ; 0x3EC5926A = 0.385883
        .word   1053359860 ; 0x3EC8FEF4 = 0.392570
        .word   1053583018 ; 0x3ECC66AA = 0.399221
        .word   1053804931 ; 0x3ECFC983 = 0.405834
        .word   1054025590 ; 0x3ED32776 = 0.412410
        .word   1054244987 ; 0x3ED6807B = 0.418949
        .word   1054463113 ; 0x3ED9D489 = 0.425450
        .word   1054679962 ; 0x3EDD239A = 0.431912
        .word   1054895526 ; 0x3EE06DA6 = 0.438337
        .word   1055109801 ; 0x3EE3B2A9 = 0.444722
        .word   1055322778 ; 0x3EE6F29A = 0.451070
        .word   1055534455 ; 0x3EEA2D77 = 0.457378
        .word   1055744824 ; 0x3EED6338 = 0.463648
        .word   1055953884 ; 0x3EF093DC = 0.469878
        .word   1056161628 ; 0x3EF3BF5C = 0.476069
        .word   1056368055 ; 0x3EF6E5B7 = 0.482221
        .word   1056573160 ; 0x3EFA06E8 = 0.488334
        .word   1056776943 ; 0x3EFD22EF = 0.494407
        .word   1056972004 ; 0x3F001CE4 = 0.500441
        .word   1057072568 ; 0x3F01A5B8 = 0.506435
        .word   1057172469 ; 0x3F032BF5 = 0.512389
        .word   1057271704 ; 0x3F04AF98 = 0.518304
        .word   1057370275 ; 0x3F0630A3 = 0.524180
        .word   1057468180 ; 0x3F07AF14 = 0.530015
        .word   1057565421 ; 0x3F092AED = 0.535811
        .word   1057661997 ; 0x3F0AA42D = 0.541568
        .word   1057757908 ; 0x3F0C1AD4 = 0.547284
        .word   1057853156 ; 0x3F0D8EE4 = 0.552962
        .word   1057947741 ; 0x3F0F005D = 0.558599
        .word   1058041664 ; 0x3F106F40 = 0.564198
        .word   1058134927 ; 0x3F11DB8F = 0.569756
        .word   1058227530 ; 0x3F13454A = 0.575276
        .word   1058319475 ; 0x3F14AC73 = 0.580756
        .word   1058410763 ; 0x3F16110B = 0.586198
        .word   1058501396 ; 0x3F177314 = 0.591600
        .word   1058591376 ; 0x3F18D290 = 0.596963
        .word   1058680705 ; 0x3F1A2F81 = 0.602287
        .word   1058769384 ; 0x3F1B89E8 = 0.607573
        .word   1058857417 ; 0x3F1CE1C9 = 0.612820
        .word   1058944805 ; 0x3F1E3725 = 0.618029
        .word   1059031550 ; 0x3F1F89FE = 0.623199
        .word   1059117655 ; 0x3F20DA57 = 0.628332
        .word   1059203123 ; 0x3F222833 = 0.633426
        .word   1059287956 ; 0x3F237394 = 0.638482
        .word   1059372157 ; 0x3F24BC7D = 0.643501
        .word   1059455729 ; 0x3F2602F1 = 0.648482
        .word   1059538675 ; 0x3F2746F3 = 0.653426
        .word   1059620998 ; 0x3F288886 = 0.658333
        .word   1059702700 ; 0x3F29C7AC = 0.663203
        .word   1059783785 ; 0x3F2B0469 = 0.668036
        .word   1059864257 ; 0x3F2C3EC1 = 0.672833
        .word   1059944118 ; 0x3F2D76B6 = 0.677593
        .word   1060023372 ; 0x3F2EAC4C = 0.682317
        .word   1060102022 ; 0x3F2FDF86 = 0.687004
        .word   1060180072 ; 0x3F311068 = 0.691657
        .word   1060257526 ; 0x3F323EF6 = 0.696273
        .word   1060334386 ; 0x3F336B32 = 0.700854
        .word   1060410656 ; 0x3F349520 = 0.705400
        .word   1060486340 ; 0x3F35BCC4 = 0.709912
        .word   1060561442 ; 0x3F36E222 = 0.714388
        .word   1060635966 ; 0x3F38053E = 0.718830
        .word   1060709915 ; 0x3F39261B = 0.723238
        .word   1060783292 ; 0x3F3A44BC = 0.727611
        .word   1060856103 ; 0x3F3B6127 = 0.731951
        .word   1060928350 ; 0x3F3C7B5E = 0.736257
        .word   1061000037 ; 0x3F3D9365 = 0.740530
        .word   1061071169 ; 0x3F3EA941 = 0.744770
        .word   1061141750 ; 0x3F3FBCF6 = 0.748977
        .word   1061211782 ; 0x3F40CE86 = 0.753151
        .word   1061281270 ; 0x3F41DDF6 = 0.757293
        .word   1061350219 ; 0x3F42EB4B = 0.761403
        .word   1061418631 ; 0x3F43F687 = 0.765480
        .word   1061486512 ; 0x3F44FFB0 = 0.769526
        .word   1061553864 ; 0x3F4606C8 = 0.773541
        .word   1061620693 ; 0x3F470BD5 = 0.777524
        .word   1061687002 ; 0x3F480EDA = 0.781477
        .word   1061752795 ; 0x3F490FDB = 0.785398

.segment text
.atan_0_1:

        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)
        fsw     fa2, -12(sp)
        fsw     fa3, -16(sp)
        fsw     fa4, -20(sp)
        fsw     fa5, -24(sp)
        sw     a0, -28(sp)
        sw     a1, -32(sp)
        sw     a2, -36(sp)

        ; atan_0_1(float z) { }
        flw     fa0, 0(sp)              ; fa0 = z

        ; int i = z * TABLE_POW2;
	lui	a1,%hi(.atanTableSize)  ; a1 = hi part of address of TABLE_POW2
	flw	fa1,%lo(.atanTableSize)(a1)      ; fa1 = TABLE_POW2
        ; a1 is available after this line
        fmul.s    fa2, fa0, fa1         ; fa2 = z * TABLE_POW2
	fcvt.w.s        a0,fa2,rdn      ; a0 = ifloor(z * TABLE_POW2)
        ; fa1 is available after this line
        ; fa0 is available after this line

        ; float a = z * TABLE_POW2 - i;
        ; fa3 = a
        fcvt.s.w fa0,a0,rne             ; fa0 = float(a0)
        fsub.s fa3,fa2,fa0            ; fa3 = z * TABLE_POW2 - float(floori(z * TABLE_POW2))
        ; fa0 is available after this line
        ; fa2 is available after this line

        ; float lower = atanTable[i];
        lui     a1,%hi(atanTable_f32)   ; a1 = hi part of address of atanTable
        addi    a2,a1,%lo(atanTable_f32); a2 = atanTable
        ; a1 is available after this line

        slli    a1, a0, 2               ; a1 = ifloor(z * TABLE_POW2) * 4
        ; a0 is available after this line
        add     a0, a1, a2              ; a0 = ifloor(z * TABLE_POW2) * 4 + atanTable
        ; a1 is available after this line
        flw     fa4, 0(a0)              ; fa4 = lower = atanTable[z * TABLE_POW2]
        ; float higher = atanTable[i + 1];
        flw     fa5, 4(a0)              ; fa5 = higher = atanTable[z * TABLE_POW2 + 1]
        ; a0 is available after this line

        ; float f = lower * (1 - a) + higher * a;
	lui	a0,%hi(.one)            ; a0 = hi part of .one
	flw	fa0,%lo(.one)(a0)       ; fa0 = 1.0
        fsub.s  fa1,fa0,fa3             ; fa1 = 1.0 - a
        fmul.s  fa0,fa4,fa1             ; fa0 = lower * (1.0 - a)

        ; for the following, would prefer: fmadd.s fa1,fa5,fa3,fa0
        fmul.s  fa2, fa5, fa3 ; fa1 = higher * a + lower * (1.0 - a)
        fadd.s  fa1, fa2, fa0

        ; return f;
        fsw     fa1, 0(sp)

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)
        flw     fa2, -12(sp)
        flw     fa3, -16(sp)
        flw     fa4, -20(sp)
        flw     fa5, -24(sp)
        lw     a0, -28(sp)
        lw     a1, -32(sp)
        lw     a2, -36(sp)

        jalr x0, ra, 0

.atan:
        ; save registers
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        fsw     fa0, -12(sp)
        fsw     fa1, -16(sp)
        fsw     fa2, -20(sp)
        fsw     fa3, -24(sp)
        fsw     fa4, -28(sp)
        fsw     fa5, -32(sp)
        fsw     fa6, -36(sp)

        ; load parameter
        ; begin using fa0
        flw     fa0, 0(sp)      ; float atan(float y_x) {}

        addi    sp,sp,-32        ; push saved registers

        ; begin using fa2
        fsgnjx.s fa2, fa0, fa0     ; float fa2 = fabs_y_x = fabs(y_x)

        ; if(fabsf(y_x) > 1.0) {
	lui	a0,%hi(.one)
	flw	fa1,%lo(.one)(a0)       ; fa1 = 1.0
        ; begin using a1
        fle.s   a1,fa2,fa1              ; a1 = (fabs_y_x <= 1.0)
        bne     a1,zero,.atan_small_y_x ; if(fabs_y_x <= 1.0) goto atan_small_y_x
        ; a1 is available after this line

        ;     return copysign(M_PI / 2.0, y_x) + -copysign(brad_atan_0_1(1.0 / fabs(y_x)), y_x);
        ; begin using fa3
        fdiv.s  fa3, fa1, fa2

        addi    sp, sp, -8      ; Make room on stack
        sw      ra, 4(sp)       ; Save return address
        fsw     fa3, 0(sp)      ; Store parameter
        ; fa3 is available after this line

        jal     ra, .atan_0_1   

        ; begin using fa3
        flw     fa3, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 8       ; Restore stack

	lui	a0,%hi(.halfPi)
        ; begin using fa4
	flw	fa4,%lo(.halfPi)(a0)
        ; begin using fa5
        fsgnj.s   fa5, fa4, fa0
        ; fa4 is available after this line

        ; begin using fa6
        fsgnjn.s fa6, fa3, fa0
        ; fa3 is available after this line

        ; begin using fa4
        fadd.s  fa4, fa5, fa6
        ; fa6 is available after this line
        ; fa5 is available after this line

        jal zero, .atan_finish   ; goto .atan_finish

.atan_small_y_x: ; } else {

        addi    sp, sp, -8      ; Make room on stack
        sw      ra, 4(sp)       ; Save return address
        fsw     fa2, 0(sp)      ; Store parameter
        ; fa2 is available after this line

        jal     ra, .atan_0_1   

        ; begin using fa2
        flw     fa2, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 8       ; Restore stack

        ; begin using fa4
        fsgnj.s   fa4, fa2, fa0
        ; fa2 is available after this line
        ; fa0 is available after this line
        
.atan_finish:

        addi    sp,sp,32        ; pop saved registers

        ; store return value
        fsw     fa4, 0(sp)
        ; fa4 is available after this line

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        flw     fa0, -12(sp)
        flw     fa1, -16(sp)
        flw     fa2, -20(sp)
        flw     fa3, -24(sp)
        flw     fa4, -28(sp)
        flw     fa5, -32(sp)
        flw     fa6, -36(sp)

        ; return
        jalr x0, ra, 0

.reflect1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.reflect2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.reflect3:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.reflect4:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.pow:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.max:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.min:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.clamp:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.mix:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.smoothstep:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.normalize1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.normalize2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.normalize3:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.normalize4:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.cos:
        ; cos(x) = sin(x + pi / 2), so copy .sin and add 1/4 in the middle after x has been
        ; normalized.
        ; Making .cos a wrapper around .sin adding pi/2 to the parameter made .cos 12 insns
        ; longer than .sin and added 12 insn words to the library.
        ; Copying .sin and adding pi/2 in the middle makes .cos 2 insns longer and adds 57 words
        ; to the library, so make a judgement call that adding 46 more words but only making
        ; .cos 3.6% slower and completely removing the cosine table is a good tradeoff.

        sw      a0,-4(sp)
        sw      a1,-8(sp)
        sw      a2,-12(sp)
        sw      a3,-16(sp)
        sw      a4,-20(sp)
        sw      a5,-24(sp)
        fsw     fa0,-28(sp)
        fsw     fa1,-32(sp)
        fsw     fa2,-36(sp)
        fsw     fa3,-40(sp)
        fsw     fa4,-44(sp)
        fsw     fa5,-48(sp)
        fsw     fa6,-52(sp)

        flw     fa0, 0(sp)       ; load first parameter ("x"), doesn't have to be into fa0

        ; .oneOverTwoPi is 1/(2pi)
        ; .sinTableSize is 512.0
        ; .one is 1.0
        ; sinTable_f32 is 513 long

        ; accomplish adding pi / 2 by adding 1/4 to the normalized angle in the fmadd below
	lui	a5,%hi(.point25)
	flw	fa3,%lo(.point25)(a5)

        ; fa2<u> = fa0<x> * fa1<1 / (2 * pi)> + fa3(1/4)
	lui	a5,%hi(.oneOverTwoPi)
	flw	fa1,%lo(.oneOverTwoPi)(a5)

        ; for the following, would prefer: fmadd.s   fa2,fa0,fa1,fa3
        fmul.s  fa4, fa0, fa1
        fadd.s  fa2, fa4, fa3

        ; fa3<indexf> = fa2<u> * fa1<tablesize>
	lui	a5,%hi(.sinTableSize)
	flw	fa1,%lo(.sinTableSize)(a5)
	fmul.s	fa3,fa2,fa1

        ; a1<index> = ifloorf(fa3<indexf>)
	fcvt.w.s a1,fa3,rdn

        ; fa6<beta> = fa3<indexf> - fa4<float(index)>
        fcvt.s.w fa4,a1,rtz
	fsub.s	fa6,fa3,fa4

        ; fa4<alpha> = fa5<1.0f> - fa6<beta>
	lui	a5,%hi(.one)
	flw	fa5,%lo(.one)(a5)
        fsub.s fa4,fa5,fa6

        ; a2<lower> = a1<index> & imm<tablemask>
	andi	a2,a1,511

        ; a3<upper> = a2<lower> + imm<1>
        addi     a3,a2,1

        ; fa0<result> = table[a2<lower>] * fa4<alpha> + table[a3<upper>] * fa6<beta>
        ; a1 = table + a2 * 4
        lui     a5,%hi(sinTable_f32)
        addi    a5,a5,%lo(sinTable_f32)

        slli    a4,a2,2
        add    a1,a5,a4

        ; fa1 = *a1
        flw     fa1,0(a1)

        ; a4 = table + a3 * 4
        lui     a5,%hi(sinTable_f32)
        addi    a5,a5,%lo(sinTable_f32)
        slli    a1,a3,2
        add    a4,a5,a1

        ; fa2 = *a4
        flw     fa2,0(a4)

        ; fa3 = fa2 * fa6
        fmul.s    fa3,fa2,fa6

        ; fa0 = fa1 * fa4 + fa0
        ; for the following, would prefer: fmadd.s   fa0,fa1,fa4,fa3
        fmul.s  fa2, fa1, fa4
        fadd.s  fa0, fa2, fa3

        ; XXX debugging - multiply by .5
	; lui	a5,%hi(.point5)
	; flw	fa1,%lo(.point5)(a5)
        ; fmul.s    fa0,fa0,fa1

        fsw     fa0, 0(sp)      ; store return value
        ; restore registers here, e.g.
        lw      a0,-4(sp)
        lw      a1,-8(sp)
        lw      a2,-12(sp)
        lw      a3,-16(sp)
        lw      a4,-20(sp)
        lw      a5,-24(sp)
        flw     fa0,-28(sp)
        flw     fa1,-32(sp)
        flw     fa2,-36(sp)
        flw     fa3,-40(sp)
        flw     fa4,-44(sp)
        flw     fa5,-48(sp)
        flw     fa6,-52(sp)

        jalr x0, ra, 0                


.log2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.exp:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.mod:
        ; save registers
        fsw     fa0,-4(sp)
        fsw     fa1,-8(sp)
        fsw     fa2,-12(sp)
        fsw     fa3,-16(sp)
        fsw     fa4,-20(sp)
        sw     a0,-24(sp)

        flw     fa0, 0(sp)              ; fa0 = x = popf()
        flw     fa1, 4(sp)              ; fa1 = y = popf()
        fdiv.s  fa2, fa0, fa1, rdn      ; fa2 = t1 = x/y;
	fcvt.w.s a0,fa2,rdn             ; a0 = i = floori(t1)
        fcvt.s.w fa4,a0,rne             ; fa4 = q = floorf(i)
        fmul.s  fa3, fa4, fa1           ; fa3 = t2 = q*y
        fsub.s  fa1, fa0, fa3           ; fa1 = r = x - t2 = x - q*y

        fsw     fa1, 4(sp)             ; pushf(r)

        ; restore registers
        flw     fa0,-4(sp)
        flw     fa1,-8(sp)
        flw     fa2,-12(sp)
        flw     fa3,-16(sp)
        flw     fa4,-20(sp)
        lw     a0,-24(sp)

        ; set stack pointer as if pops and pushes had occured
        addi    sp, sp, 4

        jalr x0, ra, 0

.inversesqrt:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.asin:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.length1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.length2:
        ; save registers
        fsw     fa0,-4(sp)
        fsw     fa1,-8(sp)
        fsw     fa2,-12(sp)
        fsw     fa3,-16(sp)

        flw     fa0, 0(sp)              ; fa0 = x = popf()
        fmul.s  fa1, fa0, fa0           ; fa1 = x * x
        flw     fa3, 4(sp)              ; fa3 = y = popf()

        ; for the following, would prefer: fmadd.s fa2, fa3, fa3, fa1
        fmul.s  fa0, fa3, fa3; ; fa2 = x * x + y * y
        fadd.s  fa2, fa0, fa1

        ; fsqrt.s fa0, fa2                ; fa0 = d = sqrtf(x * x + y * y)
        ; begin call to sqrt in place of fsqrt.s instruction
        addi    sp, sp, -28      ; Make room on stack (20 saved for this frame plus need 8 for next frame)
        sw      ra, 4(sp)       ; Save return address
        fsw     fa2, 0(sp)      ; Store parameter

        jal     ra, .sqrt   

        flw     fa0, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 28       ; Restore stack
        ; end of call to sqrt

        fsw     fa0, 4(sp)             ; pushf(d) 

        ; restore registers
        flw     fa0,-4(sp)
        flw     fa1,-8(sp)
        flw     fa2,-12(sp)
        flw     fa3,-16(sp)

        ; set stack pointer as if pops and pushes had occured
        addi    sp, sp, 4

        jalr x0, ra, 0

.length3:
        ; save registers
        fsw     fa0,-4(sp)
        fsw     fa1,-8(sp)
        fsw     fa2,-12(sp)
        fsw     fa3,-16(sp)

        flw     fa0, 0(sp)              ; fa0 = x = popf()
        fmul.s  fa1, fa0, fa0           ; fa1 = x * x
        flw     fa3, 4(sp)              ; fa3 = y = popf()

        ; for the following, would prefer: fmadd.s fa2, fa3, fa3, fa1
        fmul.s  fa0, fa3, fa3 ; fa2 = x * x + y * y
        fadd.s  fa2, fa0, fa1

        flw     fa0, 8(sp)              ; fa0 = z = popf()

        ; for the following, would prefer: fmadd.s fa1, fa0, fa0, fa2
        fmul.s  fa3, fa0, fa0 ; fa1 = x * x + y * y + z * z
        fadd.s  fa1, fa3, fa2

        ; fsqrt.s fa3, fa1                ; fa0 = d = sqrtf(x * x + y * y + z * z)
        ; begin call to sqrt in place of fsqrt.s instruction
        addi    sp, sp, -28      ; Make room on stack (20 saved for this frame plus need 8 for next frame)
        sw      ra, 4(sp)       ; Save return address
        fsw     fa1, 0(sp)      ; Store parameter

        jal     ra, .sqrt   

        flw     fa3, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 28       ; Restore stack
        ; end of call to sqrt

        fsw     fa3, 8(sp)             ; pushf(d) 

        ; restore registers
        flw     fa0,-4(sp)
        flw     fa1,-8(sp)
        flw     fa2,-12(sp)
        flw     fa3,-16(sp)

        ; set stack pointer as if pops and pushes had occured
        addi    sp, sp, 8

        jalr x0, ra, 0

.length4:
        ; save registers
        fsw     fa0,-4(sp)
        fsw     fa1,-8(sp)
        fsw     fa2,-12(sp)
        fsw     fa3,-16(sp)

        flw     fa0, 0(sp)              ; fa0 = x = popf()
        fmul.s  fa1, fa0, fa0           ; fa1 = x * x
        flw     fa3, 4(sp)              ; fa3 = y = popf()

        ; for the following, would prefer: fmadd.s fa2, fa3, fa3, fa1
        fmul.s  fa0, fa3, fa3 ; fa2 = x * x + y * y
        fadd.s  fa2, fa0, fa1

        flw     fa0, 8(sp)              ; fa0 = z = popf()

        ; for the following, would prefer: fmadd.s fa1, fa0, fa0, fa2
        fmul.s  fa3, fa0, fa0 ; fa1 = x * x + y * y + z * z
        fadd.s  fa1, fa3, fa2

        flw     fa3, 12(sp)             ; fa3 = w = popf()

        ; for the following, would prefer: fmadd.s fa2, fa3, fa3, fa1
        fmul.s  fa0, fa3, fa3 ; fa2 = x * x + y * y + z * z + w * w
        fadd.s  fa2, fa0, fa1

        ; fsqrt.s fa0, fa2                ; fa0 = d = sqrtf(x * x + y * y + z * z + w * w)
        ; begin call to sqrt in place of fsqrt.s instruction
        addi    sp, sp, -28      ; Make room on stack (20 saved for this frame plus need 8 for next frame)
        sw      ra, 4(sp)       ; Save return address
        fsw     fa2, 0(sp)      ; Store parameter

        jal     ra, .sqrt   

        flw     fa0, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 28       ; Restore stack
        ; end of call to sqrt

        fsw     fa0, 12(sp)             ; pushf(d) 

        ; restore registers
        flw     fa0,-4(sp)
        flw     fa1,-8(sp)
        flw     fa2,-12(sp)
        flw     fa3,-16(sp)

        ; set stack pointer as if pops and pushes had occured
        addi    sp, sp, 12

        jalr    x0, ra, 0                  ; return;

.fract:
        ; save registers
        sw      a0, -4(sp)
        fsw     fa0, -8(sp)
        fsw     fa1, -12(sp)
        fsw     fa2, -16(sp)

        flw      fa0, 0(sp)      ; a0 = x

        ; a0<wholei> = ifloorf(fa0<x>)
	fcvt.w.s a0,fa0,rdn

        ; fa1<fract> = fa0<x> - fa1<float(wholei)>
        fcvt.s.w fa1,a0,rtz
	fsub.s	fa2,fa0,fa1

        fsw      fa2, 0(sp)     ; return(x)

        ; restore registers
        lw      a0, -4(sp)
        flw     fa0, -8(sp)
        flw     fa1, -12(sp)
        flw     fa2, -16(sp)

        jalr x0, ra, 0

.cross:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.log:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.faceforward1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.faceforward2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.faceforward3:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.faceforward4:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.acos:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.radians:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.degrees:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.exp2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.tan:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.atan2:
        ; save registers
        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)
        fsw     fa2, -12(sp)
        fsw     fa3, -16(sp)
        fsw     fa4, -20(sp)
        fsw     fa5, -24(sp)
        sw      a0, -28(sp)
        sw      a1, -32(sp)

        flw     fa1, 0(sp)      ; fa1 = y
        flw     fa0, 4(sp)      ; fa0 = x
        addi    sp,sp,-32        ; push saved registers

        fdiv.s          fa3, fa1, fa0   ; z = y / x

        fcvt.s.w        fa2,zero,rtz    ; fa2 = 0.0
        flt.s           a1,fa0,fa2      ; a1 = (x < 0)
        bne             a1,zero,.atan2_neg_x     ; if(x < 0) goto .atan2_neg_x;

        addi    sp, sp, -8      ; Make room on stack
        sw      ra, 4(sp)       ; Save return address
        fsw     fa3, 0(sp)      ; Store parameter

        jal     ra, .atan       ; fa0 = a = atan(z)     ; XXX OPT could restore regs and jump to .atan

        flw     fa0, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 8       ; Restore stack

        jal zero, .atan2_finish   ; goto .atan2_finish

.atan2_neg_x:
        ; x < 0

        fsgnjn.s fa4, fa3, fa1  ; float z2 = copysign(z, -y);

        addi    sp, sp, -8      ; Make room on stack
        sw      ra, 4(sp)       ; Save return address
        fsw     fa4, 0(sp)      ; Store parameter

        jal     ra, .atan       ; fa0 = a = atan(z2)

        flw     fa4, 0(sp)      ; Pop result
        lw      ra, 4(sp)       ; Restore return address
        addi    sp, sp, 8       ; Restore stack

        fsgnjn.s fa2, fa4, fa1  ; float a = copysign(brad_atan(z2), -y);

	lui	a0,%hi(.pi)
	flw	fa5,%lo(.pi)(a0)        ; float pi = 3.14159

        fsgnj.s fa3, fa5, fa1   ; sign_y_pi = copysign(pi, y)
        fadd.s  fa0, fa3, fa2   ; v = copysign(M_PI, y) + a;

.atan2_finish:

        addi    sp,sp,32        ; pop saved registers
        fsw     fa0, 4(sp)      ; store return value

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)
        flw     fa2, -12(sp)
        flw     fa3, -16(sp)
        flw     fa4, -20(sp)
        flw     fa5, -24(sp)
        lw      a0, -28(sp)
        lw      a1, -32(sp)

        addi    sp, sp, 4       ; We took two parameters and return one, so fix up stack

        jalr x0, ra, 0

.refract1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.refract2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.refract3:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.refract4:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.distance1:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.distance2:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.distance3:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.distance4:
        addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        jalr x0, ra, 0

.floor:
        ; save registers
        sw      a0, -4(sp)
        fsw     fa0, -8(sp)
        fsw     fa1, -12(sp)

        flw      fa0, 0(sp)      ; a0 = x

        ; a0<wholei> = ifloorf(fa0<x>)
	fcvt.w.s a0,fa0,rdn

        ; fa1<fract> = fa0<x> - fa1<float(wholei)>
        fcvt.s.w fa1,a0,rtz

        fsw      fa1, 0(sp)     ; return(fract)

        ; restore registers
        lw      a0, -4(sp)
        flw     fa0, -8(sp)
        flw     fa1, -12(sp)

        jalr x0, ra, 0

.step:
        sw      a0, -4(sp)
        fsw     fa0, -8(sp)
        fsw     fa1, -12(sp)
        fsw     fa2, -16(sp)

        ; float edge = popf();
        flw      fa0, 0(sp)      ; fa0 = edge = pop()

        ; float x = popf();
        flw      fa1, 4(sp)      ; fa1 = x = pop()

        ; float y = (x < edge) ? 0.0f : 1.0f;
        fle.s     a0, fa0, fa1

        fcvt.s.w fa2,a0,rtz

        ; pushf(y);
        fsw     fa2, 4(sp)

        lw      a0, -4(sp)
        flw     fa0, -8(sp)
        flw     fa1, -12(sp)
        flw     fa2, -16(sp)

        addi    sp, sp, 4       ; We took two parameters and return one, so fix up stack

        jalr x0, ra, 0

.dot1:
        ; save registers
        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)

        flw     fa0, 0(sp)      ; x1
        flw     fa1, 8(sp)      ; x2
        fmul.s  fa0, fa0, fa1   ; x1*x2

        fsw     fa0, 8(sp)      ; return value

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)

        addi    sp, sp, 4       ; we took two parameters and return one, so fix up stack
        jalr    x0, ra, 0       ; return

.dot2:
        ; save registers
        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)
        fsw     fa2, -12(sp)

        flw     fa0, 0(sp)      ; x1
        flw     fa1, 8(sp)      ; x2
        fmul.s  fa2, fa0, fa1   ; x1*x2

        flw     fa0, 4(sp)      ; y1
        flw     fa1, 12(sp)     ; y2
        fmul.s  fa0, fa0, fa1   ; y1*y2

        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2
        fsw     fa2, 12(sp)     ; return value

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)
        flw     fa2, -12(sp)

        addi    sp, sp, 12      ; we took four parameters and return one, so fix up stack
        jalr    x0, ra, 0       ; return

.dot3:
        ; save registers
        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)
        fsw     fa2, -12(sp)

        flw     fa0, 0(sp)      ; x1
        flw     fa1, 12(sp)     ; x2
        fmul.s  fa2, fa0, fa1   ; x1*x2

        flw     fa0, 4(sp)      ; y1
        flw     fa1, 16(sp)     ; y2
        fmul.s  fa0, fa0, fa1   ; y1*y2
        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2

        flw     fa0, 8(sp)      ; z1
        flw     fa1, 20(sp)     ; z2
        fmul.s  fa0, fa0, fa1   ; z1*z2
        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2 + z1*z2

        fsw     fa2, 20(sp)     ; return value

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)
        flw     fa2, -12(sp)

        addi    sp, sp, 20      ; we took six parameters and return one, so fix up stack
        jalr    x0, ra, 0       ; return

.dot4:
        ; save registers
        fsw     fa0, -4(sp)
        fsw     fa1, -8(sp)
        fsw     fa2, -12(sp)

        flw     fa0, 0(sp)      ; x1
        flw     fa1, 16(sp)     ; x2
        fmul.s  fa2, fa0, fa1   ; x1*x2

        flw     fa0, 4(sp)      ; y1
        flw     fa1, 20(sp)     ; y2
        fmul.s  fa0, fa0, fa1   ; y1*y2
        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2

        flw     fa0, 8(sp)      ; z1
        flw     fa1, 24(sp)     ; z2
        fmul.s  fa0, fa0, fa1   ; z1*z2
        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2 + z1*z2

        flw     fa0, 12(sp)     ; w1
        flw     fa1, 28(sp)     ; w2
        fmul.s  fa0, fa0, fa1   ; w1*w2
        fadd.s  fa2, fa0, fa2   ; x1*x2 + y1*y2 + z1*z2 + w1*w2

        fsw     fa2, 28(sp)     ; return value

        ; restore registers
        flw     fa0, -4(sp)
        flw     fa1, -8(sp)
        flw     fa2, -12(sp)

        addi    sp, sp, 28      ; we took eight parameters and return one, so fix up stack
        jalr    x0, ra, 0       ; return

.any1:
        ; addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        ; any(a) = a so just return
        jalr x0, ra, 0

.any2:
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        or a2, a0, a1  ; c = a || b
        sw a2, 4(sp)    ; return(c)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)

        addi    sp, sp, 4       ; We took two parameters and return one, so fix up stack
        jalr x0, ra, 0

.any3:
        ; save registers
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)
        sw      a3, -16(sp)
        sw      a4, -20(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        lw a2, 8(sp)    ; c
        or a4, a0, a1  ; e = a || b
        or a0, a2, a4  ; f = c || e
        sw a0, 8(sp)    ; return(f)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)
        lw      a3, -16(sp)
        lw      a4, -20(sp)

        addi    sp, sp, 8       ; We took three parameters and return one, so fix up stack
        jalr x0, ra, 0

.any4:
        ; save registers
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)
        sw      a3, -16(sp)
        sw      a4, -20(sp)
        sw      a5, -24(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        lw a2, 8(sp)    ; c
        lw a3, 12(sp)   ; d
        or a4, a0, a1  ; e = a || b
        or a5, a2, a3  ; f = c || d
        or a0, a4, a5  ; g = e || f
        sw a0, 12(sp)   ; return(g)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)
        lw      a3, -16(sp)
        lw      a4, -20(sp)
        lw      a5, -24(sp)

        addi    sp, sp, 12      ; We took four parameters and return one, so fix up stack
        jalr x0, ra, 0

.all1:
        ; addi x0, x0, 0  ; NOP caught by gpuemu; functionality will be proxied
        ; all(a) = a so just return
        jalr x0, ra, 0

.all2:
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        and a2, a0, a1  ; c = a && b
        sw a2, 4(sp)    ; return(c)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)

        addi    sp, sp, 4       ; We took two parameters and return one, so fix up stack
        jalr x0, ra, 0

.all3:
        ; save registers
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)
        sw      a3, -16(sp)
        sw      a4, -20(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        lw a2, 8(sp)    ; c
        and a4, a0, a1  ; e = a && b
        and a0, a2, a4  ; f = c && e
        sw a0, 8(sp)    ; return(f)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)
        lw      a3, -16(sp)
        lw      a4, -20(sp)

        addi    sp, sp, 8       ; We took three parameters and return one, so fix up stack
        jalr x0, ra, 0

.all4:
        ; save registers
        sw      a0, -4(sp)
        sw      a1, -8(sp)
        sw      a2, -12(sp)
        sw      a3, -16(sp)
        sw      a4, -20(sp)
        sw      a5, -24(sp)

        lw a0, 0(sp)    ; a
        lw a1, 4(sp)    ; b
        lw a2, 8(sp)    ; c
        lw a3, 12(sp)   ; d
        and a4, a0, a1  ; e = a && b
        and a5, a2, a3  ; f = c && d
        and a0, a4, a5  ; g = e && f
        sw a0, 12(sp)   ; return(g)

        ; restore registers
        lw      a0, -4(sp)
        lw      a1, -8(sp)
        lw      a2, -12(sp)
        lw      a3, -16(sp)
        lw      a4, -20(sp)
        lw      a5, -24(sp)

        addi    sp, sp, 12      ; We took four parameters and return one, so fix up stack
        jalr x0, ra, 0

